#!/usr/bin/env node

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {// file: lambda_pattern/_

	const jspm = eval('require')(
	        process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	    const q = eval('require')(
	        process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	    jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	    const promises = [
	        // load jspm
	    jspm.import('commander'),
	    // load local
	    __webpack_require__(2),
	    // other
	        jspm.import('async-stacktrace'),
	        jspm.import('wordwrap')];
	    module.exports = q.all(promises).spread((
	        module_commander,
	    local_include__test_commander,
	    ERR,
	        wordwrap) => {
	    const _ = () => {};





	if (__webpack_require__.c[0] === module) {
	    local_include__test_commander(module_commander);
	    module_commander.parse(process.argv);}

	    return _;}).catch((err) => {console.log(err);});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = [
	  __webpack_require__(3),
	  jspm.import('async-stacktrace'),
	  jspm.import('wordwrap')
	];
	module.exports = q.all(promises).spread(function (local_include__test, ERR, wordwrap) {
	  var _;
	  _ = function _(commander) {
	    var success_message;
	    success_message = 'tests complete';
	    commander.command('test').description('run all tests').action(function () {
	      var err;
	      local_include__test(function (arguments, _$param0) {
	        err = _$param0;
	        if (ERR(err, cb)) {
	          return;
	        }
	        console.log(success_message);
	      }.bind(this, arguments));
	    });
	  };
	  return _;
	}).catch(function (err) {
	  console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// file: lambda_pattern/_test

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load jspm
	jspm.import('bluebird'), jspm.import('marked'), jspm.import('marked-terminal'),
	// load local
	__webpack_require__(4), __webpack_require__(5),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (module_bluebird, module_marked, module_markedterminal, local_include_sharedconcat_promises, local_include_unbrace_test, ERR, wordwrap) {
	    var _ = function _() {
	        module_bluebird.config({ warnings: false, longStackTraces: false });
	        module_marked.setOptions({ renderer: new module_markedterminal() });

	        local_include_sharedconcat_promises('test results:', [local_include_unbrace_test()]).then(function (i) {
	            console.log(i);
	        }).catch(function (i) {
	            console.log(i);
	        });
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	// file: shared/concat_promises

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load jspm
	jspm.import('bluebird'), jspm.import('lodash'), jspm.import('bash-color'),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (module_bluebird, module_lodash, module_bashcolor, ERR, wordwrap) {
	    var _ = function _(title, promises) {
	        return module_bluebird.all(module_lodash.map(promises, function (promise) {
	            return promise.then(function (i) {
	                return module_bluebird.resolve([false, i]);
	            }, function (i) {
	                return module_bluebird.resolve([true, i]);
	            });
	        })).then(function (results) {
	            var _module_lodash$reduce = module_lodash.reduce(results, function (acc, result) {
	                return [acc[0] || result[0], acc[1].concat(result[1])];
	            }, [false, [module_bashcolor.blue('\n' + title + '\n')]]),
	                _module_lodash$reduce2 = _slicedToArray(_module_lodash$reduce, 2),
	                reject = _module_lodash$reduce2[0],
	                strings = _module_lodash$reduce2[1];

	            if (reject) return module_bluebird.reject(strings.join('\n'));
	            return module_bluebird.resolve(strings.join('\n'));
	        });
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// file: unbrace/_test

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load jspm
	jspm.import('bluebird'),
	// load local
	__webpack_require__(6), __webpack_require__(7),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (module_bluebird, local_include_beforetxt, local_include_unbrace, ERR, wordwrap) {
	    var _ = function _() {
	        var before = local_include_beforetxt;
	        local_include_unbrace(before);
	        return module_bluebird.resolve();
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = "(symbols_to_remove,  i) => {\n    if  (i.err)  return  i;\n    return  .. lo.reduce(\n        symbols_to_remove,\n        (acc,  symbol) => {\n            if  (acc.err) {\n                return  acc;}\n            const  str  =  acc.line.trim();\n            if (symbol  !==  str.slice(-1)) {\n                return  {err:  true,  line:  str};}\n            return  {err:  false,  line:  str.slice(0,  -1)};},\n        i);};\n\n"

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// file: unbrace/unbrace

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load jspm
	jspm.import('lodash'),
	// load local
	__webpack_require__(8), __webpack_require__(9), __webpack_require__(11),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (module_lodash, local_include_find_multiline_opened_and_closed, local_include_clear_line_ends, local_include_discover_sections, ERR, wordwrap) {
	    var _ = function _(d) {
	        d = d.split('\n').map(function (line) {
	            return {
	                line: line,
	                multiline_symbols: local_include_find_multiline_opened_and_closed(line) };
	        }).map(local_include_clear_line_ends).reduce(local_include_discover_sections, null);
	        module_lodash.map(d, function (i) {
	            return console.log(i);
	        });
	        return d;
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	'use strict';

	// file: unbrace/find_multiline_opened_and_closed

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load jspm
	jspm.import('lodash'),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (module_lodash, ERR, wordwrap) {
	    var _ = function _(line) {
	        return module_lodash.reduce(line, function (acc, symbol) {
	            if (!'(){}[]'.includes(symbol)) return acc;
	            if ('({['.includes(symbol)) {
	                acc.opened.unshift(symbol);
	                return acc;
	            }
	            if (acc.opened[0] === '(' && symbol === ')' || acc.opened[0] === '{' && symbol === '}' || acc.opened[0] === '[' && symbol === ']') {
	                acc.opened.shift();
	                return acc;
	            }
	            acc.closed.push(symbol);
	            return acc;
	        }, { opened: [], closed: [] });
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	// file: unbrace/clear_line_ends

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load local
	__webpack_require__(10),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (local_include_clear_line_end, ERR, wordwrap) {
	    var _ = function _(i) {
	        var res = local_include_clear_line_end(i.multiline_symbols.closes, local_include_clear_line_end(i.multiline_symbols.opened, { err: false, line: i.line }));
	        if (res.err) return { line: i.line, multiline_symbols: [] };
	        i.line = res.line;
	        return i;
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	'use strict';

	// file: unbrace/clear_line_end

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// load jspm
	jspm.import('lodash'),
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (module_lodash, ERR, wordwrap) {
	    var _ = function _(symbols_to_remove, i) {
	        if (i.err) return i;
	        return module_lodash.reduce(symbols_to_remove, function (acc, symbol) {
	            if (acc.err) {
	                return acc;
	            }
	            var str = acc.line.trim();
	            if (symbol !== str.slice(-1)) {
	                return { err: true, line: str };
	            }
	            return { err: false, line: str.slice(0, -1) };
	        }, i);
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	'use strict';

	// file: unbrace/discover_sections

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = [
	// other
	jspm.import('async-stacktrace'), jspm.import('wordwrap')];
	module.exports = q.all(promises).spread(function (ERR, wordwrap) {
	    var _ = function _(acc, line) {
	        if (!acc) {
	            acc = { stack: [], ret: [] };
	        }

	        line.multiline_symbols.closed.map(function () {
	            return acc.stack.shift();
	        });
	        line.multiline_symbols.opened.map(function (i) {
	            return acc.stack.push(i);
	        });
	        console.log(acc.stack);
	        acc.ret.push([line.line, acc.stack]);
	        return acc;
	    };

	    return _;
	}).catch(function (err) {
	    console.log(err);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ })
/******/ ]);
    if (!module.parent) {
        module.exports.then(function(f) {f(function (er) {
            if (er) {
               console.log(er.toString());
            }
        });});
    }