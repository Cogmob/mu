#!/usr/bin/env node

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';

	var ERR = __webpack_require__(2);
	var word_wrap = __webpack_require__(3);
	var create = __webpack_require__(4);
	var store = __webpack_require__(131);
	var path = __webpack_require__(18);
	var is_function = __webpack_require__(132);
	var commander = __webpack_require__(133);

	commander.command('test [test_name]').description('perform the test of the given name').option('-s, --silent', 'supress output').action(function (env, options) {
	    console.log('test is running');
	    console.log('env:');
	    console.log(env);
	    console.log('options:');
	    console.log(options);
	});

	commander.command('create lambda_pattern').description('make a new lambda patern project').action(function (project_name) {
	    create(process.cwd, project_name, 2000, function (err) {
	        return console.log(err);
	    });
	});

	module.exports = {
	    commander: commander,
	    run: function run() {
	        return commander.parse(process.argv);
	    } };

	if (!module.parent) {
	    commander.parse(process.argv);
	}
	/* Generated by Continuation.js v0.1.7 */
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	/*
	 * 2011 Peter 'Pita' Martischka
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS-IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var header = "Async Stacktrace:";

	module.exports = function (err, callback)
	{
	  //there is a error
	  if(err != null)
	  {
	    //if there is already a stacktrace avaiable
	    if(err.stack != null)
	    {
	      //split stack by line
	      var stackParts = err.stack.split("\n");
	      
	      //check if there is already a header set, if not add one and a empty line
	      if(stackParts[0] != header)
	      {
	        stackParts.unshift(header,""); 
	      }
	      
	      //add a new stacktrace line
	      var asyncStackLine = new Error().stack.split("\n")[2];
	      stackParts.splice(1,0,asyncStackLine);
	      
	      //join the stacktrace
	      err.stack = stackParts.join("\n");
	    }
	    //no stacktrace, so lets create an error out of this object
	    else
	    {
	      err = new Error(err);
	    }
	  
	    //there is a callback, lets call it
	    if(callback != null)
	    {
	      callback(err);
	    }
	    //no callback, throw the error
	    else
	    {
	      throw err;
	    }
	  }
	  
	  //return true if an error happend
	  return err != null;
	}


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*!
	 * word-wrap <https://github.com/jonschlinkert/word-wrap>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 *
	 * @attribution
	 * Adapted from http://james.padolsey.com/javascript/wordwrap-for-javascript/
	 */

	module.exports = function(str, options) {
	  options = options || {};
	  if (str == null) {
	    return str;
	  }

	  var width = options.width || 50;
	  var indent = (typeof options.indent === 'string')
	    ? options.indent
	    : '  ';

	  var newline = options.newline || '\n' + indent;
	  var escape = typeof options.escape === 'function'
	    ? options.escape
	    : identity;

	  var regexString = '.{1,' + width + '}';
	  if (options.cut !== true) {
	    regexString += '([\\s\u200B]+|$)|[^\\s\u200B]+?([\\s\u200B]+|$)';
	  }

	  var re = new RegExp(regexString, 'g');
	  var lines = str.match(re) || [];
	  var result = indent + lines.map(function(line) {
	    if (line.slice(-1) === '\n') {
	      line = line.slice(0, line.length - 1);
	    }
	    return escape(line);
	  }).join(newline);

	  if (options.trim === true) {
	    result = result.replace(/[ \t]*$/gm, '');
	  }
	  return result;
	};

	function identity(str) {
	  return str;
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {var ERR, word_wrap, fs, download_updatables, create;
	'use strict';
	ERR = __webpack_require__(2);
	word_wrap = __webpack_require__(3);
	fs = __webpack_require__(5);
	download_updatables = __webpack_require__(49);
	create = function create(root_path, project_name, year, cb) {
	  var skel_path, gen_path, err, temp_module_path, module_path, temp_index_path, index_path, temp_test_path, test_path, readme, index, test_file, meta_path, meta;
	  skel_path = __dirname + '/../../skeleton';
	  gen_path = root_path + '/' + project_name;
	  fs.copy(skel_path, gen_path, function (arguments, _$param0) {
	    err = _$param0;
	    if (ERR(err, cb)) {
	      return;
	    }
	    temp_module_path = gen_path + '/src/project_name';
	    module_path = gen_path + '/src/' + project_name;
	    fs.move(temp_module_path, module_path, function (arguments, _$param1) {
	      err = _$param1;
	      if (ERR(err, cb)) {
	        return;
	      }
	      temp_index_path = module_path + '/project_name.es6';
	      index_path = module_path + '/' + project_name + '.es6';
	      fs.move(temp_index_path, index_path, function (arguments, _$param2) {
	        err = _$param2;
	        if (ERR(err, cb)) {
	          return;
	        }
	        temp_test_path = module_path + '/project_name_test.es6';
	        test_path = module_path + '/' + project_name + '_test.es6';
	        fs.move(temp_test_path, test_path, function (arguments, _$param3) {
	          err = _$param3;
	          if (ERR(err, cb)) {
	            return;
	          }
	          fs.readFile(gen_path + '/README.md', 'utf8', function (arguments, _$param4, _$param5) {
	            err = _$param4;
	            readme = _$param5;
	            if (ERR(err, cb)) {
	              return;
	            }
	            readme = readme.replace(/\[\[project_name\]\]/g, project_name);
	            fs.writeFile(gen_path + '/README.md', readme, function (arguments, _$param6) {
	              err = _$param6;
	              if (ERR(err, cb)) {
	                return;
	              }
	              fs.readFile(index_path, 'utf8', function (arguments, _$param7, _$param8) {
	                err = _$param7;
	                index = _$param8;
	                if (ERR(err, cb)) {
	                  return;
	                }
	                index = index.replace(/\[\[project_name\]\]/g, project_name);
	                fs.writeFile(index_path, index, function (arguments, _$param9) {
	                  err = _$param9;
	                  if (ERR(err, cb)) {
	                    return;
	                  }
	                  fs.readFile(test_path, 'utf8', function (arguments, _$param10, _$param11) {
	                    err = _$param10;
	                    test_file = _$param11;
	                    if (ERR(err, cb)) {
	                      return;
	                    }
	                    test_file = test_file.replace(/\[\[project_name\]\]/g, project_name);
	                    fs.writeFile(test_path, test_file, function (arguments, _$param12) {
	                      err = _$param12;
	                      if (ERR(err, cb)) {
	                        return;
	                      }
	                      meta_path = module_path + '/metadata.yaml';
	                      fs.readFile(meta_path, 'utf8', function (arguments, _$param13, _$param14) {
	                        err = _$param13;
	                        meta = _$param14;
	                        if (ERR(err, cb)) {
	                          return;
	                        }
	                        meta = meta.replace(/\[\[project_name\]\]/g, project_name);
	                        fs.writeFile(meta_path, meta, function (arguments, _$param15) {
	                          err = _$param15;
	                          if (ERR(err, cb)) {
	                            return;
	                          }
	                          fs.ensureDir(gen_path + '/gen/dev', function (arguments, _$param16) {
	                            err = _$param16;
	                            if (ERR(err, cb)) {
	                              return;
	                            }
	                            download_updatables(gen_path, 'HEAD', function (arguments, _$param17) {
	                              err = _$param17;
	                              if (ERR(err, cb)) {
	                                return;
	                              }
	                              cb(null);
	                            }.bind(this, arguments));
	                          }.bind(this, arguments));
	                        }.bind(this, arguments));
	                      }.bind(this, arguments));
	                    }.bind(this, arguments));
	                  }.bind(this, arguments));
	                }.bind(this, arguments));
	              }.bind(this, arguments));
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  }.bind(this, arguments));
	};
	module.exports = create;
	/* Generated by Continuation.js v0.1.7 */
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(6)

	var fse = {}
	var gfs = __webpack_require__(7)

	// attach fs methods to fse
	Object.keys(gfs).forEach(function (key) {
	  fse[key] = gfs[key]
	})

	var fs = fse

	assign(fs, __webpack_require__(16))
	assign(fs, __webpack_require__(26))
	assign(fs, __webpack_require__(22))
	assign(fs, __webpack_require__(29))
	assign(fs, __webpack_require__(31))
	assign(fs, __webpack_require__(36))
	assign(fs, __webpack_require__(37))
	assign(fs, __webpack_require__(38))
	assign(fs, __webpack_require__(44))
	assign(fs, __webpack_require__(45))
	assign(fs, __webpack_require__(48))

	module.exports = fs

	// maintain backwards compatibility for awhile
	var jsonfile = {}
	Object.defineProperty(jsonfile, 'spaces', {
	  get: function () {
	    return fs.spaces // found in ./json
	  },
	  set: function (val) {
	    fs.spaces = val
	  }
	})

	module.exports.jsonfile = jsonfile // so users of fs-extra can modify jsonFile.spaces


/***/ },
/* 6 */
/***/ function(module, exports) {

	// simple mutable assign
	function assign () {
	  var args = [].slice.call(arguments).filter(function (i) { return i })
	  var dest = args.shift()
	  args.forEach(function (src) {
	    Object.keys(src).forEach(function (key) {
	      dest[key] = src[key]
	    })
	  })

	  return dest
	}

	module.exports = assign


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(8)
	var polyfills = __webpack_require__(9)
	var legacy = __webpack_require__(12)
	var queue = []

	var util = __webpack_require__(14)

	function noop () {}

	var debug = noop
	if (util.debuglog)
	  debug = util.debuglog('gfs4')
	else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
	  debug = function() {
	    var m = util.format.apply(util, arguments)
	    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
	    console.error(m)
	  }

	if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
	  process.on('exit', function() {
	    debug(queue)
	    __webpack_require__(15).equal(queue.length, 0)
	  })
	}

	module.exports = patch(__webpack_require__(10))
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
	  module.exports = patch(fs)
	}

	// Always patch fs.close/closeSync, because we want to
	// retry() whenever a close happens *anywhere* in the program.
	// This is essential when multiple graceful-fs instances are
	// in play at the same time.
	module.exports.close =
	fs.close = (function (fs$close) { return function (fd, cb) {
	  return fs$close.call(fs, fd, function (err) {
	    if (!err)
	      retry()

	    if (typeof cb === 'function')
	      cb.apply(this, arguments)
	  })
	}})(fs.close)

	module.exports.closeSync =
	fs.closeSync = (function (fs$closeSync) { return function (fd) {
	  // Note that graceful-fs also retries when fs.closeSync() fails.
	  // Looks like a bug to me, although it's probably a harmless one.
	  var rval = fs$closeSync.apply(fs, arguments)
	  retry()
	  return rval
	}})(fs.closeSync)

	function patch (fs) {
	  // Everything that references the open() function needs to be in here
	  polyfills(fs)
	  fs.gracefulify = patch
	  fs.FileReadStream = ReadStream;  // Legacy name.
	  fs.FileWriteStream = WriteStream;  // Legacy name.
	  fs.createReadStream = createReadStream
	  fs.createWriteStream = createWriteStream
	  var fs$readFile = fs.readFile
	  fs.readFile = readFile
	  function readFile (path, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null

	    return go$readFile(path, options, cb)

	    function go$readFile (path, options, cb) {
	      return fs$readFile(path, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$readFile, [path, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  var fs$writeFile = fs.writeFile
	  fs.writeFile = writeFile
	  function writeFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null

	    return go$writeFile(path, data, options, cb)

	    function go$writeFile (path, data, options, cb) {
	      return fs$writeFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$writeFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  var fs$appendFile = fs.appendFile
	  if (fs$appendFile)
	    fs.appendFile = appendFile
	  function appendFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null

	    return go$appendFile(path, data, options, cb)

	    function go$appendFile (path, data, options, cb) {
	      return fs$appendFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$appendFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  var fs$readdir = fs.readdir
	  fs.readdir = readdir
	  function readdir (path, options, cb) {
	    var args = [path]
	    if (typeof options !== 'function') {
	      args.push(options)
	    } else {
	      cb = options
	    }
	    args.push(go$readdir$cb)

	    return go$readdir(args)

	    function go$readdir$cb (err, files) {
	      if (files && files.sort)
	        files.sort()

	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	        enqueue([go$readdir, [args]])
	      else {
	        if (typeof cb === 'function')
	          cb.apply(this, arguments)
	        retry()
	      }
	    }
	  }

	  function go$readdir (args) {
	    return fs$readdir.apply(fs, args)
	  }

	  if (process.version.substr(0, 4) === 'v0.8') {
	    var legStreams = legacy(fs)
	    ReadStream = legStreams.ReadStream
	    WriteStream = legStreams.WriteStream
	  }

	  var fs$ReadStream = fs.ReadStream
	  ReadStream.prototype = Object.create(fs$ReadStream.prototype)
	  ReadStream.prototype.open = ReadStream$open

	  var fs$WriteStream = fs.WriteStream
	  WriteStream.prototype = Object.create(fs$WriteStream.prototype)
	  WriteStream.prototype.open = WriteStream$open

	  fs.ReadStream = ReadStream
	  fs.WriteStream = WriteStream

	  function ReadStream (path, options) {
	    if (this instanceof ReadStream)
	      return fs$ReadStream.apply(this, arguments), this
	    else
	      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
	  }

	  function ReadStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        if (that.autoClose)
	          that.destroy()

	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	        that.read()
	      }
	    })
	  }

	  function WriteStream (path, options) {
	    if (this instanceof WriteStream)
	      return fs$WriteStream.apply(this, arguments), this
	    else
	      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
	  }

	  function WriteStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        that.destroy()
	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	      }
	    })
	  }

	  function createReadStream (path, options) {
	    return new ReadStream(path, options)
	  }

	  function createWriteStream (path, options) {
	    return new WriteStream(path, options)
	  }

	  var fs$open = fs.open
	  fs.open = open
	  function open (path, flags, mode, cb) {
	    if (typeof mode === 'function')
	      cb = mode, mode = null

	    return go$open(path, flags, mode, cb)

	    function go$open (path, flags, mode, cb) {
	      return fs$open(path, flags, mode, function (err, fd) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$open, [path, flags, mode, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  return fs
	}

	function enqueue (elem) {
	  debug('ENQUEUE', elem[0].name, elem[1])
	  queue.push(elem)
	}

	function retry () {
	  var elem = queue.shift()
	  if (elem) {
	    debug('RETRY', elem[0].name, elem[1])
	    elem[0].apply(null, elem[1])
	  }
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(10)
	var constants = __webpack_require__(11)

	var origCwd = process.cwd
	var cwd = null

	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

	process.cwd = function() {
	  if (!cwd)
	    cwd = origCwd.call(process)
	  return cwd
	}
	try {
	  process.cwd()
	} catch (er) {}

	var chdir = process.chdir
	process.chdir = function(d) {
	  cwd = null
	  chdir.call(process, d)
	}

	module.exports = patch

	function patch (fs) {
	  // (re-)implement some things that are known busted or missing.

	  // lchmod, broken prior to 0.6.2
	  // back-port the fix here.
	  if (constants.hasOwnProperty('O_SYMLINK') &&
	      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
	    patchLchmod(fs)
	  }

	  // lutimes implementation, or no-op
	  if (!fs.lutimes) {
	    patchLutimes(fs)
	  }

	  // https://github.com/isaacs/node-graceful-fs/issues/4
	  // Chown should not fail on einval or eperm if non-root.
	  // It should not fail on enosys ever, as this just indicates
	  // that a fs doesn't support the intended operation.

	  fs.chown = chownFix(fs.chown)
	  fs.fchown = chownFix(fs.fchown)
	  fs.lchown = chownFix(fs.lchown)

	  fs.chmod = chmodFix(fs.chmod)
	  fs.fchmod = chmodFix(fs.fchmod)
	  fs.lchmod = chmodFix(fs.lchmod)

	  fs.chownSync = chownFixSync(fs.chownSync)
	  fs.fchownSync = chownFixSync(fs.fchownSync)
	  fs.lchownSync = chownFixSync(fs.lchownSync)

	  fs.chmodSync = chmodFixSync(fs.chmodSync)
	  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
	  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

	  fs.stat = statFix(fs.stat)
	  fs.fstat = statFix(fs.fstat)
	  fs.lstat = statFix(fs.lstat)

	  fs.statSync = statFixSync(fs.statSync)
	  fs.fstatSync = statFixSync(fs.fstatSync)
	  fs.lstatSync = statFixSync(fs.lstatSync)

	  // if lchmod/lchown do not exist, then make them no-ops
	  if (!fs.lchmod) {
	    fs.lchmod = function (path, mode, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchmodSync = function () {}
	  }
	  if (!fs.lchown) {
	    fs.lchown = function (path, uid, gid, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchownSync = function () {}
	  }

	  // on Windows, A/V software can lock the directory, causing this
	  // to fail with an EACCES or EPERM if the directory contains newly
	  // created files.  Try again on failure, for up to 60 seconds.

	  // Set the timeout this long because some Windows Anti-Virus, such as Parity
	  // bit9, may lock files for up to a minute, causing npm package install
	  // failures. Also, take care to yield the scheduler. Windows scheduling gives
	  // CPU to a busy looping process, which can cause the program causing the lock
	  // contention to be starved of CPU by node, so the contention doesn't resolve.
	  if (platform === "win32") {
	    fs.rename = (function (fs$rename) { return function (from, to, cb) {
	      var start = Date.now()
	      var backoff = 0;
	      fs$rename(from, to, function CB (er) {
	        if (er
	            && (er.code === "EACCES" || er.code === "EPERM")
	            && Date.now() - start < 60000) {
	          setTimeout(function() {
	            fs.stat(to, function (stater, st) {
	              if (stater && stater.code === "ENOENT")
	                fs$rename(from, to, CB);
	              else
	                cb(er)
	            })
	          }, backoff)
	          if (backoff < 100)
	            backoff += 10;
	          return;
	        }
	        if (cb) cb(er)
	      })
	    }})(fs.rename)
	  }

	  // if read() returns EAGAIN, then just try it again.
	  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {
	    var callback
	    if (callback_ && typeof callback_ === 'function') {
	      var eagCounter = 0
	      callback = function (er, _, __) {
	        if (er && er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	        }
	        callback_.apply(this, arguments)
	      }
	    }
	    return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	  }})(fs.read)

	  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
	    var eagCounter = 0
	    while (true) {
	      try {
	        return fs$readSync.call(fs, fd, buffer, offset, length, position)
	      } catch (er) {
	        if (er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          continue
	        }
	        throw er
	      }
	    }
	  }})(fs.readSync)
	}

	function patchLchmod (fs) {
	  fs.lchmod = function (path, mode, callback) {
	    fs.open( path
	           , constants.O_WRONLY | constants.O_SYMLINK
	           , mode
	           , function (err, fd) {
	      if (err) {
	        if (callback) callback(err)
	        return
	      }
	      // prefer to return the chmod error, if one occurs,
	      // but still try to close, and report closing errors if they occur.
	      fs.fchmod(fd, mode, function (err) {
	        fs.close(fd, function(err2) {
	          if (callback) callback(err || err2)
	        })
	      })
	    })
	  }

	  fs.lchmodSync = function (path, mode) {
	    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)

	    // prefer to return the chmod error, if one occurs,
	    // but still try to close, and report closing errors if they occur.
	    var threw = true
	    var ret
	    try {
	      ret = fs.fchmodSync(fd, mode)
	      threw = false
	    } finally {
	      if (threw) {
	        try {
	          fs.closeSync(fd)
	        } catch (er) {}
	      } else {
	        fs.closeSync(fd)
	      }
	    }
	    return ret
	  }
	}

	function patchLutimes (fs) {
	  if (constants.hasOwnProperty("O_SYMLINK")) {
	    fs.lutimes = function (path, at, mt, cb) {
	      fs.open(path, constants.O_SYMLINK, function (er, fd) {
	        if (er) {
	          if (cb) cb(er)
	          return
	        }
	        fs.futimes(fd, at, mt, function (er) {
	          fs.close(fd, function (er2) {
	            if (cb) cb(er || er2)
	          })
	        })
	      })
	    }

	    fs.lutimesSync = function (path, at, mt) {
	      var fd = fs.openSync(path, constants.O_SYMLINK)
	      var ret
	      var threw = true
	      try {
	        ret = fs.futimesSync(fd, at, mt)
	        threw = false
	      } finally {
	        if (threw) {
	          try {
	            fs.closeSync(fd)
	          } catch (er) {}
	        } else {
	          fs.closeSync(fd)
	        }
	      }
	      return ret
	    }

	  } else {
	    fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
	    fs.lutimesSync = function () {}
	  }
	}

	function chmodFix (orig) {
	  if (!orig) return orig
	  return function (target, mode, cb) {
	    return orig.call(fs, target, mode, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}

	function chmodFixSync (orig) {
	  if (!orig) return orig
	  return function (target, mode) {
	    try {
	      return orig.call(fs, target, mode)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}


	function chownFix (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid, cb) {
	    return orig.call(fs, target, uid, gid, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}

	function chownFixSync (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid) {
	    try {
	      return orig.call(fs, target, uid, gid)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}


	function statFix (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target, cb) {
	    return orig.call(fs, target, function (er, stats) {
	      if (!stats) return cb.apply(this, arguments)
	      if (stats.uid < 0) stats.uid += 0x100000000
	      if (stats.gid < 0) stats.gid += 0x100000000
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}

	function statFixSync (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target) {
	    var stats = orig.call(fs, target)
	    if (stats.uid < 0) stats.uid += 0x100000000
	    if (stats.gid < 0) stats.gid += 0x100000000
	    return stats;
	  }
	}

	// ENOSYS means that the fs doesn't support the op. Just ignore
	// that, because it doesn't matter.
	//
	// if there's no getuid, or if getuid() is something other
	// than 0, and the error is EINVAL or EPERM, then just ignore
	// it.
	//
	// This specific case is a silent failure in cp, install, tar,
	// and most other unix tools that manage permissions.
	//
	// When running as root, or if other types of errors are
	// encountered, then it's strict.
	function chownErOk (er) {
	  if (!er)
	    return true

	  if (er.code === "ENOSYS")
	    return true

	  var nonroot = !process.getuid || process.getuid() !== 0
	  if (nonroot) {
	    if (er.code === "EINVAL" || er.code === "EPERM")
	      return true
	  }

	  return false
	}


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var fs = __webpack_require__(8)

	module.exports = clone(fs)

	function clone (obj) {
	  if (obj === null || typeof obj !== 'object')
	    return obj

	  if (obj instanceof Object)
	    var copy = { __proto__: obj.__proto__ }
	  else
	    var copy = Object.create(null)

	  Object.getOwnPropertyNames(obj).forEach(function (key) {
	    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
	  })

	  return copy
	}


/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("constants");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(13).Stream

	module.exports = legacy

	function legacy (fs) {
	  return {
	    ReadStream: ReadStream,
	    WriteStream: WriteStream
	  }

	  function ReadStream (path, options) {
	    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

	    Stream.call(this);

	    var self = this;

	    this.path = path;
	    this.fd = null;
	    this.readable = true;
	    this.paused = false;

	    this.flags = 'r';
	    this.mode = 438; /*=0666*/
	    this.bufferSize = 64 * 1024;

	    options = options || {};

	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }

	    if (this.encoding) this.setEncoding(this.encoding);

	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.end === undefined) {
	        this.end = Infinity;
	      } else if ('number' !== typeof this.end) {
	        throw TypeError('end must be a Number');
	      }

	      if (this.start > this.end) {
	        throw new Error('start must be <= end');
	      }

	      this.pos = this.start;
	    }

	    if (this.fd !== null) {
	      process.nextTick(function() {
	        self._read();
	      });
	      return;
	    }

	    fs.open(this.path, this.flags, this.mode, function (err, fd) {
	      if (err) {
	        self.emit('error', err);
	        self.readable = false;
	        return;
	      }

	      self.fd = fd;
	      self.emit('open', fd);
	      self._read();
	    })
	  }

	  function WriteStream (path, options) {
	    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

	    Stream.call(this);

	    this.path = path;
	    this.fd = null;
	    this.writable = true;

	    this.flags = 'w';
	    this.encoding = 'binary';
	    this.mode = 438; /*=0666*/
	    this.bytesWritten = 0;

	    options = options || {};

	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }

	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.start < 0) {
	        throw new Error('start must be >= zero');
	      }

	      this.pos = this.start;
	    }

	    this.busy = false;
	    this._queue = [];

	    if (this.fd === null) {
	      this._open = fs.open;
	      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
	      this.flush();
	    }
	  }
	}


/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("stream");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("util");

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("assert");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  copy: __webpack_require__(17)
	}


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var ncp = __webpack_require__(19)
	var mkdir = __webpack_require__(22)

	function copy (src, dest, options, callback) {
	  if (typeof options === 'function' && !callback) {
	    callback = options
	    options = {}
	  } else if (typeof options === 'function' || options instanceof RegExp) {
	    options = {filter: options}
	  }
	  callback = callback || function () {}
	  options = options || {}

	  // Warn about using preserveTimestamps on 32-bit node:
	  if (options.preserveTimestamps && process.arch === 'ia32') {
	    console.warn('fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n' +
	    'see https://github.com/jprichardson/node-fs-extra/issues/269')
	  }

	  // don't allow src and dest to be the same
	  var basePath = process.cwd()
	  var currentPath = path.resolve(basePath, src)
	  var targetPath = path.resolve(basePath, dest)
	  if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'))

	  fs.lstat(src, function (err, stats) {
	    if (err) return callback(err)

	    var dir = null
	    if (stats.isDirectory()) {
	      var parts = dest.split(path.sep)
	      parts.pop()
	      dir = parts.join(path.sep)
	    } else {
	      dir = path.dirname(dest)
	    }

	    fs.exists(dir, function (dirExists) {
	      if (dirExists) return ncp(src, dest, options, callback)
	      mkdir.mkdirs(dir, function (err) {
	        if (err) return callback(err)
	        ncp(src, dest, options, callback)
	      })
	    })
	  })
	}

	module.exports = copy


/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	// imported from ncp (this is temporary, will rewrite)

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var utimes = __webpack_require__(20)

	function ncp (source, dest, options, callback) {
	  if (!callback) {
	    callback = options
	    options = {}
	  }

	  var basePath = process.cwd()
	  var currentPath = path.resolve(basePath, source)
	  var targetPath = path.resolve(basePath, dest)

	  var filter = options.filter
	  var transform = options.transform
	  var clobber = options.clobber !== false // default true
	  var dereference = options.dereference
	  var preserveTimestamps = options.preserveTimestamps === true

	  var started = 0
	  var finished = 0
	  var running = 0

	  var errored = false

	  startCopy(currentPath)

	  function startCopy (source) {
	    started++
	    if (filter) {
	      if (filter instanceof RegExp) {
	        console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')
	        if (!filter.test(source)) {
	          return doneOne(true)
	        }
	      } else if (typeof filter === 'function') {
	        if (!filter(source)) {
	          return doneOne(true)
	        }
	      }
	    }
	    return getStats(source)
	  }

	  function getStats (source) {
	    var stat = dereference ? fs.stat : fs.lstat
	    running++
	    stat(source, function (err, stats) {
	      if (err) return onError(err)

	      // We need to get the mode from the stats object and preserve it.
	      var item = {
	        name: source,
	        mode: stats.mode,
	        mtime: stats.mtime, // modified time
	        atime: stats.atime, // access time
	        stats: stats // temporary
	      }

	      if (stats.isDirectory()) {
	        return onDir(item)
	      } else if (stats.isFile() || stats.isCharacterDevice() || stats.isBlockDevice()) {
	        return onFile(item)
	      } else if (stats.isSymbolicLink()) {
	        // Symlinks don't really need to know about the mode.
	        return onLink(source)
	      }
	    })
	  }

	  function onFile (file) {
	    var target = file.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
	    isWritable(target, function (writable) {
	      if (writable) {
	        copyFile(file, target)
	      } else {
	        if (clobber) {
	          rmFile(target, function () {
	            copyFile(file, target)
	          })
	        } else {
	          var err = new Error('EEXIST: ' + target + ' already exists.')
	          err.code = 'EEXIST'
	          err.errno = -17
	          err.path = target
	          onError(err)
	        }
	      }
	    })
	  }

	  function copyFile (file, target) {
	    var readStream = fs.createReadStream(file.name)
	    var writeStream = fs.createWriteStream(target, { mode: file.mode })

	    readStream.on('error', onError)
	    writeStream.on('error', onError)

	    if (transform) {
	      transform(readStream, writeStream, file)
	    } else {
	      writeStream.on('open', function () {
	        readStream.pipe(writeStream)
	      })
	    }

	    writeStream.once('finish', function () {
	      fs.chmod(target, file.mode, function (err) {
	        if (err) return onError(err)
	        if (preserveTimestamps) {
	          utimes.utimesMillis(target, file.atime, file.mtime, function (err) {
	            if (err) return onError(err)
	            return doneOne()
	          })
	        } else {
	          doneOne()
	        }
	      })
	    })
	  }

	  function rmFile (file, done) {
	    fs.unlink(file, function (err) {
	      if (err) return onError(err)
	      return done()
	    })
	  }

	  function onDir (dir) {
	    var target = dir.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
	    isWritable(target, function (writable) {
	      if (writable) {
	        return mkDir(dir, target)
	      }
	      copyDir(dir.name)
	    })
	  }

	  function mkDir (dir, target) {
	    fs.mkdir(target, dir.mode, function (err) {
	      if (err) return onError(err)
	      // despite setting mode in fs.mkdir, doesn't seem to work
	      // so we set it here.
	      fs.chmod(target, dir.mode, function (err) {
	        if (err) return onError(err)
	        copyDir(dir.name)
	      })
	    })
	  }

	  function copyDir (dir) {
	    fs.readdir(dir, function (err, items) {
	      if (err) return onError(err)
	      items.forEach(function (item) {
	        startCopy(path.join(dir, item))
	      })
	      return doneOne()
	    })
	  }

	  function onLink (link) {
	    var target = link.replace(currentPath, targetPath)
	    fs.readlink(link, function (err, resolvedPath) {
	      if (err) return onError(err)
	      checkLink(resolvedPath, target)
	    })
	  }

	  function checkLink (resolvedPath, target) {
	    if (dereference) {
	      resolvedPath = path.resolve(basePath, resolvedPath)
	    }
	    isWritable(target, function (writable) {
	      if (writable) {
	        return makeLink(resolvedPath, target)
	      }
	      fs.readlink(target, function (err, targetDest) {
	        if (err) return onError(err)

	        if (dereference) {
	          targetDest = path.resolve(basePath, targetDest)
	        }
	        if (targetDest === resolvedPath) {
	          return doneOne()
	        }
	        return rmFile(target, function () {
	          makeLink(resolvedPath, target)
	        })
	      })
	    })
	  }

	  function makeLink (linkPath, target) {
	    fs.symlink(linkPath, target, function (err) {
	      if (err) return onError(err)
	      return doneOne()
	    })
	  }

	  function isWritable (path, done) {
	    fs.lstat(path, function (err) {
	      if (err) {
	        if (err.code === 'ENOENT') return done(true)
	        return done(false)
	      }
	      return done(false)
	    })
	  }

	  function onError (err) {
	    // ensure callback is defined & called only once:
	    if (!errored && callback !== undefined) {
	      errored = true
	      return callback(err)
	    }
	  }

	  function doneOne (skipped) {
	    if (!skipped) running--
	    finished++
	    if ((started === finished) && (running === 0)) {
	      if (callback !== undefined) {
	        return callback(null)
	      }
	    }
	  }
	}

	module.exports = ncp


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var os = __webpack_require__(21)

	// HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
	function hasMillisResSync () {
	  var tmpfile = path.join('millis-test-sync' + Date.now().toString() + Math.random().toString().slice(2))
	  tmpfile = path.join(os.tmpdir(), tmpfile)

	  // 550 millis past UNIX epoch
	  var d = new Date(1435410243862)
	  fs.writeFileSync(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141')
	  var fd = fs.openSync(tmpfile, 'r+')
	  fs.futimesSync(fd, d, d)
	  fs.closeSync(fd)
	  return fs.statSync(tmpfile).mtime > 1435410243000
	}

	function hasMillisRes (callback) {
	  var tmpfile = path.join('millis-test' + Date.now().toString() + Math.random().toString().slice(2))
	  tmpfile = path.join(os.tmpdir(), tmpfile)

	  // 550 millis past UNIX epoch
	  var d = new Date(1435410243862)
	  fs.writeFile(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141', function (err) {
	    if (err) return callback(err)
	    fs.open(tmpfile, 'r+', function (err, fd) {
	      if (err) return callback(err)
	      fs.futimes(fd, d, d, function (err) {
	        if (err) return callback(err)
	        fs.close(fd, function (err) {
	          if (err) return callback(err)
	          fs.stat(tmpfile, function (err, stats) {
	            if (err) return callback(err)
	            callback(null, stats.mtime > 1435410243000)
	          })
	        })
	      })
	    })
	  })
	}

	function timeRemoveMillis (timestamp) {
	  if (typeof timestamp === 'number') {
	    return Math.floor(timestamp / 1000) * 1000
	  } else if (timestamp instanceof Date) {
	    return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)
	  } else {
	    throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')
	  }
	}

	function utimesMillis (path, atime, mtime, callback) {
	  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
	  fs.open(path, 'r+', function (err, fd) {
	    if (err) return callback(err)
	    fs.futimes(fd, atime, mtime, function (futimesErr) {
	      fs.close(fd, function (closeErr) {
	        if (callback) callback(futimesErr || closeErr)
	      })
	    })
	  })
	}

	module.exports = {
	  hasMillisRes: hasMillisRes,
	  hasMillisResSync: hasMillisResSync,
	  timeRemoveMillis: timeRemoveMillis,
	  utimesMillis: utimesMillis
	}


/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = require("os");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  mkdirs: __webpack_require__(23),
	  mkdirsSync: __webpack_require__(25),
	  // alias
	  mkdirp: __webpack_require__(23),
	  mkdirpSync: __webpack_require__(25),
	  ensureDir: __webpack_require__(23),
	  ensureDirSync: __webpack_require__(25)
	}


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var invalidWin32Path = __webpack_require__(24).invalidWin32Path

	var o777 = parseInt('0777', 8)

	function mkdirs (p, opts, callback, made) {
	  if (typeof opts === 'function') {
	    callback = opts
	    opts = {}
	  } else if (!opts || typeof opts !== 'object') {
	    opts = { mode: opts }
	  }

	  if (process.platform === 'win32' && invalidWin32Path(p)) {
	    var errInval = new Error(p + ' contains invalid WIN32 path characters.')
	    errInval.code = 'EINVAL'
	    return callback(errInval)
	  }

	  var mode = opts.mode
	  var xfs = opts.fs || fs

	  if (mode === undefined) {
	    mode = o777 & (~process.umask())
	  }
	  if (!made) made = null

	  callback = callback || function () {}
	  p = path.resolve(p)

	  xfs.mkdir(p, mode, function (er) {
	    if (!er) {
	      made = made || p
	      return callback(null, made)
	    }
	    switch (er.code) {
	      case 'ENOENT':
	        if (path.dirname(p) === p) return callback(er)
	        mkdirs(path.dirname(p), opts, function (er, made) {
	          if (er) callback(er, made)
	          else mkdirs(p, opts, callback, made)
	        })
	        break

	      // In the case of any other error, just see if there's a dir
	      // there already.  If so, then hooray!  If not, then something
	      // is borked.
	      default:
	        xfs.stat(p, function (er2, stat) {
	          // if the stat fails, then that's super weird.
	          // let the original error be the failure reason.
	          if (er2 || !stat.isDirectory()) callback(er, made)
	          else callback(null, made)
	        })
	        break
	    }
	  })
	}

	module.exports = mkdirs


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var path = __webpack_require__(18)

	// get drive on windows
	function getRootPath (p) {
	  p = path.normalize(path.resolve(p)).split(path.sep)
	  if (p.length > 0) return p[0]
	  else return null
	}

	// http://stackoverflow.com/a/62888/10333 contains more accurate
	// TODO: expand to include the rest
	var INVALID_PATH_CHARS = /[<>:"|?*]/

	function invalidWin32Path (p) {
	  var rp = getRootPath(p)
	  p = p.replace(rp, '')
	  return INVALID_PATH_CHARS.test(p)
	}

	module.exports = {
	  getRootPath: getRootPath,
	  invalidWin32Path: invalidWin32Path
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var invalidWin32Path = __webpack_require__(24).invalidWin32Path

	var o777 = parseInt('0777', 8)

	function mkdirsSync (p, opts, made) {
	  if (!opts || typeof opts !== 'object') {
	    opts = { mode: opts }
	  }

	  var mode = opts.mode
	  var xfs = opts.fs || fs

	  if (process.platform === 'win32' && invalidWin32Path(p)) {
	    var errInval = new Error(p + ' contains invalid WIN32 path characters.')
	    errInval.code = 'EINVAL'
	    throw errInval
	  }

	  if (mode === undefined) {
	    mode = o777 & (~process.umask())
	  }
	  if (!made) made = null

	  p = path.resolve(p)

	  try {
	    xfs.mkdirSync(p, mode)
	    made = made || p
	  } catch (err0) {
	    switch (err0.code) {
	      case 'ENOENT':
	        if (path.dirname(p) === p) throw err0
	        made = mkdirsSync(path.dirname(p), opts, made)
	        mkdirsSync(p, opts, made)
	        break

	      // In the case of any other error, just see if there's a dir
	      // there already.  If so, then hooray!  If not, then something
	      // is borked.
	      default:
	        var stat
	        try {
	          stat = xfs.statSync(p)
	        } catch (err1) {
	          throw err0
	        }
	        if (!stat.isDirectory()) throw err0
	        break
	    }
	  }

	  return made
	}

	module.exports = mkdirsSync


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  copySync: __webpack_require__(27)
	}


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var copyFileSync = __webpack_require__(28)
	var mkdir = __webpack_require__(22)

	function copySync (src, dest, options) {
	  if (typeof options === 'function' || options instanceof RegExp) {
	    options = {filter: options}
	  }

	  options = options || {}
	  options.recursive = !!options.recursive

	  // default to true for now
	  options.clobber = 'clobber' in options ? !!options.clobber : true
	  options.dereference = 'dereference' in options ? !!options.dereference : false
	  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false

	  options.filter = options.filter || function () { return true }

	  // Warn about using preserveTimestamps on 32-bit node:
	  if (options.preserveTimestamps && process.arch === 'ia32') {
	    console.warn('fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n' +
	    'see https://github.com/jprichardson/node-fs-extra/issues/269')
	  }

	  var stats = (options.recursive && !options.dereference) ? fs.lstatSync(src) : fs.statSync(src)
	  var destFolder = path.dirname(dest)
	  var destFolderExists = fs.existsSync(destFolder)
	  var performCopy = false

	  if (stats.isFile()) {
	    if (options.filter instanceof RegExp) {
	      console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')
	      performCopy = options.filter.test(src)
	    } else if (typeof options.filter === 'function') performCopy = options.filter(src)

	    if (performCopy) {
	      if (!destFolderExists) mkdir.mkdirsSync(destFolder)
	      copyFileSync(src, dest, {clobber: options.clobber, preserveTimestamps: options.preserveTimestamps})
	    }
	  } else if (stats.isDirectory()) {
	    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)
	    var contents = fs.readdirSync(src)
	    contents.forEach(function (content) {
	      var opts = options
	      opts.recursive = true
	      copySync(path.join(src, content), path.join(dest, content), opts)
	    })
	  } else if (options.recursive && stats.isSymbolicLink()) {
	    var srcPath = fs.readlinkSync(src)
	    fs.symlinkSync(srcPath, dest)
	  }
	}

	module.exports = copySync


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)

	var BUF_LENGTH = 64 * 1024
	var _buff = new Buffer(BUF_LENGTH)

	function copyFileSync (srcFile, destFile, options) {
	  var clobber = options.clobber
	  var preserveTimestamps = options.preserveTimestamps

	  if (fs.existsSync(destFile)) {
	    if (clobber) {
	      fs.unlinkSync(destFile)
	    } else {
	      var err = new Error('EEXIST: ' + destFile + ' already exists.')
	      err.code = 'EEXIST'
	      err.errno = -17
	      err.path = destFile
	      throw err
	    }
	  }

	  var fdr = fs.openSync(srcFile, 'r')
	  var stat = fs.fstatSync(fdr)
	  var fdw = fs.openSync(destFile, 'w', stat.mode)
	  var bytesRead = 1
	  var pos = 0

	  while (bytesRead > 0) {
	    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
	    fs.writeSync(fdw, _buff, 0, bytesRead)
	    pos += bytesRead
	  }

	  if (preserveTimestamps) {
	    fs.futimesSync(fdw, stat.atime, stat.mtime)
	  }

	  fs.closeSync(fdr)
	  fs.closeSync(fdw)
	}

	module.exports = copyFileSync


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var rimraf = __webpack_require__(30)

	function removeSync (dir) {
	  return rimraf.sync(dir, {disableGlob: true})
	}

	function remove (dir, callback) {
	  var options = {disableGlob: true}
	  return callback ? rimraf(dir, options, callback) : rimraf(dir, options, function () {})
	}

	module.exports = {
	  remove: remove,
	  removeSync: removeSync
	}


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = rimraf
	rimraf.sync = rimrafSync

	var assert = __webpack_require__(15)
	var path = __webpack_require__(18)
	var fs = __webpack_require__(7)

	var isWindows = (process.platform === 'win32')

	function defaults (options) {
	  var methods = [
	    'unlink',
	    'chmod',
	    'stat',
	    'lstat',
	    'rmdir',
	    'readdir'
	  ]
	  methods.forEach(function (m) {
	    options[m] = options[m] || fs[m]
	    m = m + 'Sync'
	    options[m] = options[m] || fs[m]
	  })

	  options.maxBusyTries = options.maxBusyTries || 3
	}

	function rimraf (p, options, cb) {
	  if (typeof options === 'function') {
	    cb = options
	    options = {}
	  }

	  assert(p, 'rimraf: missing path')
	  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
	  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
	  assert(options, 'rimraf: invalid options argument provided')
	  assert.equal(typeof options, 'object', 'rimraf: options should be object')

	  defaults(options)

	  var busyTries = 0

	  rimraf_(p, options, function CB (er) {
	    if (er) {
	      if (isWindows && (er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&
	          busyTries < options.maxBusyTries) {
	        busyTries++
	        var time = busyTries * 100
	        // try again, with the same exact callback as this one.
	        return setTimeout(function () {
	          rimraf_(p, options, CB)
	        }, time)
	      }

	      // already gone
	      if (er.code === 'ENOENT') er = null
	    }

	    cb(er)
	  })
	}

	// Two possible strategies.
	// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
	// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
	//
	// Both result in an extra syscall when you guess wrong.  However, there
	// are likely far more normal files in the world than directories.  This
	// is based on the assumption that a the average number of files per
	// directory is >= 1.
	//
	// If anyone ever complains about this, then I guess the strategy could
	// be made configurable somehow.  But until then, YAGNI.
	function rimraf_ (p, options, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')

	  // sunos lets the root user unlink directories, which is... weird.
	  // so we have to lstat here and make sure it's not a dir.
	  options.lstat(p, function (er, st) {
	    if (er && er.code === 'ENOENT') {
	      return cb(null)
	    }

	    // Windows can EPERM on stat.  Life is suffering.
	    if (er && er.code === 'EPERM' && isWindows) {
	      fixWinEPERM(p, options, er, cb)
	    }

	    if (st && st.isDirectory()) {
	      return rmdir(p, options, er, cb)
	    }

	    options.unlink(p, function (er) {
	      if (er) {
	        if (er.code === 'ENOENT') {
	          return cb(null)
	        }
	        if (er.code === 'EPERM') {
	          return (isWindows)
	            ? fixWinEPERM(p, options, er, cb)
	            : rmdir(p, options, er, cb)
	        }
	        if (er.code === 'EISDIR') {
	          return rmdir(p, options, er, cb)
	        }
	      }
	      return cb(er)
	    })
	  })
	}

	function fixWinEPERM (p, options, er, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')
	  if (er) {
	    assert(er instanceof Error)
	  }

	  options.chmod(p, 666, function (er2) {
	    if (er2) {
	      cb(er2.code === 'ENOENT' ? null : er)
	    } else {
	      options.stat(p, function (er3, stats) {
	        if (er3) {
	          cb(er3.code === 'ENOENT' ? null : er)
	        } else if (stats.isDirectory()) {
	          rmdir(p, options, er, cb)
	        } else {
	          options.unlink(p, cb)
	        }
	      })
	    }
	  })
	}

	function fixWinEPERMSync (p, options, er) {
	  assert(p)
	  assert(options)
	  if (er) {
	    assert(er instanceof Error)
	  }

	  try {
	    options.chmodSync(p, 666)
	  } catch (er2) {
	    if (er2.code === 'ENOENT') {
	      return
	    } else {
	      throw er
	    }
	  }

	  try {
	    var stats = options.statSync(p)
	  } catch (er3) {
	    if (er3.code === 'ENOENT') {
	      return
	    } else {
	      throw er
	    }
	  }

	  if (stats.isDirectory()) {
	    rmdirSync(p, options, er)
	  } else {
	    options.unlinkSync(p)
	  }
	}

	function rmdir (p, options, originalEr, cb) {
	  assert(p)
	  assert(options)
	  if (originalEr) {
	    assert(originalEr instanceof Error)
	  }
	  assert(typeof cb === 'function')

	  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
	  // if we guessed wrong, and it's not a directory, then
	  // raise the original error.
	  options.rmdir(p, function (er) {
	    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
	      rmkids(p, options, cb)
	    } else if (er && er.code === 'ENOTDIR') {
	      cb(originalEr)
	    } else {
	      cb(er)
	    }
	  })
	}

	function rmkids (p, options, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')

	  options.readdir(p, function (er, files) {
	    if (er) {
	      return cb(er)
	    }
	    var n = files.length
	    if (n === 0) {
	      return options.rmdir(p, cb)
	    }
	    var errState
	    files.forEach(function (f) {
	      rimraf(path.join(p, f), options, function (er) {
	        if (errState) {
	          return
	        }
	        if (er) {
	          return cb(errState = er)
	        }
	        if (--n === 0) {
	          options.rmdir(p, cb)
	        }
	      })
	    })
	  })
	}

	// this looks simpler, and is strictly *faster*, but will
	// tie up the JavaScript thread and fail on excessively
	// deep directory trees.
	function rimrafSync (p, options) {
	  options = options || {}
	  defaults(options)

	  assert(p, 'rimraf: missing path')
	  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
	  assert(options, 'rimraf: missing options')
	  assert.equal(typeof options, 'object', 'rimraf: options should be object')

	  try {
	    var st = options.lstatSync(p)
	  } catch (er) {
	    if (er.code === 'ENOENT') {
	      return
	    }

	    // Windows can EPERM on stat.  Life is suffering.
	    if (er.code === 'EPERM' && isWindows) {
	      fixWinEPERMSync(p, options, er)
	    }
	  }

	  try {
	    // sunos lets the root user unlink directories, which is... weird.
	    if (st && st.isDirectory()) {
	      rmdirSync(p, options, null)
	    } else {
	      options.unlinkSync(p)
	    }
	  } catch (er) {
	    if (er.code === 'ENOENT') {
	      return
	    }
	    if (er.code === 'EPERM') {
	      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
	    }
	    if (er.code !== 'EISDIR') {
	      throw er
	    }
	    rmdirSync(p, options, er)
	  }
	}

	function rmdirSync (p, options, originalEr) {
	  assert(p)
	  assert(options)
	  if (originalEr) {
	    assert(originalEr instanceof Error)
	  }

	  try {
	    options.rmdirSync(p)
	  } catch (er) {
	    if (er.code === 'ENOENT') {
	      return
	    }
	    if (er.code === 'ENOTDIR') {
	      throw originalEr
	    }
	    if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
	      rmkidsSync(p, options)
	    }
	  }
	}

	function rmkidsSync (p, options) {
	  assert(p)
	  assert(options)
	  options.readdirSync(p).forEach(function (f) {
	    rimrafSync(path.join(p, f), options)
	  })
	  options.rmdirSync(p, options)
	}


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var jsonFile = __webpack_require__(32)

	jsonFile.outputJsonSync = __webpack_require__(34)
	jsonFile.outputJson = __webpack_require__(35)
	// aliases
	jsonFile.outputJSONSync = __webpack_require__(34)
	jsonFile.outputJSON = __webpack_require__(35)

	module.exports = jsonFile


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var jsonFile = __webpack_require__(33)

	module.exports = {
	  // jsonfile exports
	  readJson: jsonFile.readFile,
	  readJSON: jsonFile.readFile,
	  readJsonSync: jsonFile.readFileSync,
	  readJSONSync: jsonFile.readFileSync,
	  writeJson: jsonFile.writeFile,
	  writeJSON: jsonFile.writeFile,
	  writeJsonSync: jsonFile.writeFileSync,
	  writeJSONSync: jsonFile.writeFileSync,
	  spaces: 2 // default in fs-extra
	}


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var _fs
	try {
	  _fs = __webpack_require__(7)
	} catch (_) {
	  _fs = __webpack_require__(8)
	}

	function readFile (file, options, callback) {
	  if (callback == null) {
	    callback = options
	    options = {}
	  }

	  if (typeof options === 'string') {
	    options = {encoding: options}
	  }

	  options = options || {}
	  var fs = options.fs || _fs

	  var shouldThrow = true
	  // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
	  if ('passParsingErrors' in options) {
	    shouldThrow = options.passParsingErrors
	  } else if ('throws' in options) {
	    shouldThrow = options.throws
	  }

	  fs.readFile(file, options, function (err, data) {
	    if (err) return callback(err)

	    data = stripBom(data)

	    var obj
	    try {
	      obj = JSON.parse(data, options ? options.reviver : null)
	    } catch (err2) {
	      if (shouldThrow) {
	        err2.message = file + ': ' + err2.message
	        return callback(err2)
	      } else {
	        return callback(null, null)
	      }
	    }

	    callback(null, obj)
	  })
	}

	function readFileSync (file, options) {
	  options = options || {}
	  if (typeof options === 'string') {
	    options = {encoding: options}
	  }

	  var fs = options.fs || _fs

	  var shouldThrow = true
	  // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
	  if ('passParsingErrors' in options) {
	    shouldThrow = options.passParsingErrors
	  } else if ('throws' in options) {
	    shouldThrow = options.throws
	  }

	  var content = fs.readFileSync(file, options)
	  content = stripBom(content)

	  try {
	    return JSON.parse(content, options.reviver)
	  } catch (err) {
	    if (shouldThrow) {
	      err.message = file + ': ' + err.message
	      throw err
	    } else {
	      return null
	    }
	  }
	}

	function writeFile (file, obj, options, callback) {
	  if (callback == null) {
	    callback = options
	    options = {}
	  }
	  options = options || {}
	  var fs = options.fs || _fs

	  var spaces = typeof options === 'object' && options !== null
	    ? 'spaces' in options
	    ? options.spaces : this.spaces
	    : this.spaces

	  var str = ''
	  try {
	    str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\n'
	  } catch (err) {
	    if (callback) return callback(err, null)
	  }

	  fs.writeFile(file, str, options, callback)
	}

	function writeFileSync (file, obj, options) {
	  options = options || {}
	  var fs = options.fs || _fs

	  var spaces = typeof options === 'object' && options !== null
	    ? 'spaces' in options
	    ? options.spaces : this.spaces
	    : this.spaces

	  var str = JSON.stringify(obj, options.replacer, spaces) + '\n'
	  // not sure if fs.writeFileSync returns anything, but just in case
	  return fs.writeFileSync(file, str, options)
	}

	function stripBom (content) {
	  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
	  if (Buffer.isBuffer(content)) content = content.toString('utf8')
	  content = content.replace(/^\uFEFF/, '')
	  return content
	}

	var jsonfile = {
	  spaces: null,
	  readFile: readFile,
	  readFileSync: readFileSync,
	  writeFile: writeFile,
	  writeFileSync: writeFileSync
	}

	module.exports = jsonfile


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var jsonFile = __webpack_require__(32)
	var mkdir = __webpack_require__(22)

	function outputJsonSync (file, data, options) {
	  var dir = path.dirname(file)

	  if (!fs.existsSync(dir)) {
	    mkdir.mkdirsSync(dir)
	  }

	  jsonFile.writeJsonSync(file, data, options)
	}

	module.exports = outputJsonSync


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)
	var jsonFile = __webpack_require__(32)
	var mkdir = __webpack_require__(22)

	function outputJson (file, data, options, callback) {
	  if (typeof options === 'function') {
	    callback = options
	    options = {}
	  }

	  var dir = path.dirname(file)

	  fs.exists(dir, function (itDoes) {
	    if (itDoes) return jsonFile.writeJson(file, data, options, callback)

	    mkdir.mkdirs(dir, function (err) {
	      if (err) return callback(err)
	      jsonFile.writeJson(file, data, options, callback)
	    })
	  })
	}

	module.exports = outputJson


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// most of this code was written by Andrew Kelley
	// licensed under the BSD license: see
	// https://github.com/andrewrk/node-mv/blob/master/package.json

	// this needs a cleanup

	var fs = __webpack_require__(7)
	var ncp = __webpack_require__(19)
	var path = __webpack_require__(18)
	var remove = __webpack_require__(29).remove
	var mkdirp = __webpack_require__(22).mkdirs

	function mv (source, dest, options, callback) {
	  if (typeof options === 'function') {
	    callback = options
	    options = {}
	  }

	  var shouldMkdirp = ('mkdirp' in options) ? options.mkdirp : true
	  var clobber = ('clobber' in options) ? options.clobber : false

	  var limit = options.limit || 16

	  if (shouldMkdirp) {
	    mkdirs()
	  } else {
	    doRename()
	  }

	  function mkdirs () {
	    mkdirp(path.dirname(dest), function (err) {
	      if (err) return callback(err)
	      doRename()
	    })
	  }

	  function doRename () {
	    if (clobber) {
	      fs.rename(source, dest, function (err) {
	        if (!err) return callback()

	        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
	          remove(dest, function (err) {
	            if (err) return callback(err)
	            options.clobber = false // just clobbered it, no need to do it again
	            mv(source, dest, options, callback)
	          })
	          return
	        }

	        // weird Windows shit
	        if (err.code === 'EPERM') {
	          setTimeout(function () {
	            remove(dest, function (err) {
	              if (err) return callback(err)
	              options.clobber = false
	              mv(source, dest, options, callback)
	            })
	          }, 200)
	          return
	        }

	        if (err.code !== 'EXDEV') return callback(err)
	        moveAcrossDevice(source, dest, clobber, limit, callback)
	      })
	    } else {
	      fs.link(source, dest, function (err) {
	        if (err) {
	          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM') {
	            moveAcrossDevice(source, dest, clobber, limit, callback)
	            return
	          }
	          callback(err)
	          return
	        }
	        fs.unlink(source, callback)
	      })
	    }
	  }
	}

	function moveAcrossDevice (source, dest, clobber, limit, callback) {
	  fs.stat(source, function (err, stat) {
	    if (err) {
	      callback(err)
	      return
	    }

	    if (stat.isDirectory()) {
	      moveDirAcrossDevice(source, dest, clobber, limit, callback)
	    } else {
	      moveFileAcrossDevice(source, dest, clobber, limit, callback)
	    }
	  })
	}

	function moveFileAcrossDevice (source, dest, clobber, limit, callback) {
	  var outFlags = clobber ? 'w' : 'wx'
	  var ins = fs.createReadStream(source)
	  var outs = fs.createWriteStream(dest, {flags: outFlags})

	  ins.on('error', function (err) {
	    ins.destroy()
	    outs.destroy()
	    outs.removeListener('close', onClose)

	    // may want to create a directory but `out` line above
	    // creates an empty file for us: See #108
	    // don't care about error here
	    fs.unlink(dest, function () {
	      // note: `err` here is from the input stream errror
	      if (err.code === 'EISDIR' || err.code === 'EPERM') {
	        moveDirAcrossDevice(source, dest, clobber, limit, callback)
	      } else {
	        callback(err)
	      }
	    })
	  })

	  outs.on('error', function (err) {
	    ins.destroy()
	    outs.destroy()
	    outs.removeListener('close', onClose)
	    callback(err)
	  })

	  outs.once('close', onClose)
	  ins.pipe(outs)

	  function onClose () {
	    fs.unlink(source, callback)
	  }
	}

	function moveDirAcrossDevice (source, dest, clobber, limit, callback) {
	  var options = {
	    stopOnErr: true,
	    clobber: false,
	    limit: limit
	  }

	  function startNcp () {
	    ncp(source, dest, options, function (errList) {
	      if (errList) return callback(errList[0])
	      remove(source, callback)
	    })
	  }

	  if (clobber) {
	    remove(dest, function (err) {
	      if (err) return callback(err)
	      startNcp()
	    })
	  } else {
	    startNcp()
	  }
	}

	module.exports = {
	  move: mv
	}


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(8)
	var path = __webpack_require__(18)
	var mkdir = __webpack_require__(22)
	var remove = __webpack_require__(29)

	function emptyDir (dir, callback) {
	  callback = callback || function () {}
	  fs.readdir(dir, function (err, items) {
	    if (err) return mkdir.mkdirs(dir, callback)

	    items = items.map(function (item) {
	      return path.join(dir, item)
	    })

	    deleteItem()

	    function deleteItem () {
	      var item = items.pop()
	      if (!item) return callback()
	      remove.remove(item, function (err) {
	        if (err) return callback(err)
	        deleteItem()
	      })
	    }
	  })
	}

	function emptyDirSync (dir) {
	  var items
	  try {
	    items = fs.readdirSync(dir)
	  } catch (err) {
	    return mkdir.mkdirsSync(dir)
	  }

	  items.forEach(function (item) {
	    item = path.join(dir, item)
	    remove.removeSync(item)
	  })
	}

	module.exports = {
	  emptyDirSync: emptyDirSync,
	  emptydirSync: emptyDirSync,
	  emptyDir: emptyDir,
	  emptydir: emptyDir
	}


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var file = __webpack_require__(39)
	var link = __webpack_require__(40)
	var symlink = __webpack_require__(41)

	module.exports = {
	  // file
	  createFile: file.createFile,
	  createFileSync: file.createFileSync,
	  ensureFile: file.createFile,
	  ensureFileSync: file.createFileSync,
	  // link
	  createLink: link.createLink,
	  createLinkSync: link.createLinkSync,
	  ensureLink: link.createLink,
	  ensureLinkSync: link.createLinkSync,
	  // symlink
	  createSymlink: symlink.createSymlink,
	  createSymlinkSync: symlink.createSymlinkSync,
	  ensureSymlink: symlink.createSymlink,
	  ensureSymlinkSync: symlink.createSymlinkSync
	}


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(18)
	var fs = __webpack_require__(7)
	var mkdir = __webpack_require__(22)

	function createFile (file, callback) {
	  function makeFile () {
	    fs.writeFile(file, '', function (err) {
	      if (err) return callback(err)
	      callback()
	    })
	  }

	  fs.exists(file, function (fileExists) {
	    if (fileExists) return callback()
	    var dir = path.dirname(file)
	    fs.exists(dir, function (dirExists) {
	      if (dirExists) return makeFile()
	      mkdir.mkdirs(dir, function (err) {
	        if (err) return callback(err)
	        makeFile()
	      })
	    })
	  })
	}

	function createFileSync (file) {
	  if (fs.existsSync(file)) return

	  var dir = path.dirname(file)
	  if (!fs.existsSync(dir)) {
	    mkdir.mkdirsSync(dir)
	  }

	  fs.writeFileSync(file, '')
	}

	module.exports = {
	  createFile: createFile,
	  createFileSync: createFileSync,
	  // alias
	  ensureFile: createFile,
	  ensureFileSync: createFileSync
	}


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(18)
	var fs = __webpack_require__(7)
	var mkdir = __webpack_require__(22)

	function createLink (srcpath, dstpath, callback) {
	  function makeLink (srcpath, dstpath) {
	    fs.link(srcpath, dstpath, function (err) {
	      if (err) return callback(err)
	      callback(null)
	    })
	  }

	  fs.exists(dstpath, function (destinationExists) {
	    if (destinationExists) return callback(null)
	    fs.lstat(srcpath, function (err, stat) {
	      if (err) {
	        err.message = err.message.replace('lstat', 'ensureLink')
	        return callback(err)
	      }

	      var dir = path.dirname(dstpath)
	      fs.exists(dir, function (dirExists) {
	        if (dirExists) return makeLink(srcpath, dstpath)
	        mkdir.mkdirs(dir, function (err) {
	          if (err) return callback(err)
	          makeLink(srcpath, dstpath)
	        })
	      })
	    })
	  })
	}

	function createLinkSync (srcpath, dstpath, callback) {
	  var destinationExists = fs.existsSync(dstpath)
	  if (destinationExists) return undefined

	  try {
	    fs.lstatSync(srcpath)
	  } catch (err) {
	    err.message = err.message.replace('lstat', 'ensureLink')
	    throw err
	  }

	  var dir = path.dirname(dstpath)
	  var dirExists = fs.existsSync(dir)
	  if (dirExists) return fs.linkSync(srcpath, dstpath)
	  mkdir.mkdirsSync(dir)

	  return fs.linkSync(srcpath, dstpath)
	}

	module.exports = {
	  createLink: createLink,
	  createLinkSync: createLinkSync,
	  // alias
	  ensureLink: createLink,
	  ensureLinkSync: createLinkSync
	}


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(18)
	var fs = __webpack_require__(7)
	var _mkdirs = __webpack_require__(22)
	var mkdirs = _mkdirs.mkdirs
	var mkdirsSync = _mkdirs.mkdirsSync

	var _symlinkPaths = __webpack_require__(42)
	var symlinkPaths = _symlinkPaths.symlinkPaths
	var symlinkPathsSync = _symlinkPaths.symlinkPathsSync

	var _symlinkType = __webpack_require__(43)
	var symlinkType = _symlinkType.symlinkType
	var symlinkTypeSync = _symlinkType.symlinkTypeSync

	function createSymlink (srcpath, dstpath, type, callback) {
	  callback = (typeof type === 'function') ? type : callback
	  type = (typeof type === 'function') ? false : type

	  fs.exists(dstpath, function (destinationExists) {
	    if (destinationExists) return callback(null)
	    symlinkPaths(srcpath, dstpath, function (err, relative) {
	      if (err) return callback(err)
	      srcpath = relative.toDst
	      symlinkType(relative.toCwd, type, function (err, type) {
	        if (err) return callback(err)
	        var dir = path.dirname(dstpath)
	        fs.exists(dir, function (dirExists) {
	          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)
	          mkdirs(dir, function (err) {
	            if (err) return callback(err)
	            fs.symlink(srcpath, dstpath, type, callback)
	          })
	        })
	      })
	    })
	  })
	}

	function createSymlinkSync (srcpath, dstpath, type, callback) {
	  callback = (typeof type === 'function') ? type : callback
	  type = (typeof type === 'function') ? false : type

	  var destinationExists = fs.existsSync(dstpath)
	  if (destinationExists) return undefined

	  var relative = symlinkPathsSync(srcpath, dstpath)
	  srcpath = relative.toDst
	  type = symlinkTypeSync(relative.toCwd, type)
	  var dir = path.dirname(dstpath)
	  var exists = fs.existsSync(dir)
	  if (exists) return fs.symlinkSync(srcpath, dstpath, type)
	  mkdirsSync(dir)
	  return fs.symlinkSync(srcpath, dstpath, type)
	}

	module.exports = {
	  createSymlink: createSymlink,
	  createSymlinkSync: createSymlinkSync,
	  // alias
	  ensureSymlink: createSymlink,
	  ensureSymlinkSync: createSymlinkSync
	}


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(18)
	// path.isAbsolute shim for Node.js 0.10 support
	var fs = __webpack_require__(7)

	/**
	 * Function that returns two types of paths, one relative to symlink, and one
	 * relative to the current working directory. Checks if path is absolute or
	 * relative. If the path is relative, this function checks if the path is
	 * relative to symlink or relative to current working directory. This is an
	 * initiative to find a smarter `srcpath` to supply when building symlinks.
	 * This allows you to determine which path to use out of one of three possible
	 * types of source paths. The first is an absolute path. This is detected by
	 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
	 * see if it exists. If it does it's used, if not an error is returned
	 * (callback)/ thrown (sync). The other two options for `srcpath` are a
	 * relative url. By default Node's `fs.symlink` works by creating a symlink
	 * using `dstpath` and expects the `srcpath` to be relative to the newly
	 * created symlink. If you provide a `srcpath` that does not exist on the file
	 * system it results in a broken symlink. To minimize this, the function
	 * checks to see if the 'relative to symlink' source file exists, and if it
	 * does it will use it. If it does not, it checks if there's a file that
	 * exists that is relative to the current working directory, if does its used.
	 * This preserves the expectations of the original fs.symlink spec and adds
	 * the ability to pass in `relative to current working direcotry` paths.
	 */

	function symlinkPaths (srcpath, dstpath, callback) {
	  if (path.isAbsolute(srcpath)) {
	    return fs.lstat(srcpath, function (err, stat) {
	      if (err) {
	        err.message = err.message.replace('lstat', 'ensureSymlink')
	        return callback(err)
	      }
	      return callback(null, {
	        'toCwd': srcpath,
	        'toDst': srcpath
	      })
	    })
	  } else {
	    var dstdir = path.dirname(dstpath)
	    var relativeToDst = path.join(dstdir, srcpath)
	    return fs.exists(relativeToDst, function (exists) {
	      if (exists) {
	        return callback(null, {
	          'toCwd': relativeToDst,
	          'toDst': srcpath
	        })
	      } else {
	        return fs.lstat(srcpath, function (err, stat) {
	          if (err) {
	            err.message = err.message.replace('lstat', 'ensureSymlink')
	            return callback(err)
	          }
	          return callback(null, {
	            'toCwd': srcpath,
	            'toDst': path.relative(dstdir, srcpath)
	          })
	        })
	      }
	    })
	  }
	}

	function symlinkPathsSync (srcpath, dstpath) {
	  var exists
	  if (path.isAbsolute(srcpath)) {
	    exists = fs.existsSync(srcpath)
	    if (!exists) throw new Error('absolute srcpath does not exist')
	    return {
	      'toCwd': srcpath,
	      'toDst': srcpath
	    }
	  } else {
	    var dstdir = path.dirname(dstpath)
	    var relativeToDst = path.join(dstdir, srcpath)
	    exists = fs.existsSync(relativeToDst)
	    if (exists) {
	      return {
	        'toCwd': relativeToDst,
	        'toDst': srcpath
	      }
	    } else {
	      exists = fs.existsSync(srcpath)
	      if (!exists) throw new Error('relative srcpath does not exist')
	      return {
	        'toCwd': srcpath,
	        'toDst': path.relative(dstdir, srcpath)
	      }
	    }
	  }
	}

	module.exports = {
	  'symlinkPaths': symlinkPaths,
	  'symlinkPathsSync': symlinkPathsSync
	}


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)

	function symlinkType (srcpath, type, callback) {
	  callback = (typeof type === 'function') ? type : callback
	  type = (typeof type === 'function') ? false : type
	  if (type) return callback(null, type)
	  fs.lstat(srcpath, function (err, stats) {
	    if (err) return callback(null, 'file')
	    type = (stats && stats.isDirectory()) ? 'dir' : 'file'
	    callback(null, type)
	  })
	}

	function symlinkTypeSync (srcpath, type) {
	  if (type) return type
	  try {
	    var stats = fs.lstatSync(srcpath)
	  } catch (e) {
	    return 'file'
	  }
	  return (stats && stats.isDirectory()) ? 'dir' : 'file'
	}

	module.exports = {
	  symlinkType: symlinkType,
	  symlinkTypeSync: symlinkTypeSync
	}


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(18)
	var fs = __webpack_require__(7)
	var mkdir = __webpack_require__(22)

	function outputFile (file, data, encoding, callback) {
	  if (typeof encoding === 'function') {
	    callback = encoding
	    encoding = 'utf8'
	  }

	  var dir = path.dirname(file)
	  fs.exists(dir, function (itDoes) {
	    if (itDoes) return fs.writeFile(file, data, encoding, callback)

	    mkdir.mkdirs(dir, function (err) {
	      if (err) return callback(err)

	      fs.writeFile(file, data, encoding, callback)
	    })
	  })
	}

	function outputFileSync (file, data, encoding) {
	  var dir = path.dirname(file)
	  if (fs.existsSync(dir)) {
	    return fs.writeFileSync.apply(fs, arguments)
	  }
	  mkdir.mkdirsSync(dir)
	  fs.writeFileSync.apply(fs, arguments)
	}

	module.exports = {
	  outputFile: outputFile,
	  outputFileSync: outputFileSync
	}


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var klaw = __webpack_require__(46)

	module.exports = {
	  walk: klaw
	}


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15)
	var fs
	try {
	  fs = __webpack_require__(7)
	} catch (e) {
	  fs = __webpack_require__(8)
	}
	var path = __webpack_require__(18)
	var Readable = __webpack_require__(13).Readable
	var util = __webpack_require__(14)
	var assign = __webpack_require__(47)

	function Walker (dir, options) {
	  assert.strictEqual(typeof dir, 'string', '`dir` parameter should be of type string. Got type: ' + typeof dir)
	  var defaultStreamOptions = { objectMode: true }
	  var defaultOpts = { queueMethod: 'shift', pathSorter: undefined, filter: undefined }
	  options = assign(defaultOpts, options, defaultStreamOptions)

	  Readable.call(this, options)
	  this.root = path.resolve(dir)
	  this.paths = [this.root]
	  this.options = options
	  this.fs = options.fs || fs // mock-fs
	}
	util.inherits(Walker, Readable)

	Walker.prototype._read = function () {
	  if (this.paths.length === 0) return this.push(null)
	  var self = this
	  var pathItem = this.paths[this.options.queueMethod]()

	  self.fs.lstat(pathItem, function (err, stats) {
	    var item = { path: pathItem, stats: stats }
	    if (err) return self.emit('error', err, item)
	    if (!stats.isDirectory()) return self.push(item)

	    self.fs.readdir(pathItem, function (err, pathItems) {
	      if (err) {
	        self.push(item)
	        return self.emit('error', err, item)
	      }

	      pathItems = pathItems.map(function (part) { return path.join(pathItem, part) })
	      if (self.options.filter) pathItems = pathItems.filter(self.options.filter)
	      if (self.options.pathSorter) pathItems.sort(self.options.pathSorter)
	      pathItems.forEach(function (pi) { self.paths.push(pi) })

	      self.push(item)
	    })
	  })
	}

	function walk (root, options) {
	  return new Walker(root, options)
	}

	module.exports = walk


/***/ },
/* 47 */
/***/ function(module, exports) {

	// simple mutable assign (extracted from fs-extra)
	// I really like object-assign package, but I wanted a lean package with zero deps
	function _assign () {
	  var args = [].slice.call(arguments).filter(function (i) { return i })
	  var dest = args.shift()
	  args.forEach(function (src) {
	    Object.keys(src).forEach(function (key) {
	      dest[key] = src[key]
	    })
	  })

	  return dest
	}

	// thank you baby Jesus for Node v4 and Object.assign
	module.exports = Object.assign || _assign


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(7)
	var path = __webpack_require__(18)

	var walkSync = function (dir, filelist) {
	  var files = fs.readdirSync(dir)
	  filelist = filelist || []
	  files.forEach(function (file) {
	    var nestedPath = path.join(dir, file)
	    if (fs.lstatSync(nestedPath).isDirectory()) {
	      filelist = walkSync(nestedPath, filelist)
	    } else {
	      filelist.push(nestedPath)
	    }
	  })
	  return filelist
	}

	module.exports = {
	  walkSync: walkSync
	}


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {var ERR, word_wrap, extract, archive, fs, download_updatables;
	'use strict';
	ERR = __webpack_require__(2);
	word_wrap = __webpack_require__(3);
	extract = __webpack_require__(50).extractTarball;
	archive = __webpack_require__(106);
	fs = __webpack_require__(5);
	download_updatables = function download_updatables(path, version, cb) {
	  var move_updatables;
	  move_updatables = function move_updatables() {
	    var err;
	    extract(path + '/gen/dev/updatables.tar', path + '/gen/dev/updatables', function (arguments, _$param0) {
	      err = _$param0;
	      if (ERR(err, cb)) {
	        return;
	      }
	      fs.remove(path + '/gen/dev/lambda_updatables', function (arguments, _$param1) {
	        err = _$param1;
	        if (ERR(err, cb)) {
	          return;
	        }
	        fs.move(path + '/gen/dev/updatables/repo/gen/release/updatables', path + '/gen/dev/lambda_updatables', function (arguments, _$param2) {
	          err = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          fs.remove(path + '/gen/dev/updatables.tar', function (arguments, _$param3) {
	            err = _$param3;
	            if (ERR(err, cb)) {
	              return;
	            }
	            fs.remove(path + '/gen/dev/updatables', function (arguments, _$param4) {
	              err = _$param4;
	              if (ERR(err, cb)) {
	                return;
	              }
	              cb();
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  archive(__dirname + '/../../../../../.git', {
	    rev: version,
	    format: 'tar'
	  }).on('error', function (err) {
	    return cb(err);
	  }).on('end', move_updatables).pipe(fs.createWriteStream(path + '/gen/dev/updatables.tar'));
	};
	module.exports = download_updatables;
	/* Generated by Continuation.js v0.1.7 */
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var fs = __webpack_require__(8)
	 , tar = __webpack_require__(51)
	 , zlib = __webpack_require__(96)
	 , wget = __webpack_require__(97)
	 
	function extractTarball(sourceFile, destination, callback) {
	  if( /(gz|tgz)$/i.test(sourceFile)) {
	    // This file is gzipped, use zlib to deflate the stream before passing to tar.
	    fs.createReadStream(sourceFile)
	    .pipe(zlib.createGunzip())
	    .pipe(tar.Extract({ path: destination}))
	    .on('error', function(er) { callback(er)})
	    .on("end", function() { callback(null)})
	  } else {
	    // This file is not gzipped, just deflate it.
	    fs.createReadStream(sourceFile)
	    .pipe(tar.Extract({ path: destination}))
	    .on('error', function(er) { callback(er)})
	    .on("end", function() { callback(null)})
	  }
	}

	function extractTarballDownload(url, downloadFile, destination, options, callback) {
	  if(!options) options = {}
	  var download = wget.download(url, downloadFile, options)
	  download.on('error', function(err){
	    callback('error', {error: err})
	  })
	  download.on('end', function(output) {
	    extractTarball(output, destination, function(err, data){
	      callback(null, {url: url, downloadFile: downloadFile, destination: destination})
	    })
	  })
	}

	exports.extractTarball = extractTarball
	exports.extractTarballDownload = extractTarballDownload


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// field paths that every tar file must have.
	// header is padded to 512 bytes.
	var f = 0
	  , fields = {}
	  , path = fields.path = f++
	  , mode = fields.mode = f++
	  , uid = fields.uid = f++
	  , gid = fields.gid = f++
	  , size = fields.size = f++
	  , mtime = fields.mtime = f++
	  , cksum = fields.cksum = f++
	  , type = fields.type = f++
	  , linkpath = fields.linkpath = f++
	  , headerSize = 512
	  , blockSize = 512
	  , fieldSize = []

	fieldSize[path] = 100
	fieldSize[mode] = 8
	fieldSize[uid] = 8
	fieldSize[gid] = 8
	fieldSize[size] = 12
	fieldSize[mtime] = 12
	fieldSize[cksum] = 8
	fieldSize[type] = 1
	fieldSize[linkpath] = 100

	// "ustar\0" may introduce another bunch of headers.
	// these are optional, and will be nulled out if not present.

	var ustar = fields.ustar = f++
	  , ustarver = fields.ustarver = f++
	  , uname = fields.uname = f++
	  , gname = fields.gname = f++
	  , devmaj = fields.devmaj = f++
	  , devmin = fields.devmin = f++
	  , prefix = fields.prefix = f++
	  , fill = fields.fill = f++

	// terminate fields.
	fields[f] = null

	fieldSize[ustar] = 6
	fieldSize[ustarver] = 2
	fieldSize[uname] = 32
	fieldSize[gname] = 32
	fieldSize[devmaj] = 8
	fieldSize[devmin] = 8
	fieldSize[prefix] = 155
	fieldSize[fill] = 12

	// nb: prefix field may in fact be 130 bytes of prefix,
	// a null char, 12 bytes for atime, 12 bytes for ctime.
	//
	// To recognize this format:
	// 1. prefix[130] === ' ' or '\0'
	// 2. atime and ctime are octal numeric values
	// 3. atime and ctime have ' ' in their last byte

	var fieldEnds = {}
	  , fieldOffs = {}
	  , fe = 0
	for (var i = 0; i < f; i ++) {
	  fieldOffs[i] = fe
	  fieldEnds[i] = (fe += fieldSize[i])
	}

	// build a translation table of field paths.
	Object.keys(fields).forEach(function (f) {
	  if (fields[f] !== null) fields[fields[f]] = f
	})

	// different values of the 'type' field
	// paths match the values of Stats.isX() functions, where appropriate
	var types =
	  { 0: "File"
	  , "\0": "OldFile" // like 0
	  , "": "OldFile"
	  , 1: "Link"
	  , 2: "SymbolicLink"
	  , 3: "CharacterDevice"
	  , 4: "BlockDevice"
	  , 5: "Directory"
	  , 6: "FIFO"
	  , 7: "ContiguousFile" // like 0
	  // posix headers
	  , g: "GlobalExtendedHeader" // k=v for the rest of the archive
	  , x: "ExtendedHeader" // k=v for the next file
	  // vendor-specific stuff
	  , A: "SolarisACL" // skip
	  , D: "GNUDumpDir" // like 5, but with data, which should be skipped
	  , I: "Inode" // metadata only, skip
	  , K: "NextFileHasLongLinkpath" // data = link path of next file
	  , L: "NextFileHasLongPath" // data = path of next file
	  , M: "ContinuationFile" // skip
	  , N: "OldGnuLongPath" // like L
	  , S: "SparseFile" // skip
	  , V: "TapeVolumeHeader" // skip
	  , X: "OldExtendedHeader" // like x
	  }

	Object.keys(types).forEach(function (t) {
	  types[types[t]] = types[types[t]] || t
	})

	// values for the mode field
	var modes =
	  { suid: 04000 // set uid on extraction
	  , sgid: 02000 // set gid on extraction
	  , svtx: 01000 // set restricted deletion flag on dirs on extraction
	  , uread:  0400
	  , uwrite: 0200
	  , uexec:  0100
	  , gread:  040
	  , gwrite: 020
	  , gexec:  010
	  , oread:  4
	  , owrite: 2
	  , oexec:  1
	  , all: 07777
	  }

	var numeric =
	  { mode: true
	  , uid: true
	  , gid: true
	  , size: true
	  , mtime: true
	  , devmaj: true
	  , devmin: true
	  , cksum: true
	  , atime: true
	  , ctime: true
	  , dev: true
	  , ino: true
	  , nlink: true
	  }

	Object.keys(modes).forEach(function (t) {
	  modes[modes[t]] = modes[modes[t]] || t
	})

	var knownExtended =
	  { atime: true
	  , charset: true
	  , comment: true
	  , ctime: true
	  , gid: true
	  , gname: true
	  , linkpath: true
	  , mtime: true
	  , path: true
	  , realtime: true
	  , security: true
	  , size: true
	  , uid: true
	  , uname: true }


	exports.fields = fields
	exports.fieldSize = fieldSize
	exports.fieldOffs = fieldOffs
	exports.fieldEnds = fieldEnds
	exports.types = types
	exports.modes = modes
	exports.numeric = numeric
	exports.headerSize = headerSize
	exports.blockSize = blockSize
	exports.knownExtended = knownExtended

	exports.Pack = __webpack_require__(52)
	exports.Parse = __webpack_require__(92)
	exports.Extract = __webpack_require__(95)


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// pipe in an fstream, and it'll make a tarball.
	// key-value pair argument is global extended header props.

	module.exports = Pack

	var EntryWriter = __webpack_require__(53)
	  , Stream = __webpack_require__(13).Stream
	  , path = __webpack_require__(18)
	  , inherits = __webpack_require__(56)
	  , GlobalHeaderWriter = __webpack_require__(91)
	  , collect = __webpack_require__(58).collect
	  , eof = new Buffer(512)

	for (var i = 0; i < 512; i ++) eof[i] = 0

	inherits(Pack, Stream)

	function Pack (props) {
	  // console.error("-- p ctor")
	  var me = this
	  if (!(me instanceof Pack)) return new Pack(props)

	  if (props) me._noProprietary = props.noProprietary
	  else me._noProprietary = false

	  me._global = props

	  me.readable = true
	  me.writable = true
	  me._buffer = []
	  // console.error("-- -- set current to null in ctor")
	  me._currentEntry = null
	  me._processing = false

	  me._pipeRoot = null
	  me.on("pipe", function (src) {
	    if (src.root === me._pipeRoot) return
	    me._pipeRoot = src
	    src.on("end", function () {
	      me._pipeRoot = null
	    })
	    me.add(src)
	  })
	}

	Pack.prototype.addGlobal = function (props) {
	  // console.error("-- p addGlobal")
	  if (this._didGlobal) return
	  this._didGlobal = true

	  var me = this
	  GlobalHeaderWriter(props)
	    .on("data", function (c) {
	      me.emit("data", c)
	    })
	    .end()
	}

	Pack.prototype.add = function (stream) {
	  if (this._global && !this._didGlobal) this.addGlobal(this._global)

	  if (this._ended) return this.emit("error", new Error("add after end"))

	  collect(stream)
	  this._buffer.push(stream)
	  this._process()
	  this._needDrain = this._buffer.length > 0
	  return !this._needDrain
	}

	Pack.prototype.pause = function () {
	  this._paused = true
	  if (this._currentEntry) this._currentEntry.pause()
	  this.emit("pause")
	}

	Pack.prototype.resume = function () {
	  this._paused = false
	  if (this._currentEntry) this._currentEntry.resume()
	  this.emit("resume")
	  this._process()
	}

	Pack.prototype.end = function () {
	  this._ended = true
	  this._buffer.push(eof)
	  this._process()
	}

	Pack.prototype._process = function () {
	  var me = this
	  if (me._paused || me._processing) {
	    return
	  }

	  var entry = me._buffer.shift()

	  if (!entry) {
	    if (me._needDrain) {
	      me.emit("drain")
	    }
	    return
	  }

	  if (entry.ready === false) {
	    // console.error("-- entry is not ready", entry)
	    me._buffer.unshift(entry)
	    entry.on("ready", function () {
	      // console.error("-- -- ready!", entry)
	      me._process()
	    })
	    return
	  }

	  me._processing = true

	  if (entry === eof) {
	    // need 2 ending null blocks.
	    me.emit("data", eof)
	    me.emit("data", eof)
	    me.emit("end")
	    me.emit("close")
	    return
	  }

	  // Change the path to be relative to the root dir that was
	  // added to the tarball.
	  //
	  // XXX This should be more like how -C works, so you can
	  // explicitly set a root dir, and also explicitly set a pathname
	  // in the tarball to use.  That way we can skip a lot of extra
	  // work when resolving symlinks for bundled dependencies in npm.

	  var root = path.dirname((entry.root || entry).path);
	  if (me._global && me._global.fromBase && entry.root && entry.root.path) {
	    // user set 'fromBase: true' indicating tar root should be directory itself
	    root = entry.root.path;
	  }

	  var wprops = {}

	  Object.keys(entry.props || {}).forEach(function (k) {
	    wprops[k] = entry.props[k]
	  })

	  if (me._noProprietary) wprops.noProprietary = true

	  wprops.path = path.relative(root, entry.path || '')

	  // actually not a matter of opinion or taste.
	  if (process.platform === "win32") {
	    wprops.path = wprops.path.replace(/\\/g, "/")
	  }

	  if (!wprops.type)
	    wprops.type = 'Directory'

	  switch (wprops.type) {
	    // sockets not supported
	    case "Socket":
	      return

	    case "Directory":
	      wprops.path += "/"
	      wprops.size = 0
	      break

	    case "Link":
	      var lp = path.resolve(path.dirname(entry.path), entry.linkpath)
	      wprops.linkpath = path.relative(root, lp) || "."
	      wprops.size = 0
	      break

	    case "SymbolicLink":
	      var lp = path.resolve(path.dirname(entry.path), entry.linkpath)
	      wprops.linkpath = path.relative(path.dirname(entry.path), lp) || "."
	      wprops.size = 0
	      break
	  }

	  // console.error("-- new writer", wprops)
	  // if (!wprops.type) {
	  //   // console.error("-- no type?", entry.constructor.name, entry)
	  // }

	  // console.error("-- -- set current to new writer", wprops.path)
	  var writer = me._currentEntry = EntryWriter(wprops)

	  writer.parent = me

	  // writer.on("end", function () {
	  //   // console.error("-- -- writer end", writer.path)
	  // })

	  writer.on("data", function (c) {
	    me.emit("data", c)
	  })

	  writer.on("header", function () {
	    Buffer.prototype.toJSON = function () {
	      return this.toString().split(/\0/).join(".")
	    }
	    // console.error("-- -- writer header %j", writer.props)
	    if (writer.props.size === 0) nextEntry()
	  })
	  writer.on("close", nextEntry)

	  var ended = false
	  function nextEntry () {
	    if (ended) return
	    ended = true

	    // console.error("-- -- writer close", writer.path)
	    // console.error("-- -- set current to null", wprops.path)
	    me._currentEntry = null
	    me._processing = false
	    me._process()
	  }

	  writer.on("error", function (er) {
	    // console.error("-- -- writer error", writer.path)
	    me.emit("error", er)
	  })

	  // if it's the root, then there's no need to add its entries,
	  // or data, since they'll be added directly.
	  if (entry === me._pipeRoot) {
	    // console.error("-- is the root, don't auto-add")
	    writer.add = null
	  }

	  entry.pipe(writer)
	}

	Pack.prototype.destroy = function () {}
	Pack.prototype.write = function () {}


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = EntryWriter

	var tar = __webpack_require__(51)
	  , TarHeader = __webpack_require__(54)
	  , Entry = __webpack_require__(55)
	  , inherits = __webpack_require__(56)
	  , BlockStream = __webpack_require__(89)
	  , ExtendedHeaderWriter
	  , Stream = __webpack_require__(13).Stream
	  , EOF = {}

	inherits(EntryWriter, Stream)

	function EntryWriter (props) {
	  var me = this

	  if (!(me instanceof EntryWriter)) {
	    return new EntryWriter(props)
	  }

	  Stream.apply(this)

	  me.writable = true
	  me.readable = true

	  me._stream = new BlockStream(512)

	  me._stream.on("data", function (c) {
	    me.emit("data", c)
	  })

	  me._stream.on("drain", function () {
	    me.emit("drain")
	  })

	  me._stream.on("end", function () {
	    me.emit("end")
	    me.emit("close")
	  })

	  me.props = props
	  if (props.type === "Directory") {
	    props.size = 0
	  }
	  props.ustar = "ustar\0"
	  props.ustarver = "00"
	  me.path = props.path

	  me._buffer = []
	  me._didHeader = false
	  me._meta = false

	  me.on("pipe", function () {
	    me._process()
	  })
	}

	EntryWriter.prototype.write = function (c) {
	  // console.error(".. ew write")
	  if (this._ended) return this.emit("error", new Error("write after end"))
	  this._buffer.push(c)
	  this._process()
	  this._needDrain = this._buffer.length > 0
	  return !this._needDrain
	}

	EntryWriter.prototype.end = function (c) {
	  // console.error(".. ew end")
	  if (c) this._buffer.push(c)
	  this._buffer.push(EOF)
	  this._ended = true
	  this._process()
	  this._needDrain = this._buffer.length > 0
	}

	EntryWriter.prototype.pause = function () {
	  // console.error(".. ew pause")
	  this._paused = true
	  this.emit("pause")
	}

	EntryWriter.prototype.resume = function () {
	  // console.error(".. ew resume")
	  this._paused = false
	  this.emit("resume")
	  this._process()
	}

	EntryWriter.prototype.add = function (entry) {
	  // console.error(".. ew add")
	  if (!this.parent) return this.emit("error", new Error("no parent"))

	  // make sure that the _header and such is emitted, and clear out
	  // the _currentEntry link on the parent.
	  if (!this._ended) this.end()

	  return this.parent.add(entry)
	}

	EntryWriter.prototype._header = function () {
	  // console.error(".. ew header")
	  if (this._didHeader) return
	  this._didHeader = true

	  var headerBlock = TarHeader.encode(this.props)

	  if (this.props.needExtended && !this._meta) {
	    var me = this

	    ExtendedHeaderWriter = ExtendedHeaderWriter ||
	      __webpack_require__(90)

	    ExtendedHeaderWriter(this.props)
	      .on("data", function (c) {
	        me.emit("data", c)
	      })
	      .on("error", function (er) {
	        me.emit("error", er)
	      })
	      .end()
	  }

	  // console.error(".. .. ew headerBlock emitting")
	  this.emit("data", headerBlock)
	  this.emit("header")
	}

	EntryWriter.prototype._process = function () {
	  // console.error(".. .. ew process")
	  if (!this._didHeader && !this._meta) {
	    this._header()
	  }

	  if (this._paused || this._processing) {
	    // console.error(".. .. .. paused=%j, processing=%j", this._paused, this._processing)
	    return
	  }

	  this._processing = true

	  var buf = this._buffer
	  for (var i = 0; i < buf.length; i ++) {
	    // console.error(".. .. .. i=%d", i)

	    var c = buf[i]

	    if (c === EOF) this._stream.end()
	    else this._stream.write(c)

	    if (this._paused) {
	      // console.error(".. .. .. paused mid-emission")
	      this._processing = false
	      if (i < buf.length) {
	        this._needDrain = true
	        this._buffer = buf.slice(i + 1)
	      }
	      return
	    }
	  }

	  // console.error(".. .. .. emitted")
	  this._buffer.length = 0
	  this._processing = false

	  // console.error(".. .. .. emitting drain")
	  this.emit("drain")
	}

	EntryWriter.prototype.destroy = function () {}


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// parse a 512-byte header block to a data object, or vice-versa
	// If the data won't fit nicely in a simple header, then generate
	// the appropriate extended header file, and return that.

	module.exports = TarHeader

	var tar = __webpack_require__(51)
	  , fields = tar.fields
	  , fieldOffs = tar.fieldOffs
	  , fieldEnds = tar.fieldEnds
	  , fieldSize = tar.fieldSize
	  , numeric = tar.numeric
	  , assert = __webpack_require__(15).ok
	  , space = " ".charCodeAt(0)
	  , slash = "/".charCodeAt(0)
	  , bslash = process.platform === "win32" ? "\\".charCodeAt(0) : null

	function TarHeader (block) {
	  if (!(this instanceof TarHeader)) return new TarHeader(block)
	  if (block) this.decode(block)
	}

	TarHeader.prototype =
	  { decode : decode
	  , encode: encode
	  , calcSum: calcSum
	  , checkSum: checkSum
	  }

	TarHeader.parseNumeric = parseNumeric
	TarHeader.encode = encode
	TarHeader.decode = decode

	// note that this will only do the normal ustar header, not any kind
	// of extended posix header file.  If something doesn't fit comfortably,
	// then it will set obj.needExtended = true, and set the block to
	// the closest approximation.
	function encode (obj) {
	  if (!obj && !(this instanceof TarHeader)) throw new Error(
	    "encode must be called on a TarHeader, or supplied an object")

	  obj = obj || this
	  var block = obj.block = new Buffer(512)

	  // if the object has a "prefix", then that's actually an extension of
	  // the path field.
	  if (obj.prefix) {
	    // console.error("%% header encoding, got a prefix", obj.prefix)
	    obj.path = obj.prefix + "/" + obj.path
	    // console.error("%% header encoding, prefixed path", obj.path)
	    obj.prefix = ""
	  }

	  obj.needExtended = false

	  if (obj.mode) {
	    if (typeof obj.mode === "string") obj.mode = parseInt(obj.mode, 8)
	    obj.mode = obj.mode & 0777
	  }

	  for (var f = 0; fields[f] !== null; f ++) {
	    var field = fields[f]
	      , off = fieldOffs[f]
	      , end = fieldEnds[f]
	      , ret

	    switch (field) {
	      case "cksum":
	        // special, done below, after all the others
	        break

	      case "prefix":
	        // special, this is an extension of the "path" field.
	        // console.error("%% header encoding, skip prefix later")
	        break

	      case "type":
	        // convert from long name to a single char.
	        var type = obj.type || "0"
	        if (type.length > 1) {
	          type = tar.types[obj.type]
	          if (!type) type = "0"
	        }
	        writeText(block, off, end, type)
	        break

	      case "path":
	        // uses the "prefix" field if > 100 bytes, but <= 255
	        var pathLen = Buffer.byteLength(obj.path)
	          , pathFSize = fieldSize[fields.path]
	          , prefFSize = fieldSize[fields.prefix]

	        // paths between 100 and 255 should use the prefix field.
	        // longer than 255
	        if (pathLen > pathFSize &&
	            pathLen <= pathFSize + prefFSize) {
	          // need to find a slash somewhere in the middle so that
	          // path and prefix both fit in their respective fields
	          var searchStart = pathLen - 1 - pathFSize
	            , searchEnd = prefFSize
	            , found = false
	            , pathBuf = new Buffer(obj.path)

	          for ( var s = searchStart
	              ; (s <= searchEnd)
	              ; s ++ ) {
	            if (pathBuf[s] === slash || pathBuf[s] === bslash) {
	              found = s
	              break
	            }
	          }

	          if (found !== false) {
	            prefix = pathBuf.slice(0, found).toString("utf8")
	            path = pathBuf.slice(found + 1).toString("utf8")

	            ret = writeText(block, off, end, path)
	            off = fieldOffs[fields.prefix]
	            end = fieldEnds[fields.prefix]
	            // console.error("%% header writing prefix", off, end, prefix)
	            ret = writeText(block, off, end, prefix) || ret
	            break
	          }
	        }

	        // paths less than 100 chars don't need a prefix
	        // and paths longer than 255 need an extended header and will fail
	        // on old implementations no matter what we do here.
	        // Null out the prefix, and fallthrough to default.
	        // console.error("%% header writing no prefix")
	        var poff = fieldOffs[fields.prefix]
	          , pend = fieldEnds[fields.prefix]
	        writeText(block, poff, pend, "")
	        // fallthrough

	      // all other fields are numeric or text
	      default:
	        ret = numeric[field]
	            ? writeNumeric(block, off, end, obj[field])
	            : writeText(block, off, end, obj[field] || "")
	        break
	    }
	    obj.needExtended = obj.needExtended || ret
	  }

	  var off = fieldOffs[fields.cksum]
	    , end = fieldEnds[fields.cksum]

	  writeNumeric(block, off, end, calcSum.call(this, block))

	  return block
	}

	// if it's a negative number, or greater than will fit,
	// then use write256.
	var MAXNUM = { 12: 077777777777
	             , 11: 07777777777
	             , 8 : 07777777
	             , 7 : 0777777 }
	function writeNumeric (block, off, end, num) {
	  var writeLen = end - off
	    , maxNum = MAXNUM[writeLen] || 0

	  num = num || 0
	  // console.error("  numeric", num)

	  if (num instanceof Date ||
	      Object.prototype.toString.call(num) === "[object Date]") {
	    num = num.getTime() / 1000
	  }

	  if (num > maxNum || num < 0) {
	    write256(block, off, end, num)
	    // need an extended header if negative or too big.
	    return true
	  }

	  // god, tar is so annoying
	  // if the string is small enough, you should put a space
	  // between the octal string and the \0, but if it doesn't
	  // fit, then don't.
	  var numStr = Math.floor(num).toString(8)
	  if (num < MAXNUM[writeLen - 1]) numStr += " "

	  // pad with "0" chars
	  if (numStr.length < writeLen) {
	    numStr = (new Array(writeLen - numStr.length).join("0")) + numStr
	  }

	  if (numStr.length !== writeLen - 1) {
	    throw new Error("invalid length: " + JSON.stringify(numStr) + "\n" +
	                    "expected: "+writeLen)
	  }
	  block.write(numStr, off, writeLen, "utf8")
	  block[end - 1] = 0
	}

	function write256 (block, off, end, num) {
	  var buf = block.slice(off, end)
	  var positive = num >= 0
	  buf[0] = positive ? 0x80 : 0xFF

	  // get the number as a base-256 tuple
	  if (!positive) num *= -1
	  var tuple = []
	  do {
	    var n = num % 256
	    tuple.push(n)
	    num = (num - n) / 256
	  } while (num)

	  var bytes = tuple.length

	  var fill = buf.length - bytes
	  for (var i = 1; i < fill; i ++) {
	    buf[i] = positive ? 0 : 0xFF
	  }

	  // tuple is a base256 number, with [0] as the *least* significant byte
	  // if it's negative, then we need to flip all the bits once we hit the
	  // first non-zero bit.  The 2's-complement is (0x100 - n), and the 1's-
	  // complement is (0xFF - n).
	  var zero = true
	  for (i = bytes; i > 0; i --) {
	    var byte = tuple[bytes - i]
	    if (positive) buf[fill + i] = byte
	    else if (zero && byte === 0) buf[fill + i] = 0
	    else if (zero) {
	      zero = false
	      buf[fill + i] = 0x100 - byte
	    } else buf[fill + i] = 0xFF - byte
	  }
	}

	function writeText (block, off, end, str) {
	  // strings are written as utf8, then padded with \0
	  var strLen = Buffer.byteLength(str)
	    , writeLen = Math.min(strLen, end - off)
	    // non-ascii fields need extended headers
	    // long fields get truncated
	    , needExtended = strLen !== str.length || strLen > writeLen

	  // write the string, and null-pad
	  if (writeLen > 0) block.write(str, off, writeLen, "utf8")
	  for (var i = off + writeLen; i < end; i ++) block[i] = 0

	  return needExtended
	}

	function calcSum (block) {
	  block = block || this.block
	  assert(Buffer.isBuffer(block) && block.length === 512)

	  if (!block) throw new Error("Need block to checksum")

	  // now figure out what it would be if the cksum was "        "
	  var sum = 0
	    , start = fieldOffs[fields.cksum]
	    , end = fieldEnds[fields.cksum]

	  for (var i = 0; i < fieldOffs[fields.cksum]; i ++) {
	    sum += block[i]
	  }

	  for (var i = start; i < end; i ++) {
	    sum += space
	  }

	  for (var i = end; i < 512; i ++) {
	    sum += block[i]
	  }

	  return sum
	}


	function checkSum (block) {
	  var sum = calcSum.call(this, block)
	  block = block || this.block

	  var cksum = block.slice(fieldOffs[fields.cksum], fieldEnds[fields.cksum])
	  cksum = parseNumeric(cksum)

	  return cksum === sum
	}

	function decode (block) {
	  block = block || this.block
	  assert(Buffer.isBuffer(block) && block.length === 512)

	  this.block = block
	  this.cksumValid = this.checkSum()

	  var prefix = null

	  // slice off each field.
	  for (var f = 0; fields[f] !== null; f ++) {
	    var field = fields[f]
	      , val = block.slice(fieldOffs[f], fieldEnds[f])

	    switch (field) {
	      case "ustar":
	        // if not ustar, then everything after that is just padding.
	        if (val.toString() !== "ustar\0") {
	          this.ustar = false
	          return
	        } else {
	          // console.error("ustar:", val, val.toString())
	          this.ustar = val.toString()
	        }
	        break

	      // prefix is special, since it might signal the xstar header
	      case "prefix":
	        var atime = parseNumeric(val.slice(131, 131 + 12))
	          , ctime = parseNumeric(val.slice(131 + 12, 131 + 12 + 12))
	        if ((val[130] === 0 || val[130] === space) &&
	            typeof atime === "number" &&
	            typeof ctime === "number" &&
	            val[131 + 12] === space &&
	            val[131 + 12 + 12] === space) {
	          this.atime = atime
	          this.ctime = ctime
	          val = val.slice(0, 130)
	        }
	        prefix = val.toString("utf8").replace(/\0+$/, "")
	        // console.error("%% header reading prefix", prefix)
	        break

	      // all other fields are null-padding text
	      // or a number.
	      default:
	        if (numeric[field]) {
	          this[field] = parseNumeric(val)
	        } else {
	          this[field] = val.toString("utf8").replace(/\0+$/, "")
	        }
	        break
	    }
	  }

	  // if we got a prefix, then prepend it to the path.
	  if (prefix) {
	    this.path = prefix + "/" + this.path
	    // console.error("%% header got a prefix", this.path)
	  }
	}

	function parse256 (buf) {
	  // first byte MUST be either 80 or FF
	  // 80 for positive, FF for 2's comp
	  var positive
	  if (buf[0] === 0x80) positive = true
	  else if (buf[0] === 0xFF) positive = false
	  else return null

	  // build up a base-256 tuple from the least sig to the highest
	  var zero = false
	    , tuple = []
	  for (var i = buf.length - 1; i > 0; i --) {
	    var byte = buf[i]
	    if (positive) tuple.push(byte)
	    else if (zero && byte === 0) tuple.push(0)
	    else if (zero) {
	      zero = false
	      tuple.push(0x100 - byte)
	    } else tuple.push(0xFF - byte)
	  }

	  for (var sum = 0, i = 0, l = tuple.length; i < l; i ++) {
	    sum += tuple[i] * Math.pow(256, i)
	  }

	  return positive ? sum : -1 * sum
	}

	function parseNumeric (f) {
	  if (f[0] & 0x80) return parse256(f)

	  var str = f.toString("utf8").split("\0")[0].trim()
	    , res = parseInt(str, 8)

	  return isNaN(res) ? null : res
	}



/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// A passthrough read/write stream that sets its properties
	// based on a header, extendedHeader, and globalHeader
	//
	// Can be either a file system object of some sort, or
	// a pax/ustar metadata entry.

	module.exports = Entry

	var TarHeader = __webpack_require__(54)
	  , tar = __webpack_require__(51)
	  , assert = __webpack_require__(15).ok
	  , Stream = __webpack_require__(13).Stream
	  , inherits = __webpack_require__(56)
	  , fstream = __webpack_require__(58).Abstract

	function Entry (header, extended, global) {
	  Stream.call(this)
	  this.readable = true
	  this.writable = true

	  this._needDrain = false
	  this._paused = false
	  this._reading = false
	  this._ending = false
	  this._ended = false
	  this._remaining = 0
	  this._abort = false
	  this._queue = []
	  this._index = 0
	  this._queueLen = 0

	  this._read = this._read.bind(this)

	  this.props = {}
	  this._header = header
	  this._extended = extended || {}

	  // globals can change throughout the course of
	  // a file parse operation.  Freeze it at its current state.
	  this._global = {}
	  var me = this
	  Object.keys(global || {}).forEach(function (g) {
	    me._global[g] = global[g]
	  })

	  this._setProps()
	}

	inherits(Entry, Stream)

	Entry.prototype.write = function (c) {
	  if (this._ending) this.error("write() after end()", null, true)
	  if (this._remaining === 0) {
	    this.error("invalid bytes past eof")
	  }

	  // often we'll get a bunch of \0 at the end of the last write,
	  // since chunks will always be 512 bytes when reading a tarball.
	  if (c.length > this._remaining) {
	    c = c.slice(0, this._remaining)
	  }
	  this._remaining -= c.length

	  // put it on the stack.
	  var ql = this._queueLen
	  this._queue.push(c)
	  this._queueLen ++

	  this._read()

	  // either paused, or buffered
	  if (this._paused || ql > 0) {
	    this._needDrain = true
	    return false
	  }

	  return true
	}

	Entry.prototype.end = function (c) {
	  if (c) this.write(c)
	  this._ending = true
	  this._read()
	}

	Entry.prototype.pause = function () {
	  this._paused = true
	  this.emit("pause")
	}

	Entry.prototype.resume = function () {
	  // console.error("    Tar Entry resume", this.path)
	  this.emit("resume")
	  this._paused = false
	  this._read()
	  return this._queueLen - this._index > 1
	}

	  // This is bound to the instance
	Entry.prototype._read = function () {
	  // console.error("    Tar Entry _read", this.path)

	  if (this._paused || this._reading || this._ended) return

	  // set this flag so that event handlers don't inadvertently
	  // get multiple _read() calls running.
	  this._reading = true

	  // have any data to emit?
	  while (this._index < this._queueLen && !this._paused) {
	    var chunk = this._queue[this._index ++]
	    this.emit("data", chunk)
	  }

	  // check if we're drained
	  if (this._index >= this._queueLen) {
	    this._queue.length = this._queueLen = this._index = 0
	    if (this._needDrain) {
	      this._needDrain = false
	      this.emit("drain")
	    }
	    if (this._ending) {
	      this._ended = true
	      this.emit("end")
	    }
	  }

	  // if the queue gets too big, then pluck off whatever we can.
	  // this should be fairly rare.
	  var mql = this._maxQueueLen
	  if (this._queueLen > mql && this._index > 0) {
	    mql = Math.min(this._index, mql)
	    this._index -= mql
	    this._queueLen -= mql
	    this._queue = this._queue.slice(mql)
	  }

	  this._reading = false
	}

	Entry.prototype._setProps = function () {
	  // props = extended->global->header->{}
	  var header = this._header
	    , extended = this._extended
	    , global = this._global
	    , props = this.props

	  // first get the values from the normal header.
	  var fields = tar.fields
	  for (var f = 0; fields[f] !== null; f ++) {
	    var field = fields[f]
	      , val = header[field]
	    if (typeof val !== "undefined") props[field] = val
	  }

	  // next, the global header for this file.
	  // numeric values, etc, will have already been parsed.
	  ;[global, extended].forEach(function (p) {
	    Object.keys(p).forEach(function (f) {
	      if (typeof p[f] !== "undefined") props[f] = p[f]
	    })
	  })

	  // no nulls allowed in path or linkpath
	  ;["path", "linkpath"].forEach(function (p) {
	    if (props.hasOwnProperty(p)) {
	      props[p] = props[p].split("\0")[0]
	    }
	  })


	  // set date fields to be a proper date
	  ;["mtime", "ctime", "atime"].forEach(function (p) {
	    if (props.hasOwnProperty(p)) {
	      props[p] = new Date(props[p] * 1000)
	    }
	  })

	  // set the type so that we know what kind of file to create
	  var type
	  switch (tar.types[props.type]) {
	    case "OldFile":
	    case "ContiguousFile":
	      type = "File"
	      break

	    case "GNUDumpDir":
	      type = "Directory"
	      break

	    case undefined:
	      type = "Unknown"
	      break

	    case "Link":
	    case "SymbolicLink":
	    case "CharacterDevice":
	    case "BlockDevice":
	    case "Directory":
	    case "FIFO":
	    default:
	      type = tar.types[props.type]
	  }

	  this.type = type
	  this.path = props.path
	  this.size = props.size

	  // size is special, since it signals when the file needs to end.
	  this._remaining = props.size
	}

	// the parser may not call write if _abort is true. 
	// useful for skipping data from some files quickly.
	Entry.prototype.abort = function(){
	  this._abort = true
	}

	Entry.prototype.warn = fstream.warn
	Entry.prototype.error = fstream.error


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	try {
	  var util = __webpack_require__(14);
	  if (typeof util.inherits !== 'function') throw '';
	  module.exports = util.inherits;
	} catch (e) {
	  module.exports = __webpack_require__(57);
	}


/***/ },
/* 57 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	exports.Abstract = __webpack_require__(59)
	exports.Reader = __webpack_require__(60)
	exports.Writer = __webpack_require__(67)

	exports.File = {
	  Reader: __webpack_require__(64),
	  Writer: __webpack_require__(87)
	}

	exports.Dir = {
	  Reader: __webpack_require__(63),
	  Writer: __webpack_require__(84)
	}

	exports.Link = {
	  Reader: __webpack_require__(62),
	  Writer: __webpack_require__(86)
	}

	exports.Proxy = {
	  Reader: __webpack_require__(66),
	  Writer: __webpack_require__(88)
	}

	exports.Reader.Dir = exports.DirReader = exports.Dir.Reader
	exports.Reader.File = exports.FileReader = exports.File.Reader
	exports.Reader.Link = exports.LinkReader = exports.Link.Reader
	exports.Reader.Proxy = exports.ProxyReader = exports.Proxy.Reader

	exports.Writer.Dir = exports.DirWriter = exports.Dir.Writer
	exports.Writer.File = exports.FileWriter = exports.File.Writer
	exports.Writer.Link = exports.LinkWriter = exports.Link.Writer
	exports.Writer.Proxy = exports.ProxyWriter = exports.Proxy.Writer

	exports.collect = __webpack_require__(85)


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// the parent class for all fstreams.

	module.exports = Abstract

	var Stream = __webpack_require__(13).Stream
	var inherits = __webpack_require__(56)

	function Abstract () {
	  Stream.call(this)
	}

	inherits(Abstract, Stream)

	Abstract.prototype.on = function (ev, fn) {
	  if (ev === 'ready' && this.ready) {
	    process.nextTick(fn.bind(this))
	  } else {
	    Stream.prototype.on.call(this, ev, fn)
	  }
	  return this
	}

	Abstract.prototype.abort = function () {
	  this._aborted = true
	  this.emit('abort')
	}

	Abstract.prototype.destroy = function () {}

	Abstract.prototype.warn = function (msg, code) {
	  var self = this
	  var er = decorate(msg, code, self)
	  if (!self.listeners('warn')) {
	    console.error('%s %s\n' +
	    'path = %s\n' +
	    'syscall = %s\n' +
	    'fstream_type = %s\n' +
	    'fstream_path = %s\n' +
	    'fstream_unc_path = %s\n' +
	    'fstream_class = %s\n' +
	    'fstream_stack =\n%s\n',
	      code || 'UNKNOWN',
	      er.stack,
	      er.path,
	      er.syscall,
	      er.fstream_type,
	      er.fstream_path,
	      er.fstream_unc_path,
	      er.fstream_class,
	      er.fstream_stack.join('\n'))
	  } else {
	    self.emit('warn', er)
	  }
	}

	Abstract.prototype.info = function (msg, code) {
	  this.emit('info', msg, code)
	}

	Abstract.prototype.error = function (msg, code, th) {
	  var er = decorate(msg, code, this)
	  if (th) throw er
	  else this.emit('error', er)
	}

	function decorate (er, code, self) {
	  if (!(er instanceof Error)) er = new Error(er)
	  er.code = er.code || code
	  er.path = er.path || self.path
	  er.fstream_type = er.fstream_type || self.type
	  er.fstream_path = er.fstream_path || self.path
	  if (self._path !== self.path) {
	    er.fstream_unc_path = er.fstream_unc_path || self._path
	  }
	  if (self.linkpath) {
	    er.fstream_linkpath = er.fstream_linkpath || self.linkpath
	  }
	  er.fstream_class = er.fstream_class || self.constructor.name
	  er.fstream_stack = er.fstream_stack ||
	    new Error().stack.split(/\n/).slice(3).map(function (s) {
	      return s.replace(/^ {4}at /, '')
	    })

	  return er
	}


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Reader

	var fs = __webpack_require__(7)
	var Stream = __webpack_require__(13).Stream
	var inherits = __webpack_require__(56)
	var path = __webpack_require__(18)
	var getType = __webpack_require__(61)
	var hardLinks = Reader.hardLinks = {}
	var Abstract = __webpack_require__(59)

	// Must do this *before* loading the child classes
	inherits(Reader, Abstract)

	var LinkReader = __webpack_require__(62)

	function Reader (props, currentStat) {
	  var self = this
	  if (!(self instanceof Reader)) return new Reader(props, currentStat)

	  if (typeof props === 'string') {
	    props = { path: props }
	  }

	  if (!props.path) {
	    self.error('Must provide a path', null, true)
	  }

	  // polymorphism.
	  // call fstream.Reader(dir) to get a DirReader object, etc.
	  // Note that, unlike in the Writer case, ProxyReader is going
	  // to be the *normal* state of affairs, since we rarely know
	  // the type of a file prior to reading it.

	  var type
	  var ClassType

	  if (props.type && typeof props.type === 'function') {
	    type = props.type
	    ClassType = type
	  } else {
	    type = getType(props)
	    ClassType = Reader
	  }

	  if (currentStat && !type) {
	    type = getType(currentStat)
	    props[type] = true
	    props.type = type
	  }

	  switch (type) {
	    case 'Directory':
	      ClassType = __webpack_require__(63)
	      break

	    case 'Link':
	    // XXX hard links are just files.
	    // However, it would be good to keep track of files' dev+inode
	    // and nlink values, and create a HardLinkReader that emits
	    // a linkpath value of the original copy, so that the tar
	    // writer can preserve them.
	    // ClassType = HardLinkReader
	    // break

	    case 'File':
	      ClassType = __webpack_require__(64)
	      break

	    case 'SymbolicLink':
	      ClassType = LinkReader
	      break

	    case 'Socket':
	      ClassType = __webpack_require__(65)
	      break

	    case null:
	      ClassType = __webpack_require__(66)
	      break
	  }

	  if (!(self instanceof ClassType)) {
	    return new ClassType(props)
	  }

	  Abstract.call(self)

	  self.readable = true
	  self.writable = false

	  self.type = type
	  self.props = props
	  self.depth = props.depth = props.depth || 0
	  self.parent = props.parent || null
	  self.root = props.root || (props.parent && props.parent.root) || self

	  self._path = self.path = path.resolve(props.path)
	  if (process.platform === 'win32') {
	    self.path = self._path = self.path.replace(/\?/g, '_')
	    if (self._path.length >= 260) {
	      // how DOES one create files on the moon?
	      // if the path has spaces in it, then UNC will fail.
	      self._swallowErrors = true
	      // if (self._path.indexOf(" ") === -1) {
	      self._path = '\\\\?\\' + self.path.replace(/\//g, '\\')
	    // }
	    }
	  }
	  self.basename = props.basename = path.basename(self.path)
	  self.dirname = props.dirname = path.dirname(self.path)

	  // these have served their purpose, and are now just noisy clutter
	  props.parent = props.root = null

	  // console.error("\n\n\n%s setting size to", props.path, props.size)
	  self.size = props.size
	  self.filter = typeof props.filter === 'function' ? props.filter : null
	  if (props.sort === 'alpha') props.sort = alphasort

	  // start the ball rolling.
	  // this will stat the thing, and then call self._read()
	  // to start reading whatever it is.
	  // console.error("calling stat", props.path, currentStat)
	  self._stat(currentStat)
	}

	function alphasort (a, b) {
	  return a === b ? 0
	    : a.toLowerCase() > b.toLowerCase() ? 1
	      : a.toLowerCase() < b.toLowerCase() ? -1
	        : a > b ? 1
	          : -1
	}

	Reader.prototype._stat = function (currentStat) {
	  var self = this
	  var props = self.props
	  var stat = props.follow ? 'stat' : 'lstat'
	  // console.error("Reader._stat", self._path, currentStat)
	  if (currentStat) process.nextTick(statCb.bind(null, null, currentStat))
	  else fs[stat](self._path, statCb)

	  function statCb (er, props_) {
	    // console.error("Reader._stat, statCb", self._path, props_, props_.nlink)
	    if (er) return self.error(er)

	    Object.keys(props_).forEach(function (k) {
	      props[k] = props_[k]
	    })

	    // if it's not the expected size, then abort here.
	    if (undefined !== self.size && props.size !== self.size) {
	      return self.error('incorrect size')
	    }
	    self.size = props.size

	    var type = getType(props)
	    var handleHardlinks = props.hardlinks !== false

	    // special little thing for handling hardlinks.
	    if (handleHardlinks && type !== 'Directory' && props.nlink && props.nlink > 1) {
	      var k = props.dev + ':' + props.ino
	      // console.error("Reader has nlink", self._path, k)
	      if (hardLinks[k] === self._path || !hardLinks[k]) {
	        hardLinks[k] = self._path
	      } else {
	        // switch into hardlink mode.
	        type = self.type = self.props.type = 'Link'
	        self.Link = self.props.Link = true
	        self.linkpath = self.props.linkpath = hardLinks[k]
	        // console.error("Hardlink detected, switching mode", self._path, self.linkpath)
	        // Setting __proto__ would arguably be the "correct"
	        // approach here, but that just seems too wrong.
	        self._stat = self._read = LinkReader.prototype._read
	      }
	    }

	    if (self.type && self.type !== type) {
	      self.error('Unexpected type: ' + type)
	    }

	    // if the filter doesn't pass, then just skip over this one.
	    // still have to emit end so that dir-walking can move on.
	    if (self.filter) {
	      var who = self._proxy || self
	      // special handling for ProxyReaders
	      if (!self.filter.call(who, who, props)) {
	        if (!self._disowned) {
	          self.abort()
	          self.emit('end')
	          self.emit('close')
	        }
	        return
	      }
	    }

	    // last chance to abort or disown before the flow starts!
	    var events = ['_stat', 'stat', 'ready']
	    var e = 0
	    ;(function go () {
	      if (self._aborted) {
	        self.emit('end')
	        self.emit('close')
	        return
	      }

	      if (self._paused && self.type !== 'Directory') {
	        self.once('resume', go)
	        return
	      }

	      var ev = events[e++]
	      if (!ev) {
	        return self._read()
	      }
	      self.emit(ev, props)
	      go()
	    })()
	  }
	}

	Reader.prototype.pipe = function (dest) {
	  var self = this
	  if (typeof dest.add === 'function') {
	    // piping to a multi-compatible, and we've got directory entries.
	    self.on('entry', function (entry) {
	      var ret = dest.add(entry)
	      if (ret === false) {
	        self.pause()
	      }
	    })
	  }

	  // console.error("R Pipe apply Stream Pipe")
	  return Stream.prototype.pipe.apply(this, arguments)
	}

	Reader.prototype.pause = function (who) {
	  this._paused = true
	  who = who || this
	  this.emit('pause', who)
	  if (this._stream) this._stream.pause(who)
	}

	Reader.prototype.resume = function (who) {
	  this._paused = false
	  who = who || this
	  this.emit('resume', who)
	  if (this._stream) this._stream.resume(who)
	  this._read()
	}

	Reader.prototype._read = function () {
	  this.error('Cannot read unknown type: ' + this.type)
	}


/***/ },
/* 61 */
/***/ function(module, exports) {

	module.exports = getType

	function getType (st) {
	  var types = [
	    'Directory',
	    'File',
	    'SymbolicLink',
	    'Link', // special for hardlinks from tarballs
	    'BlockDevice',
	    'CharacterDevice',
	    'FIFO',
	    'Socket'
	  ]
	  var type

	  if (st.type && types.indexOf(st.type) !== -1) {
	    st[st.type] = true
	    return st.type
	  }

	  for (var i = 0, l = types.length; i < l; i++) {
	    type = types[i]
	    var is = st[type] || st['is' + type]
	    if (typeof is === 'function') is = is.call(st)
	    if (is) {
	      st[type] = true
	      st.type = type
	      return type
	    }
	  }

	  return null
	}


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// Basically just a wrapper around an fs.readlink
	//
	// XXX: Enhance this to support the Link type, by keeping
	// a lookup table of {<dev+inode>:<path>}, so that hardlinks
	// can be preserved in tarballs.

	module.exports = LinkReader

	var fs = __webpack_require__(7)
	var inherits = __webpack_require__(56)
	var Reader = __webpack_require__(60)

	inherits(LinkReader, Reader)

	function LinkReader (props) {
	  var self = this
	  if (!(self instanceof LinkReader)) {
	    throw new Error('LinkReader must be called as constructor.')
	  }

	  if (!((props.type === 'Link' && props.Link) ||
	    (props.type === 'SymbolicLink' && props.SymbolicLink))) {
	    throw new Error('Non-link type ' + props.type)
	  }

	  Reader.call(self, props)
	}

	// When piping a LinkReader into a LinkWriter, we have to
	// already have the linkpath property set, so that has to
	// happen *before* the "ready" event, which means we need to
	// override the _stat method.
	LinkReader.prototype._stat = function (currentStat) {
	  var self = this
	  fs.readlink(self._path, function (er, linkpath) {
	    if (er) return self.error(er)
	    self.linkpath = self.props.linkpath = linkpath
	    self.emit('linkpath', linkpath)
	    Reader.prototype._stat.call(self, currentStat)
	  })
	}

	LinkReader.prototype._read = function () {
	  var self = this
	  if (self._paused) return
	  // basically just a no-op, since we got all the info we need
	  // from the _stat method
	  if (!self._ended) {
	    self.emit('end')
	    self.emit('close')
	    self._ended = true
	  }
	}


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// A thing that emits "entry" events with Reader objects
	// Pausing it causes it to stop emitting entry events, and also
	// pauses the current entry if there is one.

	module.exports = DirReader

	var fs = __webpack_require__(7)
	var inherits = __webpack_require__(56)
	var path = __webpack_require__(18)
	var Reader = __webpack_require__(60)
	var assert = __webpack_require__(15).ok

	inherits(DirReader, Reader)

	function DirReader (props) {
	  var self = this
	  if (!(self instanceof DirReader)) {
	    throw new Error('DirReader must be called as constructor.')
	  }

	  // should already be established as a Directory type
	  if (props.type !== 'Directory' || !props.Directory) {
	    throw new Error('Non-directory type ' + props.type)
	  }

	  self.entries = null
	  self._index = -1
	  self._paused = false
	  self._length = -1

	  if (props.sort) {
	    this.sort = props.sort
	  }

	  Reader.call(this, props)
	}

	DirReader.prototype._getEntries = function () {
	  var self = this

	  // race condition.  might pause() before calling _getEntries,
	  // and then resume, and try to get them a second time.
	  if (self._gotEntries) return
	  self._gotEntries = true

	  fs.readdir(self._path, function (er, entries) {
	    if (er) return self.error(er)

	    self.entries = entries

	    self.emit('entries', entries)
	    if (self._paused) self.once('resume', processEntries)
	    else processEntries()

	    function processEntries () {
	      self._length = self.entries.length
	      if (typeof self.sort === 'function') {
	        self.entries = self.entries.sort(self.sort.bind(self))
	      }
	      self._read()
	    }
	  })
	}

	// start walking the dir, and emit an "entry" event for each one.
	DirReader.prototype._read = function () {
	  var self = this

	  if (!self.entries) return self._getEntries()

	  if (self._paused || self._currentEntry || self._aborted) {
	    // console.error('DR paused=%j, current=%j, aborted=%j', self._paused, !!self._currentEntry, self._aborted)
	    return
	  }

	  self._index++
	  if (self._index >= self.entries.length) {
	    if (!self._ended) {
	      self._ended = true
	      self.emit('end')
	      self.emit('close')
	    }
	    return
	  }

	  // ok, handle this one, then.

	  // save creating a proxy, by stat'ing the thing now.
	  var p = path.resolve(self._path, self.entries[self._index])
	  assert(p !== self._path)
	  assert(self.entries[self._index])

	  // set this to prevent trying to _read() again in the stat time.
	  self._currentEntry = p
	  fs[ self.props.follow ? 'stat' : 'lstat' ](p, function (er, stat) {
	    if (er) return self.error(er)

	    var who = self._proxy || self

	    stat.path = p
	    stat.basename = path.basename(p)
	    stat.dirname = path.dirname(p)
	    var childProps = self.getChildProps.call(who, stat)
	    childProps.path = p
	    childProps.basename = path.basename(p)
	    childProps.dirname = path.dirname(p)

	    var entry = Reader(childProps, stat)

	    // console.error("DR Entry", p, stat.size)

	    self._currentEntry = entry

	    // "entry" events are for direct entries in a specific dir.
	    // "child" events are for any and all children at all levels.
	    // This nomenclature is not completely final.

	    entry.on('pause', function (who) {
	      if (!self._paused && !entry._disowned) {
	        self.pause(who)
	      }
	    })

	    entry.on('resume', function (who) {
	      if (self._paused && !entry._disowned) {
	        self.resume(who)
	      }
	    })

	    entry.on('stat', function (props) {
	      self.emit('_entryStat', entry, props)
	      if (entry._aborted) return
	      if (entry._paused) {
	        entry.once('resume', function () {
	          self.emit('entryStat', entry, props)
	        })
	      } else self.emit('entryStat', entry, props)
	    })

	    entry.on('ready', function EMITCHILD () {
	      // console.error("DR emit child", entry._path)
	      if (self._paused) {
	        // console.error("  DR emit child - try again later")
	        // pause the child, and emit the "entry" event once we drain.
	        // console.error("DR pausing child entry")
	        entry.pause(self)
	        return self.once('resume', EMITCHILD)
	      }

	      // skip over sockets.  they can't be piped around properly,
	      // so there's really no sense even acknowledging them.
	      // if someone really wants to see them, they can listen to
	      // the "socket" events.
	      if (entry.type === 'Socket') {
	        self.emit('socket', entry)
	      } else {
	        self.emitEntry(entry)
	      }
	    })

	    var ended = false
	    entry.on('close', onend)
	    entry.on('disown', onend)
	    function onend () {
	      if (ended) return
	      ended = true
	      self.emit('childEnd', entry)
	      self.emit('entryEnd', entry)
	      self._currentEntry = null
	      if (!self._paused) {
	        self._read()
	      }
	    }

	    // XXX Remove this.  Works in node as of 0.6.2 or so.
	    // Long filenames should not break stuff.
	    entry.on('error', function (er) {
	      if (entry._swallowErrors) {
	        self.warn(er)
	        entry.emit('end')
	        entry.emit('close')
	      } else {
	        self.emit('error', er)
	      }
	    })

	    // proxy up some events.
	    ;[
	      'child',
	      'childEnd',
	      'warn'
	    ].forEach(function (ev) {
	      entry.on(ev, self.emit.bind(self, ev))
	    })
	  })
	}

	DirReader.prototype.disown = function (entry) {
	  entry.emit('beforeDisown')
	  entry._disowned = true
	  entry.parent = entry.root = null
	  if (entry === this._currentEntry) {
	    this._currentEntry = null
	  }
	  entry.emit('disown')
	}

	DirReader.prototype.getChildProps = function () {
	  return {
	    depth: this.depth + 1,
	    root: this.root || this,
	    parent: this,
	    follow: this.follow,
	    filter: this.filter,
	    sort: this.props.sort,
	    hardlinks: this.props.hardlinks
	  }
	}

	DirReader.prototype.pause = function (who) {
	  var self = this
	  if (self._paused) return
	  who = who || self
	  self._paused = true
	  if (self._currentEntry && self._currentEntry.pause) {
	    self._currentEntry.pause(who)
	  }
	  self.emit('pause', who)
	}

	DirReader.prototype.resume = function (who) {
	  var self = this
	  if (!self._paused) return
	  who = who || self

	  self._paused = false
	  // console.error('DR Emit Resume', self._path)
	  self.emit('resume', who)
	  if (self._paused) {
	    // console.error('DR Re-paused', self._path)
	    return
	  }

	  if (self._currentEntry) {
	    if (self._currentEntry.resume) self._currentEntry.resume(who)
	  } else self._read()
	}

	DirReader.prototype.emitEntry = function (entry) {
	  this.emit('entry', entry)
	  this.emit('child', entry)
	}


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	// Basically just a wrapper around an fs.ReadStream

	module.exports = FileReader

	var fs = __webpack_require__(7)
	var inherits = __webpack_require__(56)
	var Reader = __webpack_require__(60)
	var EOF = {EOF: true}
	var CLOSE = {CLOSE: true}

	inherits(FileReader, Reader)

	function FileReader (props) {
	  // console.error("    FR create", props.path, props.size, new Error().stack)
	  var self = this
	  if (!(self instanceof FileReader)) {
	    throw new Error('FileReader must be called as constructor.')
	  }

	  // should already be established as a File type
	  // XXX Todo: preserve hardlinks by tracking dev+inode+nlink,
	  // with a HardLinkReader class.
	  if (!((props.type === 'Link' && props.Link) ||
	    (props.type === 'File' && props.File))) {
	    throw new Error('Non-file type ' + props.type)
	  }

	  self._buffer = []
	  self._bytesEmitted = 0
	  Reader.call(self, props)
	}

	FileReader.prototype._getStream = function () {
	  var self = this
	  var stream = self._stream = fs.createReadStream(self._path, self.props)

	  if (self.props.blksize) {
	    stream.bufferSize = self.props.blksize
	  }

	  stream.on('open', self.emit.bind(self, 'open'))

	  stream.on('data', function (c) {
	    // console.error('\t\t%d %s', c.length, self.basename)
	    self._bytesEmitted += c.length
	    // no point saving empty chunks
	    if (!c.length) {
	      return
	    } else if (self._paused || self._buffer.length) {
	      self._buffer.push(c)
	      self._read()
	    } else self.emit('data', c)
	  })

	  stream.on('end', function () {
	    if (self._paused || self._buffer.length) {
	      // console.error('FR Buffering End', self._path)
	      self._buffer.push(EOF)
	      self._read()
	    } else {
	      self.emit('end')
	    }

	    if (self._bytesEmitted !== self.props.size) {
	      self.error("Didn't get expected byte count\n" +
	        'expect: ' + self.props.size + '\n' +
	        'actual: ' + self._bytesEmitted)
	    }
	  })

	  stream.on('close', function () {
	    if (self._paused || self._buffer.length) {
	      // console.error('FR Buffering Close', self._path)
	      self._buffer.push(CLOSE)
	      self._read()
	    } else {
	      // console.error('FR close 1', self._path)
	      self.emit('close')
	    }
	  })

	  stream.on('error', function (e) {
	    self.emit('error', e)
	  })

	  self._read()
	}

	FileReader.prototype._read = function () {
	  var self = this
	  // console.error('FR _read', self._path)
	  if (self._paused) {
	    // console.error('FR _read paused', self._path)
	    return
	  }

	  if (!self._stream) {
	    // console.error('FR _getStream calling', self._path)
	    return self._getStream()
	  }

	  // clear out the buffer, if there is one.
	  if (self._buffer.length) {
	    // console.error('FR _read has buffer', self._buffer.length, self._path)
	    var buf = self._buffer
	    for (var i = 0, l = buf.length; i < l; i++) {
	      var c = buf[i]
	      if (c === EOF) {
	        // console.error('FR Read emitting buffered end', self._path)
	        self.emit('end')
	      } else if (c === CLOSE) {
	        // console.error('FR Read emitting buffered close', self._path)
	        self.emit('close')
	      } else {
	        // console.error('FR Read emitting buffered data', self._path)
	        self.emit('data', c)
	      }

	      if (self._paused) {
	        // console.error('FR Read Re-pausing at '+i, self._path)
	        self._buffer = buf.slice(i)
	        return
	      }
	    }
	    self._buffer.length = 0
	  }
	// console.error("FR _read done")
	// that's about all there is to it.
	}

	FileReader.prototype.pause = function (who) {
	  var self = this
	  // console.error('FR Pause', self._path)
	  if (self._paused) return
	  who = who || self
	  self._paused = true
	  if (self._stream) self._stream.pause()
	  self.emit('pause', who)
	}

	FileReader.prototype.resume = function (who) {
	  var self = this
	  // console.error('FR Resume', self._path)
	  if (!self._paused) return
	  who = who || self
	  self.emit('resume', who)
	  self._paused = false
	  if (self._stream) self._stream.resume()
	  self._read()
	}


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// Just get the stats, and then don't do anything.
	// You can't really "read" from a socket.  You "connect" to it.
	// Mostly, this is here so that reading a dir with a socket in it
	// doesn't blow up.

	module.exports = SocketReader

	var inherits = __webpack_require__(56)
	var Reader = __webpack_require__(60)

	inherits(SocketReader, Reader)

	function SocketReader (props) {
	  var self = this
	  if (!(self instanceof SocketReader)) {
	    throw new Error('SocketReader must be called as constructor.')
	  }

	  if (!(props.type === 'Socket' && props.Socket)) {
	    throw new Error('Non-socket type ' + props.type)
	  }

	  Reader.call(self, props)
	}

	SocketReader.prototype._read = function () {
	  var self = this
	  if (self._paused) return
	  // basically just a no-op, since we got all the info we have
	  // from the _stat method
	  if (!self._ended) {
	    self.emit('end')
	    self.emit('close')
	    self._ended = true
	  }
	}


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// A reader for when we don't yet know what kind of thing
	// the thing is.

	module.exports = ProxyReader

	var Reader = __webpack_require__(60)
	var getType = __webpack_require__(61)
	var inherits = __webpack_require__(56)
	var fs = __webpack_require__(7)

	inherits(ProxyReader, Reader)

	function ProxyReader (props) {
	  var self = this
	  if (!(self instanceof ProxyReader)) {
	    throw new Error('ProxyReader must be called as constructor.')
	  }

	  self.props = props
	  self._buffer = []
	  self.ready = false

	  Reader.call(self, props)
	}

	ProxyReader.prototype._stat = function () {
	  var self = this
	  var props = self.props
	  // stat the thing to see what the proxy should be.
	  var stat = props.follow ? 'stat' : 'lstat'

	  fs[stat](props.path, function (er, current) {
	    var type
	    if (er || !current) {
	      type = 'File'
	    } else {
	      type = getType(current)
	    }

	    props[type] = true
	    props.type = self.type = type

	    self._old = current
	    self._addProxy(Reader(props, current))
	  })
	}

	ProxyReader.prototype._addProxy = function (proxy) {
	  var self = this
	  if (self._proxyTarget) {
	    return self.error('proxy already set')
	  }

	  self._proxyTarget = proxy
	  proxy._proxy = self

	  ;[
	    'error',
	    'data',
	    'end',
	    'close',
	    'linkpath',
	    'entry',
	    'entryEnd',
	    'child',
	    'childEnd',
	    'warn',
	    'stat'
	  ].forEach(function (ev) {
	    // console.error('~~ proxy event', ev, self.path)
	    proxy.on(ev, self.emit.bind(self, ev))
	  })

	  self.emit('proxy', proxy)

	  proxy.on('ready', function () {
	    // console.error("~~ proxy is ready!", self.path)
	    self.ready = true
	    self.emit('ready')
	  })

	  var calls = self._buffer
	  self._buffer.length = 0
	  calls.forEach(function (c) {
	    proxy[c[0]].apply(proxy, c[1])
	  })
	}

	ProxyReader.prototype.pause = function () {
	  return this._proxyTarget ? this._proxyTarget.pause() : false
	}

	ProxyReader.prototype.resume = function () {
	  return this._proxyTarget ? this._proxyTarget.resume() : false
	}


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Writer

	var fs = __webpack_require__(7)
	var inherits = __webpack_require__(56)
	var rimraf = __webpack_require__(68)
	var mkdir = __webpack_require__(83)
	var path = __webpack_require__(18)
	var umask = process.platform === 'win32' ? 0 : process.umask()
	var getType = __webpack_require__(61)
	var Abstract = __webpack_require__(59)

	// Must do this *before* loading the child classes
	inherits(Writer, Abstract)

	Writer.dirmode = parseInt('0777', 8) & (~umask)
	Writer.filemode = parseInt('0666', 8) & (~umask)

	var DirWriter = __webpack_require__(84)
	var LinkWriter = __webpack_require__(86)
	var FileWriter = __webpack_require__(87)
	var ProxyWriter = __webpack_require__(88)

	// props is the desired state.  current is optionally the current stat,
	// provided here so that subclasses can avoid statting the target
	// more than necessary.
	function Writer (props, current) {
	  var self = this

	  if (typeof props === 'string') {
	    props = { path: props }
	  }

	  if (!props.path) self.error('Must provide a path', null, true)

	  // polymorphism.
	  // call fstream.Writer(dir) to get a DirWriter object, etc.
	  var type = getType(props)
	  var ClassType = Writer

	  switch (type) {
	    case 'Directory':
	      ClassType = DirWriter
	      break
	    case 'File':
	      ClassType = FileWriter
	      break
	    case 'Link':
	    case 'SymbolicLink':
	      ClassType = LinkWriter
	      break
	    case null:
	    default:
	      // Don't know yet what type to create, so we wrap in a proxy.
	      ClassType = ProxyWriter
	      break
	  }

	  if (!(self instanceof ClassType)) return new ClassType(props)

	  // now get down to business.

	  Abstract.call(self)

	  // props is what we want to set.
	  // set some convenience properties as well.
	  self.type = props.type
	  self.props = props
	  self.depth = props.depth || 0
	  self.clobber = props.clobber === false ? props.clobber : true
	  self.parent = props.parent || null
	  self.root = props.root || (props.parent && props.parent.root) || self

	  self._path = self.path = path.resolve(props.path)
	  if (process.platform === 'win32') {
	    self.path = self._path = self.path.replace(/\?/g, '_')
	    if (self._path.length >= 260) {
	      self._swallowErrors = true
	      self._path = '\\\\?\\' + self.path.replace(/\//g, '\\')
	    }
	  }
	  self.basename = path.basename(props.path)
	  self.dirname = path.dirname(props.path)
	  self.linkpath = props.linkpath || null

	  props.parent = props.root = null

	  // console.error("\n\n\n%s setting size to", props.path, props.size)
	  self.size = props.size

	  if (typeof props.mode === 'string') {
	    props.mode = parseInt(props.mode, 8)
	  }

	  self.readable = false
	  self.writable = true

	  // buffer until ready, or while handling another entry
	  self._buffer = []
	  self.ready = false

	  self.filter = typeof props.filter === 'function' ? props.filter : null

	  // start the ball rolling.
	  // this checks what's there already, and then calls
	  // self._create() to call the impl-specific creation stuff.
	  self._stat(current)
	}

	// Calling this means that it's something we can't create.
	// Just assert that it's already there, otherwise raise a warning.
	Writer.prototype._create = function () {
	  var self = this
	  fs[self.props.follow ? 'stat' : 'lstat'](self._path, function (er) {
	    if (er) {
	      return self.warn('Cannot create ' + self._path + '\n' +
	        'Unsupported type: ' + self.type, 'ENOTSUP')
	    }
	    self._finish()
	  })
	}

	Writer.prototype._stat = function (current) {
	  var self = this
	  var props = self.props
	  var stat = props.follow ? 'stat' : 'lstat'
	  var who = self._proxy || self

	  if (current) statCb(null, current)
	  else fs[stat](self._path, statCb)

	  function statCb (er, current) {
	    if (self.filter && !self.filter.call(who, who, current)) {
	      self._aborted = true
	      self.emit('end')
	      self.emit('close')
	      return
	    }

	    // if it's not there, great.  We'll just create it.
	    // if it is there, then we'll need to change whatever differs
	    if (er || !current) {
	      return create(self)
	    }

	    self._old = current
	    var currentType = getType(current)

	    // if it's a type change, then we need to clobber or error.
	    // if it's not a type change, then let the impl take care of it.
	    if (currentType !== self.type) {
	      return rimraf(self._path, function (er) {
	        if (er) return self.error(er)
	        self._old = null
	        create(self)
	      })
	    }

	    // otherwise, just handle in the app-specific way
	    // this creates a fs.WriteStream, or mkdir's, or whatever
	    create(self)
	  }
	}

	function create (self) {
	  // console.error("W create", self._path, Writer.dirmode)

	  // XXX Need to clobber non-dirs that are in the way,
	  // unless { clobber: false } in the props.
	  mkdir(path.dirname(self._path), Writer.dirmode, function (er, made) {
	    // console.error("W created", path.dirname(self._path), er)
	    if (er) return self.error(er)

	    // later on, we have to set the mode and owner for these
	    self._madeDir = made
	    return self._create()
	  })
	}

	function endChmod (self, want, current, path, cb) {
	  var wantMode = want.mode
	  var chmod = want.follow || self.type !== 'SymbolicLink'
	    ? 'chmod' : 'lchmod'

	  if (!fs[chmod]) return cb()
	  if (typeof wantMode !== 'number') return cb()

	  var curMode = current.mode & parseInt('0777', 8)
	  wantMode = wantMode & parseInt('0777', 8)
	  if (wantMode === curMode) return cb()

	  fs[chmod](path, wantMode, cb)
	}

	function endChown (self, want, current, path, cb) {
	  // Don't even try it unless root.  Too easy to EPERM.
	  if (process.platform === 'win32') return cb()
	  if (!process.getuid || process.getuid() !== 0) return cb()
	  if (typeof want.uid !== 'number' &&
	    typeof want.gid !== 'number') return cb()

	  if (current.uid === want.uid &&
	    current.gid === want.gid) return cb()

	  var chown = (self.props.follow || self.type !== 'SymbolicLink')
	    ? 'chown' : 'lchown'
	  if (!fs[chown]) return cb()

	  if (typeof want.uid !== 'number') want.uid = current.uid
	  if (typeof want.gid !== 'number') want.gid = current.gid

	  fs[chown](path, want.uid, want.gid, cb)
	}

	function endUtimes (self, want, current, path, cb) {
	  if (!fs.utimes || process.platform === 'win32') return cb()

	  var utimes = (want.follow || self.type !== 'SymbolicLink')
	    ? 'utimes' : 'lutimes'

	  if (utimes === 'lutimes' && !fs[utimes]) {
	    utimes = 'utimes'
	  }

	  if (!fs[utimes]) return cb()

	  var curA = current.atime
	  var curM = current.mtime
	  var meA = want.atime
	  var meM = want.mtime

	  if (meA === undefined) meA = curA
	  if (meM === undefined) meM = curM

	  if (!isDate(meA)) meA = new Date(meA)
	  if (!isDate(meM)) meA = new Date(meM)

	  if (meA.getTime() === curA.getTime() &&
	    meM.getTime() === curM.getTime()) return cb()

	  fs[utimes](path, meA, meM, cb)
	}

	// XXX This function is beastly.  Break it up!
	Writer.prototype._finish = function () {
	  var self = this

	  if (self._finishing) return
	  self._finishing = true

	  // console.error(" W Finish", self._path, self.size)

	  // set up all the things.
	  // At this point, we're already done writing whatever we've gotta write,
	  // adding files to the dir, etc.
	  var todo = 0
	  var errState = null
	  var done = false

	  if (self._old) {
	    // the times will almost *certainly* have changed.
	    // adds the utimes syscall, but remove another stat.
	    self._old.atime = new Date(0)
	    self._old.mtime = new Date(0)
	    // console.error(" W Finish Stale Stat", self._path, self.size)
	    setProps(self._old)
	  } else {
	    var stat = self.props.follow ? 'stat' : 'lstat'
	    // console.error(" W Finish Stating", self._path, self.size)
	    fs[stat](self._path, function (er, current) {
	      // console.error(" W Finish Stated", self._path, self.size, current)
	      if (er) {
	        // if we're in the process of writing out a
	        // directory, it's very possible that the thing we're linking to
	        // doesn't exist yet (especially if it was intended as a symlink),
	        // so swallow ENOENT errors here and just soldier on.
	        if (er.code === 'ENOENT' &&
	          (self.type === 'Link' || self.type === 'SymbolicLink') &&
	          process.platform === 'win32') {
	          self.ready = true
	          self.emit('ready')
	          self.emit('end')
	          self.emit('close')
	          self.end = self._finish = function () {}
	          return
	        } else return self.error(er)
	      }
	      setProps(self._old = current)
	    })
	  }

	  return

	  function setProps (current) {
	    todo += 3
	    endChmod(self, self.props, current, self._path, next('chmod'))
	    endChown(self, self.props, current, self._path, next('chown'))
	    endUtimes(self, self.props, current, self._path, next('utimes'))
	  }

	  function next (what) {
	    return function (er) {
	      // console.error("   W Finish", what, todo)
	      if (errState) return
	      if (er) {
	        er.fstream_finish_call = what
	        return self.error(errState = er)
	      }
	      if (--todo > 0) return
	      if (done) return
	      done = true

	      // we may still need to set the mode/etc. on some parent dirs
	      // that were created previously.  delay end/close until then.
	      if (!self._madeDir) return end()
	      else endMadeDir(self, self._path, end)

	      function end (er) {
	        if (er) {
	          er.fstream_finish_call = 'setupMadeDir'
	          return self.error(er)
	        }
	        // all the props have been set, so we're completely done.
	        self.emit('end')
	        self.emit('close')
	      }
	    }
	  }
	}

	function endMadeDir (self, p, cb) {
	  var made = self._madeDir
	  // everything *between* made and path.dirname(self._path)
	  // needs to be set up.  Note that this may just be one dir.
	  var d = path.dirname(p)

	  endMadeDir_(self, d, function (er) {
	    if (er) return cb(er)
	    if (d === made) {
	      return cb()
	    }
	    endMadeDir(self, d, cb)
	  })
	}

	function endMadeDir_ (self, p, cb) {
	  var dirProps = {}
	  Object.keys(self.props).forEach(function (k) {
	    dirProps[k] = self.props[k]

	    // only make non-readable dirs if explicitly requested.
	    if (k === 'mode' && self.type !== 'Directory') {
	      dirProps[k] = dirProps[k] | parseInt('0111', 8)
	    }
	  })

	  var todo = 3
	  var errState = null
	  fs.stat(p, function (er, current) {
	    if (er) return cb(errState = er)
	    endChmod(self, dirProps, current, p, next)
	    endChown(self, dirProps, current, p, next)
	    endUtimes(self, dirProps, current, p, next)
	  })

	  function next (er) {
	    if (errState) return
	    if (er) return cb(errState = er)
	    if (--todo === 0) return cb()
	  }
	}

	Writer.prototype.pipe = function () {
	  this.error("Can't pipe from writable stream")
	}

	Writer.prototype.add = function () {
	  this.error("Can't add to non-Directory type")
	}

	Writer.prototype.write = function () {
	  return true
	}

	function objectToString (d) {
	  return Object.prototype.toString.call(d)
	}

	function isDate (d) {
	  return typeof d === 'object' && objectToString(d) === '[object Date]'
	}


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = rimraf
	rimraf.sync = rimrafSync

	var assert = __webpack_require__(15)
	var path = __webpack_require__(18)
	var fs = __webpack_require__(8)
	var glob = __webpack_require__(69)

	var defaultGlobOpts = {
	  nosort: true,
	  silent: true
	}

	// for EMFILE handling
	var timeout = 0

	var isWindows = (process.platform === "win32")

	function defaults (options) {
	  var methods = [
	    'unlink',
	    'chmod',
	    'stat',
	    'lstat',
	    'rmdir',
	    'readdir'
	  ]
	  methods.forEach(function(m) {
	    options[m] = options[m] || fs[m]
	    m = m + 'Sync'
	    options[m] = options[m] || fs[m]
	  })

	  options.maxBusyTries = options.maxBusyTries || 3
	  options.emfileWait = options.emfileWait || 1000
	  if (options.glob === false) {
	    options.disableGlob = true
	  }
	  options.disableGlob = options.disableGlob || false
	  options.glob = options.glob || defaultGlobOpts
	}

	function rimraf (p, options, cb) {
	  if (typeof options === 'function') {
	    cb = options
	    options = {}
	  }

	  assert(p, 'rimraf: missing path')
	  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
	  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
	  assert(options, 'rimraf: invalid options argument provided')
	  assert.equal(typeof options, 'object', 'rimraf: options should be object')

	  defaults(options)

	  var busyTries = 0
	  var errState = null
	  var n = 0

	  if (options.disableGlob || !glob.hasMagic(p))
	    return afterGlob(null, [p])

	  options.lstat(p, function (er, stat) {
	    if (!er)
	      return afterGlob(null, [p])

	    glob(p, options.glob, afterGlob)
	  })

	  function next (er) {
	    errState = errState || er
	    if (--n === 0)
	      cb(errState)
	  }

	  function afterGlob (er, results) {
	    if (er)
	      return cb(er)

	    n = results.length
	    if (n === 0)
	      return cb()

	    results.forEach(function (p) {
	      rimraf_(p, options, function CB (er) {
	        if (er) {
	          if (isWindows && (er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
	              busyTries < options.maxBusyTries) {
	            busyTries ++
	            var time = busyTries * 100
	            // try again, with the same exact callback as this one.
	            return setTimeout(function () {
	              rimraf_(p, options, CB)
	            }, time)
	          }

	          // this one won't happen if graceful-fs is used.
	          if (er.code === "EMFILE" && timeout < options.emfileWait) {
	            return setTimeout(function () {
	              rimraf_(p, options, CB)
	            }, timeout ++)
	          }

	          // already gone
	          if (er.code === "ENOENT") er = null
	        }

	        timeout = 0
	        next(er)
	      })
	    })
	  }
	}

	// Two possible strategies.
	// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
	// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
	//
	// Both result in an extra syscall when you guess wrong.  However, there
	// are likely far more normal files in the world than directories.  This
	// is based on the assumption that a the average number of files per
	// directory is >= 1.
	//
	// If anyone ever complains about this, then I guess the strategy could
	// be made configurable somehow.  But until then, YAGNI.
	function rimraf_ (p, options, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')

	  // sunos lets the root user unlink directories, which is... weird.
	  // so we have to lstat here and make sure it's not a dir.
	  options.lstat(p, function (er, st) {
	    if (er && er.code === "ENOENT")
	      return cb(null)

	    // Windows can EPERM on stat.  Life is suffering.
	    if (er && er.code === "EPERM" && isWindows)
	      fixWinEPERM(p, options, er, cb)

	    if (st && st.isDirectory())
	      return rmdir(p, options, er, cb)

	    options.unlink(p, function (er) {
	      if (er) {
	        if (er.code === "ENOENT")
	          return cb(null)
	        if (er.code === "EPERM")
	          return (isWindows)
	            ? fixWinEPERM(p, options, er, cb)
	            : rmdir(p, options, er, cb)
	        if (er.code === "EISDIR")
	          return rmdir(p, options, er, cb)
	      }
	      return cb(er)
	    })
	  })
	}

	function fixWinEPERM (p, options, er, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')
	  if (er)
	    assert(er instanceof Error)

	  options.chmod(p, 666, function (er2) {
	    if (er2)
	      cb(er2.code === "ENOENT" ? null : er)
	    else
	      options.stat(p, function(er3, stats) {
	        if (er3)
	          cb(er3.code === "ENOENT" ? null : er)
	        else if (stats.isDirectory())
	          rmdir(p, options, er, cb)
	        else
	          options.unlink(p, cb)
	      })
	  })
	}

	function fixWinEPERMSync (p, options, er) {
	  assert(p)
	  assert(options)
	  if (er)
	    assert(er instanceof Error)

	  try {
	    options.chmodSync(p, 666)
	  } catch (er2) {
	    if (er2.code === "ENOENT")
	      return
	    else
	      throw er
	  }

	  try {
	    var stats = options.statSync(p)
	  } catch (er3) {
	    if (er3.code === "ENOENT")
	      return
	    else
	      throw er
	  }

	  if (stats.isDirectory())
	    rmdirSync(p, options, er)
	  else
	    options.unlinkSync(p)
	}

	function rmdir (p, options, originalEr, cb) {
	  assert(p)
	  assert(options)
	  if (originalEr)
	    assert(originalEr instanceof Error)
	  assert(typeof cb === 'function')

	  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
	  // if we guessed wrong, and it's not a directory, then
	  // raise the original error.
	  options.rmdir(p, function (er) {
	    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
	      rmkids(p, options, cb)
	    else if (er && er.code === "ENOTDIR")
	      cb(originalEr)
	    else
	      cb(er)
	  })
	}

	function rmkids(p, options, cb) {
	  assert(p)
	  assert(options)
	  assert(typeof cb === 'function')

	  options.readdir(p, function (er, files) {
	    if (er)
	      return cb(er)
	    var n = files.length
	    if (n === 0)
	      return options.rmdir(p, cb)
	    var errState
	    files.forEach(function (f) {
	      rimraf(path.join(p, f), options, function (er) {
	        if (errState)
	          return
	        if (er)
	          return cb(errState = er)
	        if (--n === 0)
	          options.rmdir(p, cb)
	      })
	    })
	  })
	}

	// this looks simpler, and is strictly *faster*, but will
	// tie up the JavaScript thread and fail on excessively
	// deep directory trees.
	function rimrafSync (p, options) {
	  options = options || {}
	  defaults(options)

	  assert(p, 'rimraf: missing path')
	  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
	  assert(options, 'rimraf: missing options')
	  assert.equal(typeof options, 'object', 'rimraf: options should be object')

	  var results

	  if (options.disableGlob || !glob.hasMagic(p)) {
	    results = [p]
	  } else {
	    try {
	      options.lstatSync(p)
	      results = [p]
	    } catch (er) {
	      results = glob.sync(p, options.glob)
	    }
	  }

	  if (!results.length)
	    return

	  for (var i = 0; i < results.length; i++) {
	    var p = results[i]

	    try {
	      var st = options.lstatSync(p)
	    } catch (er) {
	      if (er.code === "ENOENT")
	        return

	      // Windows can EPERM on stat.  Life is suffering.
	      if (er.code === "EPERM" && isWindows)
	        fixWinEPERMSync(p, options, er)
	    }

	    try {
	      // sunos lets the root user unlink directories, which is... weird.
	      if (st && st.isDirectory())
	        rmdirSync(p, options, null)
	      else
	        options.unlinkSync(p)
	    } catch (er) {
	      if (er.code === "ENOENT")
	        return
	      if (er.code === "EPERM")
	        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
	      if (er.code !== "EISDIR")
	        throw er
	      rmdirSync(p, options, er)
	    }
	  }
	}

	function rmdirSync (p, options, originalEr) {
	  assert(p)
	  assert(options)
	  if (originalEr)
	    assert(originalEr instanceof Error)

	  try {
	    options.rmdirSync(p)
	  } catch (er) {
	    if (er.code === "ENOENT")
	      return
	    if (er.code === "ENOTDIR")
	      throw originalEr
	    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
	      rmkidsSync(p, options)
	  }
	}

	function rmkidsSync (p, options) {
	  assert(p)
	  assert(options)
	  options.readdirSync(p).forEach(function (f) {
	    rimrafSync(path.join(p, f), options)
	  })
	  options.rmdirSync(p, options)
	}


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// Approach:
	//
	// 1. Get the minimatch set
	// 2. For each pattern in the set, PROCESS(pattern, false)
	// 3. Store matches per-set, then uniq them
	//
	// PROCESS(pattern, inGlobStar)
	// Get the first [n] items from pattern that are all strings
	// Join these together.  This is PREFIX.
	//   If there is no more remaining, then stat(PREFIX) and
	//   add to matches if it succeeds.  END.
	//
	// If inGlobStar and PREFIX is symlink and points to dir
	//   set ENTRIES = []
	// else readdir(PREFIX) as ENTRIES
	//   If fail, END
	//
	// with ENTRIES
	//   If pattern[n] is GLOBSTAR
	//     // handle the case where the globstar match is empty
	//     // by pruning it out, and testing the resulting pattern
	//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
	//     // handle other cases.
	//     for ENTRY in ENTRIES (not dotfiles)
	//       // attach globstar + tail onto the entry
	//       // Mark that this entry is a globstar match
	//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
	//
	//   else // not globstar
	//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
	//       Test ENTRY against pattern[n]
	//       If fails, continue
	//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
	//
	// Caveat:
	//   Cache all stats and readdirs results to minimize syscall.  Since all
	//   we ever care about is existence and directory-ness, we can just keep
	//   `true` for files, and [children,...] for directories, or `false` for
	//   things that don't exist.

	module.exports = glob

	var fs = __webpack_require__(8)
	var rp = __webpack_require__(70)
	var minimatch = __webpack_require__(72)
	var Minimatch = minimatch.Minimatch
	var inherits = __webpack_require__(56)
	var EE = __webpack_require__(76).EventEmitter
	var path = __webpack_require__(18)
	var assert = __webpack_require__(15)
	var isAbsolute = __webpack_require__(77)
	var globSync = __webpack_require__(78)
	var common = __webpack_require__(79)
	var alphasort = common.alphasort
	var alphasorti = common.alphasorti
	var setopts = common.setopts
	var ownProp = common.ownProp
	var inflight = __webpack_require__(80)
	var util = __webpack_require__(14)
	var childrenIgnored = common.childrenIgnored
	var isIgnored = common.isIgnored

	var once = __webpack_require__(82)

	function glob (pattern, options, cb) {
	  if (typeof options === 'function') cb = options, options = {}
	  if (!options) options = {}

	  if (options.sync) {
	    if (cb)
	      throw new TypeError('callback provided to sync glob')
	    return globSync(pattern, options)
	  }

	  return new Glob(pattern, options, cb)
	}

	glob.sync = globSync
	var GlobSync = glob.GlobSync = globSync.GlobSync

	// old api surface
	glob.glob = glob

	function extend (origin, add) {
	  if (add === null || typeof add !== 'object') {
	    return origin
	  }

	  var keys = Object.keys(add)
	  var i = keys.length
	  while (i--) {
	    origin[keys[i]] = add[keys[i]]
	  }
	  return origin
	}

	glob.hasMagic = function (pattern, options_) {
	  var options = extend({}, options_)
	  options.noprocess = true

	  var g = new Glob(pattern, options)
	  var set = g.minimatch.set

	  if (!pattern)
	    return false

	  if (set.length > 1)
	    return true

	  for (var j = 0; j < set[0].length; j++) {
	    if (typeof set[0][j] !== 'string')
	      return true
	  }

	  return false
	}

	glob.Glob = Glob
	inherits(Glob, EE)
	function Glob (pattern, options, cb) {
	  if (typeof options === 'function') {
	    cb = options
	    options = null
	  }

	  if (options && options.sync) {
	    if (cb)
	      throw new TypeError('callback provided to sync glob')
	    return new GlobSync(pattern, options)
	  }

	  if (!(this instanceof Glob))
	    return new Glob(pattern, options, cb)

	  setopts(this, pattern, options)
	  this._didRealPath = false

	  // process each pattern in the minimatch set
	  var n = this.minimatch.set.length

	  // The matches are stored as {<filename>: true,...} so that
	  // duplicates are automagically pruned.
	  // Later, we do an Object.keys() on these.
	  // Keep them as a list so we can fill in when nonull is set.
	  this.matches = new Array(n)

	  if (typeof cb === 'function') {
	    cb = once(cb)
	    this.on('error', cb)
	    this.on('end', function (matches) {
	      cb(null, matches)
	    })
	  }

	  var self = this
	  var n = this.minimatch.set.length
	  this._processing = 0
	  this.matches = new Array(n)

	  this._emitQueue = []
	  this._processQueue = []
	  this.paused = false

	  if (this.noprocess)
	    return this

	  if (n === 0)
	    return done()

	  var sync = true
	  for (var i = 0; i < n; i ++) {
	    this._process(this.minimatch.set[i], i, false, done)
	  }
	  sync = false

	  function done () {
	    --self._processing
	    if (self._processing <= 0) {
	      if (sync) {
	        process.nextTick(function () {
	          self._finish()
	        })
	      } else {
	        self._finish()
	      }
	    }
	  }
	}

	Glob.prototype._finish = function () {
	  assert(this instanceof Glob)
	  if (this.aborted)
	    return

	  if (this.realpath && !this._didRealpath)
	    return this._realpath()

	  common.finish(this)
	  this.emit('end', this.found)
	}

	Glob.prototype._realpath = function () {
	  if (this._didRealpath)
	    return

	  this._didRealpath = true

	  var n = this.matches.length
	  if (n === 0)
	    return this._finish()

	  var self = this
	  for (var i = 0; i < this.matches.length; i++)
	    this._realpathSet(i, next)

	  function next () {
	    if (--n === 0)
	      self._finish()
	  }
	}

	Glob.prototype._realpathSet = function (index, cb) {
	  var matchset = this.matches[index]
	  if (!matchset)
	    return cb()

	  var found = Object.keys(matchset)
	  var self = this
	  var n = found.length

	  if (n === 0)
	    return cb()

	  var set = this.matches[index] = Object.create(null)
	  found.forEach(function (p, i) {
	    // If there's a problem with the stat, then it means that
	    // one or more of the links in the realpath couldn't be
	    // resolved.  just return the abs value in that case.
	    p = self._makeAbs(p)
	    rp.realpath(p, self.realpathCache, function (er, real) {
	      if (!er)
	        set[real] = true
	      else if (er.syscall === 'stat')
	        set[p] = true
	      else
	        self.emit('error', er) // srsly wtf right here

	      if (--n === 0) {
	        self.matches[index] = set
	        cb()
	      }
	    })
	  })
	}

	Glob.prototype._mark = function (p) {
	  return common.mark(this, p)
	}

	Glob.prototype._makeAbs = function (f) {
	  return common.makeAbs(this, f)
	}

	Glob.prototype.abort = function () {
	  this.aborted = true
	  this.emit('abort')
	}

	Glob.prototype.pause = function () {
	  if (!this.paused) {
	    this.paused = true
	    this.emit('pause')
	  }
	}

	Glob.prototype.resume = function () {
	  if (this.paused) {
	    this.emit('resume')
	    this.paused = false
	    if (this._emitQueue.length) {
	      var eq = this._emitQueue.slice(0)
	      this._emitQueue.length = 0
	      for (var i = 0; i < eq.length; i ++) {
	        var e = eq[i]
	        this._emitMatch(e[0], e[1])
	      }
	    }
	    if (this._processQueue.length) {
	      var pq = this._processQueue.slice(0)
	      this._processQueue.length = 0
	      for (var i = 0; i < pq.length; i ++) {
	        var p = pq[i]
	        this._processing--
	        this._process(p[0], p[1], p[2], p[3])
	      }
	    }
	  }
	}

	Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
	  assert(this instanceof Glob)
	  assert(typeof cb === 'function')

	  if (this.aborted)
	    return

	  this._processing++
	  if (this.paused) {
	    this._processQueue.push([pattern, index, inGlobStar, cb])
	    return
	  }

	  //console.error('PROCESS %d', this._processing, pattern)

	  // Get the first [n] parts of pattern that are all strings.
	  var n = 0
	  while (typeof pattern[n] === 'string') {
	    n ++
	  }
	  // now n is the index of the first one that is *not* a string.

	  // see if there's anything else
	  var prefix
	  switch (n) {
	    // if not, then this is rather simple
	    case pattern.length:
	      this._processSimple(pattern.join('/'), index, cb)
	      return

	    case 0:
	      // pattern *starts* with some non-trivial item.
	      // going to readdir(cwd), but not include the prefix in matches.
	      prefix = null
	      break

	    default:
	      // pattern has some string bits in the front.
	      // whatever it starts with, whether that's 'absolute' like /foo/bar,
	      // or 'relative' like '../baz'
	      prefix = pattern.slice(0, n).join('/')
	      break
	  }

	  var remain = pattern.slice(n)

	  // get the list of entries.
	  var read
	  if (prefix === null)
	    read = '.'
	  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
	    if (!prefix || !isAbsolute(prefix))
	      prefix = '/' + prefix
	    read = prefix
	  } else
	    read = prefix

	  var abs = this._makeAbs(read)

	  //if ignored, skip _processing
	  if (childrenIgnored(this, read))
	    return cb()

	  var isGlobStar = remain[0] === minimatch.GLOBSTAR
	  if (isGlobStar)
	    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)
	  else
	    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)
	}

	Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
	  var self = this
	  this._readdir(abs, inGlobStar, function (er, entries) {
	    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
	  })
	}

	Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

	  // if the abs isn't a dir, then nothing can match!
	  if (!entries)
	    return cb()

	  // It will only match dot entries if it starts with a dot, or if
	  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
	  var pn = remain[0]
	  var negate = !!this.minimatch.negate
	  var rawGlob = pn._glob
	  var dotOk = this.dot || rawGlob.charAt(0) === '.'

	  var matchedEntries = []
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i]
	    if (e.charAt(0) !== '.' || dotOk) {
	      var m
	      if (negate && !prefix) {
	        m = !e.match(pn)
	      } else {
	        m = e.match(pn)
	      }
	      if (m)
	        matchedEntries.push(e)
	    }
	  }

	  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

	  var len = matchedEntries.length
	  // If there are no matched entries, then nothing matches.
	  if (len === 0)
	    return cb()

	  // if this is the last remaining pattern bit, then no need for
	  // an additional stat *unless* the user has specified mark or
	  // stat explicitly.  We know they exist, since readdir returned
	  // them.

	  if (remain.length === 1 && !this.mark && !this.stat) {
	    if (!this.matches[index])
	      this.matches[index] = Object.create(null)

	    for (var i = 0; i < len; i ++) {
	      var e = matchedEntries[i]
	      if (prefix) {
	        if (prefix !== '/')
	          e = prefix + '/' + e
	        else
	          e = prefix + e
	      }

	      if (e.charAt(0) === '/' && !this.nomount) {
	        e = path.join(this.root, e)
	      }
	      this._emitMatch(index, e)
	    }
	    // This was the last one, and no stats were needed
	    return cb()
	  }

	  // now test all matched entries as stand-ins for that part
	  // of the pattern.
	  remain.shift()
	  for (var i = 0; i < len; i ++) {
	    var e = matchedEntries[i]
	    var newPattern
	    if (prefix) {
	      if (prefix !== '/')
	        e = prefix + '/' + e
	      else
	        e = prefix + e
	    }
	    this._process([e].concat(remain), index, inGlobStar, cb)
	  }
	  cb()
	}

	Glob.prototype._emitMatch = function (index, e) {
	  if (this.aborted)
	    return

	  if (isIgnored(this, e))
	    return

	  if (this.paused) {
	    this._emitQueue.push([index, e])
	    return
	  }

	  var abs = isAbsolute(e) ? e : this._makeAbs(e)

	  if (this.mark)
	    e = this._mark(e)

	  if (this.absolute)
	    e = abs

	  if (this.matches[index][e])
	    return

	  if (this.nodir) {
	    var c = this.cache[abs]
	    if (c === 'DIR' || Array.isArray(c))
	      return
	  }

	  this.matches[index][e] = true

	  var st = this.statCache[abs]
	  if (st)
	    this.emit('stat', e, st)

	  this.emit('match', e)
	}

	Glob.prototype._readdirInGlobStar = function (abs, cb) {
	  if (this.aborted)
	    return

	  // follow all symlinked directories forever
	  // just proceed as if this is a non-globstar situation
	  if (this.follow)
	    return this._readdir(abs, false, cb)

	  var lstatkey = 'lstat\0' + abs
	  var self = this
	  var lstatcb = inflight(lstatkey, lstatcb_)

	  if (lstatcb)
	    fs.lstat(abs, lstatcb)

	  function lstatcb_ (er, lstat) {
	    if (er && er.code === 'ENOENT')
	      return cb()

	    var isSym = lstat && lstat.isSymbolicLink()
	    self.symlinks[abs] = isSym

	    // If it's not a symlink or a dir, then it's definitely a regular file.
	    // don't bother doing a readdir in that case.
	    if (!isSym && lstat && !lstat.isDirectory()) {
	      self.cache[abs] = 'FILE'
	      cb()
	    } else
	      self._readdir(abs, false, cb)
	  }
	}

	Glob.prototype._readdir = function (abs, inGlobStar, cb) {
	  if (this.aborted)
	    return

	  cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb)
	  if (!cb)
	    return

	  //console.error('RD %j %j', +inGlobStar, abs)
	  if (inGlobStar && !ownProp(this.symlinks, abs))
	    return this._readdirInGlobStar(abs, cb)

	  if (ownProp(this.cache, abs)) {
	    var c = this.cache[abs]
	    if (!c || c === 'FILE')
	      return cb()

	    if (Array.isArray(c))
	      return cb(null, c)
	  }

	  var self = this
	  fs.readdir(abs, readdirCb(this, abs, cb))
	}

	function readdirCb (self, abs, cb) {
	  return function (er, entries) {
	    if (er)
	      self._readdirError(abs, er, cb)
	    else
	      self._readdirEntries(abs, entries, cb)
	  }
	}

	Glob.prototype._readdirEntries = function (abs, entries, cb) {
	  if (this.aborted)
	    return

	  // if we haven't asked to stat everything, then just
	  // assume that everything in there exists, so we can avoid
	  // having to stat it a second time.
	  if (!this.mark && !this.stat) {
	    for (var i = 0; i < entries.length; i ++) {
	      var e = entries[i]
	      if (abs === '/')
	        e = abs + e
	      else
	        e = abs + '/' + e
	      this.cache[e] = true
	    }
	  }

	  this.cache[abs] = entries
	  return cb(null, entries)
	}

	Glob.prototype._readdirError = function (f, er, cb) {
	  if (this.aborted)
	    return

	  // handle errors, and cache the information
	  switch (er.code) {
	    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
	    case 'ENOTDIR': // totally normal. means it *does* exist.
	      var abs = this._makeAbs(f)
	      this.cache[abs] = 'FILE'
	      if (abs === this.cwdAbs) {
	        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
	        error.path = this.cwd
	        error.code = er.code
	        this.emit('error', error)
	        this.abort()
	      }
	      break

	    case 'ENOENT': // not terribly unusual
	    case 'ELOOP':
	    case 'ENAMETOOLONG':
	    case 'UNKNOWN':
	      this.cache[this._makeAbs(f)] = false
	      break

	    default: // some unusual error.  Treat as failure.
	      this.cache[this._makeAbs(f)] = false
	      if (this.strict) {
	        this.emit('error', er)
	        // If the error is handled, then we abort
	        // if not, we threw out of here
	        this.abort()
	      }
	      if (!this.silent)
	        console.error('glob error', er)
	      break
	  }

	  return cb()
	}

	Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
	  var self = this
	  this._readdir(abs, inGlobStar, function (er, entries) {
	    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
	  })
	}


	Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
	  //console.error('pgs2', prefix, remain[0], entries)

	  // no entries means not a dir, so it can never have matches
	  // foo.txt/** doesn't match foo.txt
	  if (!entries)
	    return cb()

	  // test without the globstar, and with every child both below
	  // and replacing the globstar.
	  var remainWithoutGlobStar = remain.slice(1)
	  var gspref = prefix ? [ prefix ] : []
	  var noGlobStar = gspref.concat(remainWithoutGlobStar)

	  // the noGlobStar pattern exits the inGlobStar state
	  this._process(noGlobStar, index, false, cb)

	  var isSym = this.symlinks[abs]
	  var len = entries.length

	  // If it's a symlink, and we're in a globstar, then stop
	  if (isSym && inGlobStar)
	    return cb()

	  for (var i = 0; i < len; i++) {
	    var e = entries[i]
	    if (e.charAt(0) === '.' && !this.dot)
	      continue

	    // these two cases enter the inGlobStar state
	    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
	    this._process(instead, index, true, cb)

	    var below = gspref.concat(entries[i], remain)
	    this._process(below, index, true, cb)
	  }

	  cb()
	}

	Glob.prototype._processSimple = function (prefix, index, cb) {
	  // XXX review this.  Shouldn't it be doing the mounting etc
	  // before doing stat?  kinda weird?
	  var self = this
	  this._stat(prefix, function (er, exists) {
	    self._processSimple2(prefix, index, er, exists, cb)
	  })
	}
	Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

	  //console.error('ps2', prefix, exists)

	  if (!this.matches[index])
	    this.matches[index] = Object.create(null)

	  // If it doesn't exist, then just mark the lack of results
	  if (!exists)
	    return cb()

	  if (prefix && isAbsolute(prefix) && !this.nomount) {
	    var trail = /[\/\\]$/.test(prefix)
	    if (prefix.charAt(0) === '/') {
	      prefix = path.join(this.root, prefix)
	    } else {
	      prefix = path.resolve(this.root, prefix)
	      if (trail)
	        prefix += '/'
	    }
	  }

	  if (process.platform === 'win32')
	    prefix = prefix.replace(/\\/g, '/')

	  // Mark this as a match
	  this._emitMatch(index, prefix)
	  cb()
	}

	// Returns either 'DIR', 'FILE', or false
	Glob.prototype._stat = function (f, cb) {
	  var abs = this._makeAbs(f)
	  var needDir = f.slice(-1) === '/'

	  if (f.length > this.maxLength)
	    return cb()

	  if (!this.stat && ownProp(this.cache, abs)) {
	    var c = this.cache[abs]

	    if (Array.isArray(c))
	      c = 'DIR'

	    // It exists, but maybe not how we need it
	    if (!needDir || c === 'DIR')
	      return cb(null, c)

	    if (needDir && c === 'FILE')
	      return cb()

	    // otherwise we have to stat, because maybe c=true
	    // if we know it exists, but not what it is.
	  }

	  var exists
	  var stat = this.statCache[abs]
	  if (stat !== undefined) {
	    if (stat === false)
	      return cb(null, stat)
	    else {
	      var type = stat.isDirectory() ? 'DIR' : 'FILE'
	      if (needDir && type === 'FILE')
	        return cb()
	      else
	        return cb(null, type, stat)
	    }
	  }

	  var self = this
	  var statcb = inflight('stat\0' + abs, lstatcb_)
	  if (statcb)
	    fs.lstat(abs, statcb)

	  function lstatcb_ (er, lstat) {
	    if (lstat && lstat.isSymbolicLink()) {
	      // If it's a symlink, then treat it as the target, unless
	      // the target does not exist, then treat it as a file.
	      return fs.stat(abs, function (er, stat) {
	        if (er)
	          self._stat2(f, abs, null, lstat, cb)
	        else
	          self._stat2(f, abs, er, stat, cb)
	      })
	    } else {
	      self._stat2(f, abs, er, lstat, cb)
	    }
	  }
	}

	Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
	  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
	    this.statCache[abs] = false
	    return cb()
	  }

	  var needDir = f.slice(-1) === '/'
	  this.statCache[abs] = stat

	  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
	    return cb(null, false, stat)

	  var c = true
	  if (stat)
	    c = stat.isDirectory() ? 'DIR' : 'FILE'
	  this.cache[abs] = this.cache[abs] || c

	  if (needDir && c === 'FILE')
	    return cb()

	  return cb(null, c, stat)
	}


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = realpath
	realpath.realpath = realpath
	realpath.sync = realpathSync
	realpath.realpathSync = realpathSync
	realpath.monkeypatch = monkeypatch
	realpath.unmonkeypatch = unmonkeypatch

	var fs = __webpack_require__(8)
	var origRealpath = fs.realpath
	var origRealpathSync = fs.realpathSync

	var version = process.version
	var ok = /^v[0-5]\./.test(version)
	var old = __webpack_require__(71)

	function newError (er) {
	  return er && er.syscall === 'realpath' && (
	    er.code === 'ELOOP' ||
	    er.code === 'ENOMEM' ||
	    er.code === 'ENAMETOOLONG'
	  )
	}

	function realpath (p, cache, cb) {
	  if (ok) {
	    return origRealpath(p, cache, cb)
	  }

	  if (typeof cache === 'function') {
	    cb = cache
	    cache = null
	  }
	  origRealpath(p, cache, function (er, result) {
	    if (newError(er)) {
	      old.realpath(p, cache, cb)
	    } else {
	      cb(er, result)
	    }
	  })
	}

	function realpathSync (p, cache) {
	  if (ok) {
	    return origRealpathSync(p, cache)
	  }

	  try {
	    return origRealpathSync(p, cache)
	  } catch (er) {
	    if (newError(er)) {
	      return old.realpathSync(p, cache)
	    } else {
	      throw er
	    }
	  }
	}

	function monkeypatch () {
	  fs.realpath = realpath
	  fs.realpathSync = realpathSync
	}

	function unmonkeypatch () {
	  fs.realpath = origRealpath
	  fs.realpathSync = origRealpathSync
	}


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var pathModule = __webpack_require__(18);
	var isWindows = process.platform === 'win32';
	var fs = __webpack_require__(8);

	// JavaScript implementation of realpath, ported from node pre-v6

	var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);

	function rethrow() {
	  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
	  // is fairly slow to generate.
	  var callback;
	  if (DEBUG) {
	    var backtrace = new Error;
	    callback = debugCallback;
	  } else
	    callback = missingCallback;

	  return callback;

	  function debugCallback(err) {
	    if (err) {
	      backtrace.message = err.message;
	      err = backtrace;
	      missingCallback(err);
	    }
	  }

	  function missingCallback(err) {
	    if (err) {
	      if (process.throwDeprecation)
	        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs
	      else if (!process.noDeprecation) {
	        var msg = 'fs: missing callback ' + (err.stack || err.message);
	        if (process.traceDeprecation)
	          console.trace(msg);
	        else
	          console.error(msg);
	      }
	    }
	  }
	}

	function maybeCallback(cb) {
	  return typeof cb === 'function' ? cb : rethrow();
	}

	var normalize = pathModule.normalize;

	// Regexp that finds the next partion of a (partial) path
	// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
	if (isWindows) {
	  var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
	} else {
	  var nextPartRe = /(.*?)(?:[\/]+|$)/g;
	}

	// Regex to find the device root, including trailing slash. E.g. 'c:\\'.
	if (isWindows) {
	  var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
	} else {
	  var splitRootRe = /^[\/]*/;
	}

	exports.realpathSync = function realpathSync(p, cache) {
	  // make p is absolute
	  p = pathModule.resolve(p);

	  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
	    return cache[p];
	  }

	  var original = p,
	      seenLinks = {},
	      knownHard = {};

	  // current character position in p
	  var pos;
	  // the partial path so far, including a trailing slash if any
	  var current;
	  // the partial path without a trailing slash (except when pointing at a root)
	  var base;
	  // the partial path scanned in the previous round, with slash
	  var previous;

	  start();

	  function start() {
	    // Skip over roots
	    var m = splitRootRe.exec(p);
	    pos = m[0].length;
	    current = m[0];
	    base = m[0];
	    previous = '';

	    // On windows, check that the root exists. On unix there is no need.
	    if (isWindows && !knownHard[base]) {
	      fs.lstatSync(base);
	      knownHard[base] = true;
	    }
	  }

	  // walk down the path, swapping out linked pathparts for their real
	  // values
	  // NB: p.length changes.
	  while (pos < p.length) {
	    // find the next part
	    nextPartRe.lastIndex = pos;
	    var result = nextPartRe.exec(p);
	    previous = current;
	    current += result[0];
	    base = previous + result[1];
	    pos = nextPartRe.lastIndex;

	    // continue if not a symlink
	    if (knownHard[base] || (cache && cache[base] === base)) {
	      continue;
	    }

	    var resolvedLink;
	    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
	      // some known symbolic link.  no need to stat again.
	      resolvedLink = cache[base];
	    } else {
	      var stat = fs.lstatSync(base);
	      if (!stat.isSymbolicLink()) {
	        knownHard[base] = true;
	        if (cache) cache[base] = base;
	        continue;
	      }

	      // read the link if it wasn't read before
	      // dev/ino always return 0 on windows, so skip the check.
	      var linkTarget = null;
	      if (!isWindows) {
	        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
	        if (seenLinks.hasOwnProperty(id)) {
	          linkTarget = seenLinks[id];
	        }
	      }
	      if (linkTarget === null) {
	        fs.statSync(base);
	        linkTarget = fs.readlinkSync(base);
	      }
	      resolvedLink = pathModule.resolve(previous, linkTarget);
	      // track this, if given a cache.
	      if (cache) cache[base] = resolvedLink;
	      if (!isWindows) seenLinks[id] = linkTarget;
	    }

	    // resolve the link, then start over
	    p = pathModule.resolve(resolvedLink, p.slice(pos));
	    start();
	  }

	  if (cache) cache[original] = p;

	  return p;
	};


	exports.realpath = function realpath(p, cache, cb) {
	  if (typeof cb !== 'function') {
	    cb = maybeCallback(cache);
	    cache = null;
	  }

	  // make p is absolute
	  p = pathModule.resolve(p);

	  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
	    return process.nextTick(cb.bind(null, null, cache[p]));
	  }

	  var original = p,
	      seenLinks = {},
	      knownHard = {};

	  // current character position in p
	  var pos;
	  // the partial path so far, including a trailing slash if any
	  var current;
	  // the partial path without a trailing slash (except when pointing at a root)
	  var base;
	  // the partial path scanned in the previous round, with slash
	  var previous;

	  start();

	  function start() {
	    // Skip over roots
	    var m = splitRootRe.exec(p);
	    pos = m[0].length;
	    current = m[0];
	    base = m[0];
	    previous = '';

	    // On windows, check that the root exists. On unix there is no need.
	    if (isWindows && !knownHard[base]) {
	      fs.lstat(base, function(err) {
	        if (err) return cb(err);
	        knownHard[base] = true;
	        LOOP();
	      });
	    } else {
	      process.nextTick(LOOP);
	    }
	  }

	  // walk down the path, swapping out linked pathparts for their real
	  // values
	  function LOOP() {
	    // stop if scanned past end of path
	    if (pos >= p.length) {
	      if (cache) cache[original] = p;
	      return cb(null, p);
	    }

	    // find the next part
	    nextPartRe.lastIndex = pos;
	    var result = nextPartRe.exec(p);
	    previous = current;
	    current += result[0];
	    base = previous + result[1];
	    pos = nextPartRe.lastIndex;

	    // continue if not a symlink
	    if (knownHard[base] || (cache && cache[base] === base)) {
	      return process.nextTick(LOOP);
	    }

	    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
	      // known symbolic link.  no need to stat again.
	      return gotResolvedLink(cache[base]);
	    }

	    return fs.lstat(base, gotStat);
	  }

	  function gotStat(err, stat) {
	    if (err) return cb(err);

	    // if not a symlink, skip to the next path part
	    if (!stat.isSymbolicLink()) {
	      knownHard[base] = true;
	      if (cache) cache[base] = base;
	      return process.nextTick(LOOP);
	    }

	    // stat & read the link if not read before
	    // call gotTarget as soon as the link target is known
	    // dev/ino always return 0 on windows, so skip the check.
	    if (!isWindows) {
	      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
	      if (seenLinks.hasOwnProperty(id)) {
	        return gotTarget(null, seenLinks[id], base);
	      }
	    }
	    fs.stat(base, function(err) {
	      if (err) return cb(err);

	      fs.readlink(base, function(err, target) {
	        if (!isWindows) seenLinks[id] = target;
	        gotTarget(err, target);
	      });
	    });
	  }

	  function gotTarget(err, target, base) {
	    if (err) return cb(err);

	    var resolvedLink = pathModule.resolve(previous, target);
	    if (cache) cache[base] = resolvedLink;
	    gotResolvedLink(resolvedLink);
	  }

	  function gotResolvedLink(resolvedLink) {
	    // resolve the link, then start over
	    p = pathModule.resolve(resolvedLink, p.slice(pos));
	    start();
	  }
	};


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = minimatch
	minimatch.Minimatch = Minimatch

	var path = { sep: '/' }
	try {
	  path = __webpack_require__(18)
	} catch (er) {}

	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = __webpack_require__(73)

	var plTypes = {
	  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
	  '?': { open: '(?:', close: ')?' },
	  '+': { open: '(?:', close: ')+' },
	  '*': { open: '(?:', close: ')*' },
	  '@': { open: '(?:', close: ')' }
	}

	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'

	// * => any number of characters
	var star = qmark + '*?'

	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')

	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}

	// normalizes slashes.
	var slashSplit = /\/+/

	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}

	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}

	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch

	  var orig = minimatch

	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }

	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }

	  return m
	}

	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}

	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}

	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }

	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''

	  return new Minimatch(pattern, options).match(p)
	}

	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}
	  pattern = pattern.trim()

	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }

	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false

	  // make the set of regexps etc.
	  this.make()
	}

	Minimatch.prototype.debug = function () {}

	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return

	  var pattern = this.pattern
	  var options = this.options

	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }

	  // step 1: figure out negation, etc.
	  this.parseNegate()

	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()

	  if (options.debug) this.debug = console.error

	  this.debug(this.pattern, set)

	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })

	  this.debug(this.pattern, set)

	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)

	  this.debug(this.pattern, set)

	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })

	  this.debug(this.pattern, set)

	  this.set = set
	}

	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0

	  if (options.nonegate) return

	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }

	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}

	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}

	Minimatch.prototype.braceExpand = braceExpand

	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }

	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern

	  if (typeof pattern === 'undefined') {
	    throw new TypeError('undefined pattern')
	  }

	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }

	  return expand(pattern)
	}

	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  if (pattern.length > 1024 * 64) {
	    throw new TypeError('pattern is too long')
	  }

	  var options = this.options

	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''

	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this

	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }

	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)

	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }

	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false

	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue

	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }

	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue

	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }

	        if (!stateChar) {
	          re += '\\('
	          continue
	        }

	        patternListStack.push({
	          type: stateChar,
	          start: i - 1,
	          reStart: re.length,
	          open: plTypes[stateChar].open,
	          close: plTypes[stateChar].close
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue

	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }

	        clearStateChar()
	        hasMagic = true
	        var pl = patternListStack.pop()
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        re += pl.close
	        if (pl.type === '!') {
	          negativeLists.push(pl)
	        }
	        pl.reEnd = re.length
	      continue

	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }

	        clearStateChar()
	        re += '|'
	      continue

	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()

	        if (inClass) {
	          re += '\\' + c
	          continue
	        }

	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue

	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }

	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }

	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue

	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()

	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }

	        re += c

	    } // switch
	  } // for

	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }

	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + pl.open.length)
	    this.debug('setting tail', re, pl)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }

	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })

	    this.debug('tail=%j\n   %s', tail, tail, pl, re)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type

	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }

	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }

	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }

	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]

	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)

	    nlLast += nlAfter

	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter

	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }

	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }

	  if (addPatternStart) {
	    re = patternStart + re
	  }

	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }

	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }

	  var flags = options.nocase ? 'i' : ''
	  try {
	    var regExp = new RegExp('^' + re + '$', flags)
	  } catch (er) {
	    // If it was an invalid regular expression, then it can't match
	    // anything.  This trick looks for a character after the end of
	    // the string, which is of course impossible, except in multi-line
	    // mode, but it's not a /m regex.
	    return new RegExp('$.')
	  }

	  regExp._glob = pattern
	  regExp._src = re

	  return regExp
	}

	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}

	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp

	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set

	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options

	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''

	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')

	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'

	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'

	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}

	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}

	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''

	  if (f === '/' && partial) return true

	  var options = this.options

	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }

	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)

	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.

	  var set = this.set
	  this.debug(this.pattern, 'set', set)

	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }

	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }

	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}

	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options

	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })

	  this.debug('matchOne', file.length, pattern.length)

	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]

	    this.debug(pattern, p, f)

	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false

	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])

	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }

	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]

	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }

	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }

	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }

	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }

	    if (!hit) return false
	  }

	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*

	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }

	  // should be unreachable.
	  throw new Error('wtf?')
	}

	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}

	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var concatMap = __webpack_require__(74);
	var balanced = __webpack_require__(75);

	module.exports = expandTop;

	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';

	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}

	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}

	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}


	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];

	  var parts = [];
	  var m = balanced('{', '}', str);

	  if (!m)
	    return str.split(',');

	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');

	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }

	  parts.push.apply(parts, p);

	  return parts;
	}

	function expandTop(str) {
	  if (!str)
	    return [];

	  // I don't know why Bash 4.3 does this, but it does.
	  // Anything starting with {} will have the first two bytes preserved
	  // but *only* at the top level, so {},a}b will not expand to anything,
	  // but a{},b}c will be expanded to [a}c,abc].
	  // One could argue that this is a bug in Bash, but since the goal of
	  // this module is to match Bash's rules, we escape a leading {}
	  if (str.substr(0, 2) === '{}') {
	    str = '\\{\\}' + str.substr(2);
	  }

	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}

	function identity(e) {
	  return e;
	}

	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}

	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}

	function expand(str, isTop) {
	  var expansions = [];

	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];

	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = /^(.*,)+(.+)?$/.test(m.body);
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*\}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }

	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }

	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.

	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];

	  var N;

	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);

	    N = [];

	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }

	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }

	  return expansions;
	}



/***/ },
/* 74 */
/***/ function(module, exports) {

	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 75 */
/***/ function(module, exports) {

	module.exports = balanced;
	function balanced(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch(a, str);
	  if (b instanceof RegExp) b = maybeMatch(b, str);

	  var r = range(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	function maybeMatch(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}

	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}


/***/ },
/* 76 */
/***/ function(module, exports) {

	module.exports = require("events");

/***/ },
/* 77 */
/***/ function(module, exports) {

	'use strict';

	function posix(path) {
		return path.charAt(0) === '/';
	}

	function win32(path) {
		// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = Boolean(device && device.charAt(1) !== ':');

		// UNC paths are always absolute
		return Boolean(result[2] || isUnc);
	}

	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = globSync
	globSync.GlobSync = GlobSync

	var fs = __webpack_require__(8)
	var rp = __webpack_require__(70)
	var minimatch = __webpack_require__(72)
	var Minimatch = minimatch.Minimatch
	var Glob = __webpack_require__(69).Glob
	var util = __webpack_require__(14)
	var path = __webpack_require__(18)
	var assert = __webpack_require__(15)
	var isAbsolute = __webpack_require__(77)
	var common = __webpack_require__(79)
	var alphasort = common.alphasort
	var alphasorti = common.alphasorti
	var setopts = common.setopts
	var ownProp = common.ownProp
	var childrenIgnored = common.childrenIgnored
	var isIgnored = common.isIgnored

	function globSync (pattern, options) {
	  if (typeof options === 'function' || arguments.length === 3)
	    throw new TypeError('callback provided to sync glob\n'+
	                        'See: https://github.com/isaacs/node-glob/issues/167')

	  return new GlobSync(pattern, options).found
	}

	function GlobSync (pattern, options) {
	  if (!pattern)
	    throw new Error('must provide pattern')

	  if (typeof options === 'function' || arguments.length === 3)
	    throw new TypeError('callback provided to sync glob\n'+
	                        'See: https://github.com/isaacs/node-glob/issues/167')

	  if (!(this instanceof GlobSync))
	    return new GlobSync(pattern, options)

	  setopts(this, pattern, options)

	  if (this.noprocess)
	    return this

	  var n = this.minimatch.set.length
	  this.matches = new Array(n)
	  for (var i = 0; i < n; i ++) {
	    this._process(this.minimatch.set[i], i, false)
	  }
	  this._finish()
	}

	GlobSync.prototype._finish = function () {
	  assert(this instanceof GlobSync)
	  if (this.realpath) {
	    var self = this
	    this.matches.forEach(function (matchset, index) {
	      var set = self.matches[index] = Object.create(null)
	      for (var p in matchset) {
	        try {
	          p = self._makeAbs(p)
	          var real = rp.realpathSync(p, self.realpathCache)
	          set[real] = true
	        } catch (er) {
	          if (er.syscall === 'stat')
	            set[self._makeAbs(p)] = true
	          else
	            throw er
	        }
	      }
	    })
	  }
	  common.finish(this)
	}


	GlobSync.prototype._process = function (pattern, index, inGlobStar) {
	  assert(this instanceof GlobSync)

	  // Get the first [n] parts of pattern that are all strings.
	  var n = 0
	  while (typeof pattern[n] === 'string') {
	    n ++
	  }
	  // now n is the index of the first one that is *not* a string.

	  // See if there's anything else
	  var prefix
	  switch (n) {
	    // if not, then this is rather simple
	    case pattern.length:
	      this._processSimple(pattern.join('/'), index)
	      return

	    case 0:
	      // pattern *starts* with some non-trivial item.
	      // going to readdir(cwd), but not include the prefix in matches.
	      prefix = null
	      break

	    default:
	      // pattern has some string bits in the front.
	      // whatever it starts with, whether that's 'absolute' like /foo/bar,
	      // or 'relative' like '../baz'
	      prefix = pattern.slice(0, n).join('/')
	      break
	  }

	  var remain = pattern.slice(n)

	  // get the list of entries.
	  var read
	  if (prefix === null)
	    read = '.'
	  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
	    if (!prefix || !isAbsolute(prefix))
	      prefix = '/' + prefix
	    read = prefix
	  } else
	    read = prefix

	  var abs = this._makeAbs(read)

	  //if ignored, skip processing
	  if (childrenIgnored(this, read))
	    return

	  var isGlobStar = remain[0] === minimatch.GLOBSTAR
	  if (isGlobStar)
	    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)
	  else
	    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)
	}


	GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
	  var entries = this._readdir(abs, inGlobStar)

	  // if the abs isn't a dir, then nothing can match!
	  if (!entries)
	    return

	  // It will only match dot entries if it starts with a dot, or if
	  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
	  var pn = remain[0]
	  var negate = !!this.minimatch.negate
	  var rawGlob = pn._glob
	  var dotOk = this.dot || rawGlob.charAt(0) === '.'

	  var matchedEntries = []
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i]
	    if (e.charAt(0) !== '.' || dotOk) {
	      var m
	      if (negate && !prefix) {
	        m = !e.match(pn)
	      } else {
	        m = e.match(pn)
	      }
	      if (m)
	        matchedEntries.push(e)
	    }
	  }

	  var len = matchedEntries.length
	  // If there are no matched entries, then nothing matches.
	  if (len === 0)
	    return

	  // if this is the last remaining pattern bit, then no need for
	  // an additional stat *unless* the user has specified mark or
	  // stat explicitly.  We know they exist, since readdir returned
	  // them.

	  if (remain.length === 1 && !this.mark && !this.stat) {
	    if (!this.matches[index])
	      this.matches[index] = Object.create(null)

	    for (var i = 0; i < len; i ++) {
	      var e = matchedEntries[i]
	      if (prefix) {
	        if (prefix.slice(-1) !== '/')
	          e = prefix + '/' + e
	        else
	          e = prefix + e
	      }

	      if (e.charAt(0) === '/' && !this.nomount) {
	        e = path.join(this.root, e)
	      }
	      this._emitMatch(index, e)
	    }
	    // This was the last one, and no stats were needed
	    return
	  }

	  // now test all matched entries as stand-ins for that part
	  // of the pattern.
	  remain.shift()
	  for (var i = 0; i < len; i ++) {
	    var e = matchedEntries[i]
	    var newPattern
	    if (prefix)
	      newPattern = [prefix, e]
	    else
	      newPattern = [e]
	    this._process(newPattern.concat(remain), index, inGlobStar)
	  }
	}


	GlobSync.prototype._emitMatch = function (index, e) {
	  if (isIgnored(this, e))
	    return

	  var abs = this._makeAbs(e)

	  if (this.mark)
	    e = this._mark(e)

	  if (this.absolute) {
	    e = abs
	  }

	  if (this.matches[index][e])
	    return

	  if (this.nodir) {
	    var c = this.cache[abs]
	    if (c === 'DIR' || Array.isArray(c))
	      return
	  }

	  this.matches[index][e] = true

	  if (this.stat)
	    this._stat(e)
	}


	GlobSync.prototype._readdirInGlobStar = function (abs) {
	  // follow all symlinked directories forever
	  // just proceed as if this is a non-globstar situation
	  if (this.follow)
	    return this._readdir(abs, false)

	  var entries
	  var lstat
	  var stat
	  try {
	    lstat = fs.lstatSync(abs)
	  } catch (er) {
	    if (er.code === 'ENOENT') {
	      // lstat failed, doesn't exist
	      return null
	    }
	  }

	  var isSym = lstat && lstat.isSymbolicLink()
	  this.symlinks[abs] = isSym

	  // If it's not a symlink or a dir, then it's definitely a regular file.
	  // don't bother doing a readdir in that case.
	  if (!isSym && lstat && !lstat.isDirectory())
	    this.cache[abs] = 'FILE'
	  else
	    entries = this._readdir(abs, false)

	  return entries
	}

	GlobSync.prototype._readdir = function (abs, inGlobStar) {
	  var entries

	  if (inGlobStar && !ownProp(this.symlinks, abs))
	    return this._readdirInGlobStar(abs)

	  if (ownProp(this.cache, abs)) {
	    var c = this.cache[abs]
	    if (!c || c === 'FILE')
	      return null

	    if (Array.isArray(c))
	      return c
	  }

	  try {
	    return this._readdirEntries(abs, fs.readdirSync(abs))
	  } catch (er) {
	    this._readdirError(abs, er)
	    return null
	  }
	}

	GlobSync.prototype._readdirEntries = function (abs, entries) {
	  // if we haven't asked to stat everything, then just
	  // assume that everything in there exists, so we can avoid
	  // having to stat it a second time.
	  if (!this.mark && !this.stat) {
	    for (var i = 0; i < entries.length; i ++) {
	      var e = entries[i]
	      if (abs === '/')
	        e = abs + e
	      else
	        e = abs + '/' + e
	      this.cache[e] = true
	    }
	  }

	  this.cache[abs] = entries

	  // mark and cache dir-ness
	  return entries
	}

	GlobSync.prototype._readdirError = function (f, er) {
	  // handle errors, and cache the information
	  switch (er.code) {
	    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
	    case 'ENOTDIR': // totally normal. means it *does* exist.
	      var abs = this._makeAbs(f)
	      this.cache[abs] = 'FILE'
	      if (abs === this.cwdAbs) {
	        var error = new Error(er.code + ' invalid cwd ' + this.cwd)
	        error.path = this.cwd
	        error.code = er.code
	        throw error
	      }
	      break

	    case 'ENOENT': // not terribly unusual
	    case 'ELOOP':
	    case 'ENAMETOOLONG':
	    case 'UNKNOWN':
	      this.cache[this._makeAbs(f)] = false
	      break

	    default: // some unusual error.  Treat as failure.
	      this.cache[this._makeAbs(f)] = false
	      if (this.strict)
	        throw er
	      if (!this.silent)
	        console.error('glob error', er)
	      break
	  }
	}

	GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

	  var entries = this._readdir(abs, inGlobStar)

	  // no entries means not a dir, so it can never have matches
	  // foo.txt/** doesn't match foo.txt
	  if (!entries)
	    return

	  // test without the globstar, and with every child both below
	  // and replacing the globstar.
	  var remainWithoutGlobStar = remain.slice(1)
	  var gspref = prefix ? [ prefix ] : []
	  var noGlobStar = gspref.concat(remainWithoutGlobStar)

	  // the noGlobStar pattern exits the inGlobStar state
	  this._process(noGlobStar, index, false)

	  var len = entries.length
	  var isSym = this.symlinks[abs]

	  // If it's a symlink, and we're in a globstar, then stop
	  if (isSym && inGlobStar)
	    return

	  for (var i = 0; i < len; i++) {
	    var e = entries[i]
	    if (e.charAt(0) === '.' && !this.dot)
	      continue

	    // these two cases enter the inGlobStar state
	    var instead = gspref.concat(entries[i], remainWithoutGlobStar)
	    this._process(instead, index, true)

	    var below = gspref.concat(entries[i], remain)
	    this._process(below, index, true)
	  }
	}

	GlobSync.prototype._processSimple = function (prefix, index) {
	  // XXX review this.  Shouldn't it be doing the mounting etc
	  // before doing stat?  kinda weird?
	  var exists = this._stat(prefix)

	  if (!this.matches[index])
	    this.matches[index] = Object.create(null)

	  // If it doesn't exist, then just mark the lack of results
	  if (!exists)
	    return

	  if (prefix && isAbsolute(prefix) && !this.nomount) {
	    var trail = /[\/\\]$/.test(prefix)
	    if (prefix.charAt(0) === '/') {
	      prefix = path.join(this.root, prefix)
	    } else {
	      prefix = path.resolve(this.root, prefix)
	      if (trail)
	        prefix += '/'
	    }
	  }

	  if (process.platform === 'win32')
	    prefix = prefix.replace(/\\/g, '/')

	  // Mark this as a match
	  this._emitMatch(index, prefix)
	}

	// Returns either 'DIR', 'FILE', or false
	GlobSync.prototype._stat = function (f) {
	  var abs = this._makeAbs(f)
	  var needDir = f.slice(-1) === '/'

	  if (f.length > this.maxLength)
	    return false

	  if (!this.stat && ownProp(this.cache, abs)) {
	    var c = this.cache[abs]

	    if (Array.isArray(c))
	      c = 'DIR'

	    // It exists, but maybe not how we need it
	    if (!needDir || c === 'DIR')
	      return c

	    if (needDir && c === 'FILE')
	      return false

	    // otherwise we have to stat, because maybe c=true
	    // if we know it exists, but not what it is.
	  }

	  var exists
	  var stat = this.statCache[abs]
	  if (!stat) {
	    var lstat
	    try {
	      lstat = fs.lstatSync(abs)
	    } catch (er) {
	      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
	        this.statCache[abs] = false
	        return false
	      }
	    }

	    if (lstat && lstat.isSymbolicLink()) {
	      try {
	        stat = fs.statSync(abs)
	      } catch (er) {
	        stat = lstat
	      }
	    } else {
	      stat = lstat
	    }
	  }

	  this.statCache[abs] = stat

	  var c = true
	  if (stat)
	    c = stat.isDirectory() ? 'DIR' : 'FILE'

	  this.cache[abs] = this.cache[abs] || c

	  if (needDir && c === 'FILE')
	    return false

	  return c
	}

	GlobSync.prototype._mark = function (p) {
	  return common.mark(this, p)
	}

	GlobSync.prototype._makeAbs = function (f) {
	  return common.makeAbs(this, f)
	}


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	exports.alphasort = alphasort
	exports.alphasorti = alphasorti
	exports.setopts = setopts
	exports.ownProp = ownProp
	exports.makeAbs = makeAbs
	exports.finish = finish
	exports.mark = mark
	exports.isIgnored = isIgnored
	exports.childrenIgnored = childrenIgnored

	function ownProp (obj, field) {
	  return Object.prototype.hasOwnProperty.call(obj, field)
	}

	var path = __webpack_require__(18)
	var minimatch = __webpack_require__(72)
	var isAbsolute = __webpack_require__(77)
	var Minimatch = minimatch.Minimatch

	function alphasorti (a, b) {
	  return a.toLowerCase().localeCompare(b.toLowerCase())
	}

	function alphasort (a, b) {
	  return a.localeCompare(b)
	}

	function setupIgnores (self, options) {
	  self.ignore = options.ignore || []

	  if (!Array.isArray(self.ignore))
	    self.ignore = [self.ignore]

	  if (self.ignore.length) {
	    self.ignore = self.ignore.map(ignoreMap)
	  }
	}

	// ignore patterns are always in dot:true mode.
	function ignoreMap (pattern) {
	  var gmatcher = null
	  if (pattern.slice(-3) === '/**') {
	    var gpattern = pattern.replace(/(\/\*\*)+$/, '')
	    gmatcher = new Minimatch(gpattern, { dot: true })
	  }

	  return {
	    matcher: new Minimatch(pattern, { dot: true }),
	    gmatcher: gmatcher
	  }
	}

	function setopts (self, pattern, options) {
	  if (!options)
	    options = {}

	  // base-matching: just use globstar for that.
	  if (options.matchBase && -1 === pattern.indexOf("/")) {
	    if (options.noglobstar) {
	      throw new Error("base matching requires globstar")
	    }
	    pattern = "**/" + pattern
	  }

	  self.silent = !!options.silent
	  self.pattern = pattern
	  self.strict = options.strict !== false
	  self.realpath = !!options.realpath
	  self.realpathCache = options.realpathCache || Object.create(null)
	  self.follow = !!options.follow
	  self.dot = !!options.dot
	  self.mark = !!options.mark
	  self.nodir = !!options.nodir
	  if (self.nodir)
	    self.mark = true
	  self.sync = !!options.sync
	  self.nounique = !!options.nounique
	  self.nonull = !!options.nonull
	  self.nosort = !!options.nosort
	  self.nocase = !!options.nocase
	  self.stat = !!options.stat
	  self.noprocess = !!options.noprocess
	  self.absolute = !!options.absolute

	  self.maxLength = options.maxLength || Infinity
	  self.cache = options.cache || Object.create(null)
	  self.statCache = options.statCache || Object.create(null)
	  self.symlinks = options.symlinks || Object.create(null)

	  setupIgnores(self, options)

	  self.changedCwd = false
	  var cwd = process.cwd()
	  if (!ownProp(options, "cwd"))
	    self.cwd = cwd
	  else {
	    self.cwd = path.resolve(options.cwd)
	    self.changedCwd = self.cwd !== cwd
	  }

	  self.root = options.root || path.resolve(self.cwd, "/")
	  self.root = path.resolve(self.root)
	  if (process.platform === "win32")
	    self.root = self.root.replace(/\\/g, "/")

	  // TODO: is an absolute `cwd` supposed to be resolved against `root`?
	  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
	  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd)
	  if (process.platform === "win32")
	    self.cwdAbs = self.cwdAbs.replace(/\\/g, "/")
	  self.nomount = !!options.nomount

	  // disable comments and negation in Minimatch.
	  // Note that they are not supported in Glob itself anyway.
	  options.nonegate = true
	  options.nocomment = true

	  self.minimatch = new Minimatch(pattern, options)
	  self.options = self.minimatch.options
	}

	function finish (self) {
	  var nou = self.nounique
	  var all = nou ? [] : Object.create(null)

	  for (var i = 0, l = self.matches.length; i < l; i ++) {
	    var matches = self.matches[i]
	    if (!matches || Object.keys(matches).length === 0) {
	      if (self.nonull) {
	        // do like the shell, and spit out the literal glob
	        var literal = self.minimatch.globSet[i]
	        if (nou)
	          all.push(literal)
	        else
	          all[literal] = true
	      }
	    } else {
	      // had matches
	      var m = Object.keys(matches)
	      if (nou)
	        all.push.apply(all, m)
	      else
	        m.forEach(function (m) {
	          all[m] = true
	        })
	    }
	  }

	  if (!nou)
	    all = Object.keys(all)

	  if (!self.nosort)
	    all = all.sort(self.nocase ? alphasorti : alphasort)

	  // at *some* point we statted all of these
	  if (self.mark) {
	    for (var i = 0; i < all.length; i++) {
	      all[i] = self._mark(all[i])
	    }
	    if (self.nodir) {
	      all = all.filter(function (e) {
	        var notDir = !(/\/$/.test(e))
	        var c = self.cache[e] || self.cache[makeAbs(self, e)]
	        if (notDir && c)
	          notDir = c !== 'DIR' && !Array.isArray(c)
	        return notDir
	      })
	    }
	  }

	  if (self.ignore.length)
	    all = all.filter(function(m) {
	      return !isIgnored(self, m)
	    })

	  self.found = all
	}

	function mark (self, p) {
	  var abs = makeAbs(self, p)
	  var c = self.cache[abs]
	  var m = p
	  if (c) {
	    var isDir = c === 'DIR' || Array.isArray(c)
	    var slash = p.slice(-1) === '/'

	    if (isDir && !slash)
	      m += '/'
	    else if (!isDir && slash)
	      m = m.slice(0, -1)

	    if (m !== p) {
	      var mabs = makeAbs(self, m)
	      self.statCache[mabs] = self.statCache[abs]
	      self.cache[mabs] = self.cache[abs]
	    }
	  }

	  return m
	}

	// lotta situps...
	function makeAbs (self, f) {
	  var abs = f
	  if (f.charAt(0) === '/') {
	    abs = path.join(self.root, f)
	  } else if (isAbsolute(f) || f === '') {
	    abs = f
	  } else if (self.changedCwd) {
	    abs = path.resolve(self.cwd, f)
	  } else {
	    abs = path.resolve(f)
	  }

	  if (process.platform === 'win32')
	    abs = abs.replace(/\\/g, '/')

	  return abs
	}


	// Return true, if pattern ends with globstar '**', for the accompanying parent directory.
	// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
	function isIgnored (self, path) {
	  if (!self.ignore.length)
	    return false

	  return self.ignore.some(function(item) {
	    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))
	  })
	}

	function childrenIgnored (self, path) {
	  if (!self.ignore.length)
	    return false

	  return self.ignore.some(function(item) {
	    return !!(item.gmatcher && item.gmatcher.match(path))
	  })
	}


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(81)
	var reqs = Object.create(null)
	var once = __webpack_require__(82)

	module.exports = wrappy(inflight)

	function inflight (key, cb) {
	  if (reqs[key]) {
	    reqs[key].push(cb)
	    return null
	  } else {
	    reqs[key] = [cb]
	    return makeres(key)
	  }
	}

	function makeres (key) {
	  return once(function RES () {
	    var cbs = reqs[key]
	    var len = cbs.length
	    var args = slice(arguments)

	    // XXX It's somewhat ambiguous whether a new callback added in this
	    // pass should be queued for later execution if something in the
	    // list of callbacks throws, or if it should just be discarded.
	    // However, it's such an edge case that it hardly matters, and either
	    // choice is likely as surprising as the other.
	    // As it happens, we do go ahead and schedule it for later execution.
	    try {
	      for (var i = 0; i < len; i++) {
	        cbs[i].apply(null, args)
	      }
	    } finally {
	      if (cbs.length > len) {
	        // added more in the interim.
	        // de-zalgo, just in case, but don't call again.
	        cbs.splice(0, len)
	        process.nextTick(function () {
	          RES.apply(null, args)
	        })
	      } else {
	        delete reqs[key]
	      }
	    }
	  })
	}

	function slice (args) {
	  var length = args.length
	  var array = []

	  for (var i = 0; i < length; i++) array[i] = args[i]
	  return array
	}


/***/ },
/* 81 */
/***/ function(module, exports) {

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	module.exports = wrappy
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)

	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')

	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k]
	  })

	  return wrapper

	  function wrapper() {
	    var args = new Array(arguments.length)
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }
	    var ret = fn.apply(this, args)
	    var cb = args[args.length-1]
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k]
	      })
	    }
	    return ret
	  }
	}


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(81)
	module.exports = wrappy(once)
	module.exports.strict = wrappy(onceStrict)

	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })

	  Object.defineProperty(Function.prototype, 'onceStrict', {
	    value: function () {
	      return onceStrict(this)
	    },
	    configurable: true
	  })
	})

	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}

	function onceStrict (fn) {
	  var f = function () {
	    if (f.called)
	      throw new Error(f.onceError)
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  var name = fn.name || 'Function wrapped with `once`'
	  f.onceError = name + " shouldn't be called more than once"
	  f.called = false
	  return f
	}


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var path = __webpack_require__(18);
	var fs = __webpack_require__(8);

	module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

	function mkdirP (p, opts, f, made) {
	    if (typeof opts === 'function') {
	        f = opts;
	        opts = {};
	    }
	    else if (!opts || typeof opts !== 'object') {
	        opts = { mode: opts };
	    }
	    
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	    
	    if (mode === undefined) {
	        mode = 0777 & (~process.umask());
	    }
	    if (!made) made = null;
	    
	    var cb = f || function () {};
	    p = path.resolve(p);
	    
	    xfs.mkdir(p, mode, function (er) {
	        if (!er) {
	            made = made || p;
	            return cb(null, made);
	        }
	        switch (er.code) {
	            case 'ENOENT':
	                mkdirP(path.dirname(p), opts, function (er, made) {
	                    if (er) cb(er, made);
	                    else mkdirP(p, opts, cb, made);
	                });
	                break;

	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                xfs.stat(p, function (er2, stat) {
	                    // if the stat fails, then that's super weird.
	                    // let the original error be the failure reason.
	                    if (er2 || !stat.isDirectory()) cb(er, made)
	                    else cb(null, made);
	                });
	                break;
	        }
	    });
	}

	mkdirP.sync = function sync (p, opts, made) {
	    if (!opts || typeof opts !== 'object') {
	        opts = { mode: opts };
	    }
	    
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	    
	    if (mode === undefined) {
	        mode = 0777 & (~process.umask());
	    }
	    if (!made) made = null;

	    p = path.resolve(p);

	    try {
	        xfs.mkdirSync(p, mode);
	        made = made || p;
	    }
	    catch (err0) {
	        switch (err0.code) {
	            case 'ENOENT' :
	                made = sync(path.dirname(p), opts, made);
	                sync(p, opts, made);
	                break;

	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                var stat;
	                try {
	                    stat = xfs.statSync(p);
	                }
	                catch (err1) {
	                    throw err0;
	                }
	                if (!stat.isDirectory()) throw err0;
	                break;
	        }
	    }

	    return made;
	};


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// It is expected that, when .add() returns false, the consumer
	// of the DirWriter will pause until a "drain" event occurs. Note
	// that this is *almost always going to be the case*, unless the
	// thing being written is some sort of unsupported type, and thus
	// skipped over.

	module.exports = DirWriter

	var Writer = __webpack_require__(67)
	var inherits = __webpack_require__(56)
	var mkdir = __webpack_require__(83)
	var path = __webpack_require__(18)
	var collect = __webpack_require__(85)

	inherits(DirWriter, Writer)

	function DirWriter (props) {
	  var self = this
	  if (!(self instanceof DirWriter)) {
	    self.error('DirWriter must be called as constructor.', null, true)
	  }

	  // should already be established as a Directory type
	  if (props.type !== 'Directory' || !props.Directory) {
	    self.error('Non-directory type ' + props.type + ' ' +
	      JSON.stringify(props), null, true)
	  }

	  Writer.call(this, props)
	}

	DirWriter.prototype._create = function () {
	  var self = this
	  mkdir(self._path, Writer.dirmode, function (er) {
	    if (er) return self.error(er)
	    // ready to start getting entries!
	    self.ready = true
	    self.emit('ready')
	    self._process()
	  })
	}

	// a DirWriter has an add(entry) method, but its .write() doesn't
	// do anything.  Why a no-op rather than a throw?  Because this
	// leaves open the door for writing directory metadata for
	// gnu/solaris style dumpdirs.
	DirWriter.prototype.write = function () {
	  return true
	}

	DirWriter.prototype.end = function () {
	  this._ended = true
	  this._process()
	}

	DirWriter.prototype.add = function (entry) {
	  var self = this

	  // console.error('\tadd', entry._path, '->', self._path)
	  collect(entry)
	  if (!self.ready || self._currentEntry) {
	    self._buffer.push(entry)
	    return false
	  }

	  // create a new writer, and pipe the incoming entry into it.
	  if (self._ended) {
	    return self.error('add after end')
	  }

	  self._buffer.push(entry)
	  self._process()

	  return this._buffer.length === 0
	}

	DirWriter.prototype._process = function () {
	  var self = this

	  // console.error('DW Process p=%j', self._processing, self.basename)

	  if (self._processing) return

	  var entry = self._buffer.shift()
	  if (!entry) {
	    // console.error("DW Drain")
	    self.emit('drain')
	    if (self._ended) self._finish()
	    return
	  }

	  self._processing = true
	  // console.error("DW Entry", entry._path)

	  self.emit('entry', entry)

	  // ok, add this entry
	  //
	  // don't allow recursive copying
	  var p = entry
	  var pp
	  do {
	    pp = p._path || p.path
	    if (pp === self.root._path || pp === self._path ||
	      (pp && pp.indexOf(self._path) === 0)) {
	      // console.error('DW Exit (recursive)', entry.basename, self._path)
	      self._processing = false
	      if (entry._collected) entry.pipe()
	      return self._process()
	    }
	    p = p.parent
	  } while (p)

	  // console.error("DW not recursive")

	  // chop off the entry's root dir, replace with ours
	  var props = {
	    parent: self,
	    root: self.root || self,
	    type: entry.type,
	    depth: self.depth + 1
	  }

	  pp = entry._path || entry.path || entry.props.path
	  if (entry.parent) {
	    pp = pp.substr(entry.parent._path.length + 1)
	  }
	  // get rid of any ../../ shenanigans
	  props.path = path.join(self.path, path.join('/', pp))

	  // if i have a filter, the child should inherit it.
	  props.filter = self.filter

	  // all the rest of the stuff, copy over from the source.
	  Object.keys(entry.props).forEach(function (k) {
	    if (!props.hasOwnProperty(k)) {
	      props[k] = entry.props[k]
	    }
	  })

	  // not sure at this point what kind of writer this is.
	  var child = self._currentChild = new Writer(props)
	  child.on('ready', function () {
	    // console.error("DW Child Ready", child.type, child._path)
	    // console.error("  resuming", entry._path)
	    entry.pipe(child)
	    entry.resume()
	  })

	  // XXX Make this work in node.
	  // Long filenames should not break stuff.
	  child.on('error', function (er) {
	    if (child._swallowErrors) {
	      self.warn(er)
	      child.emit('end')
	      child.emit('close')
	    } else {
	      self.emit('error', er)
	    }
	  })

	  // we fire _end internally *after* end, so that we don't move on
	  // until any "end" listeners have had their chance to do stuff.
	  child.on('close', onend)
	  var ended = false
	  function onend () {
	    if (ended) return
	    ended = true
	    // console.error("* DW Child end", child.basename)
	    self._currentChild = null
	    self._processing = false
	    self._process()
	  }
	}


/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = collect

	function collect (stream) {
	  if (stream._collected) return

	  if (stream._paused) return stream.on('resume', collect.bind(null, stream))

	  stream._collected = true
	  stream.pause()

	  stream.on('data', save)
	  stream.on('end', save)
	  var buf = []
	  function save (b) {
	    if (typeof b === 'string') b = new Buffer(b)
	    if (Buffer.isBuffer(b) && !b.length) return
	    buf.push(b)
	  }

	  stream.on('entry', saveEntry)
	  var entryBuffer = []
	  function saveEntry (e) {
	    collect(e)
	    entryBuffer.push(e)
	  }

	  stream.on('proxy', proxyPause)
	  function proxyPause (p) {
	    p.pause()
	  }

	  // replace the pipe method with a new version that will
	  // unlock the buffered stuff.  if you just call .pipe()
	  // without a destination, then it'll re-play the events.
	  stream.pipe = (function (orig) {
	    return function (dest) {
	      // console.error(' === open the pipes', dest && dest.path)

	      // let the entries flow through one at a time.
	      // Once they're all done, then we can resume completely.
	      var e = 0
	      ;(function unblockEntry () {
	        var entry = entryBuffer[e++]
	        // console.error(" ==== unblock entry", entry && entry.path)
	        if (!entry) return resume()
	        entry.on('end', unblockEntry)
	        if (dest) dest.add(entry)
	        else stream.emit('entry', entry)
	      })()

	      function resume () {
	        stream.removeListener('entry', saveEntry)
	        stream.removeListener('data', save)
	        stream.removeListener('end', save)

	        stream.pipe = orig
	        if (dest) stream.pipe(dest)

	        buf.forEach(function (b) {
	          if (b) stream.emit('data', b)
	          else stream.emit('end')
	        })

	        stream.resume()
	      }

	      return dest
	    }
	  })(stream.pipe)
	}


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = LinkWriter

	var fs = __webpack_require__(7)
	var Writer = __webpack_require__(67)
	var inherits = __webpack_require__(56)
	var path = __webpack_require__(18)
	var rimraf = __webpack_require__(68)

	inherits(LinkWriter, Writer)

	function LinkWriter (props) {
	  var self = this
	  if (!(self instanceof LinkWriter)) {
	    throw new Error('LinkWriter must be called as constructor.')
	  }

	  // should already be established as a Link type
	  if (!((props.type === 'Link' && props.Link) ||
	    (props.type === 'SymbolicLink' && props.SymbolicLink))) {
	    throw new Error('Non-link type ' + props.type)
	  }

	  if (props.linkpath === '') props.linkpath = '.'
	  if (!props.linkpath) {
	    self.error('Need linkpath property to create ' + props.type)
	  }

	  Writer.call(this, props)
	}

	LinkWriter.prototype._create = function () {
	  // console.error(" LW _create")
	  var self = this
	  var hard = self.type === 'Link' || process.platform === 'win32'
	  var link = hard ? 'link' : 'symlink'
	  var lp = hard ? path.resolve(self.dirname, self.linkpath) : self.linkpath

	  // can only change the link path by clobbering
	  // For hard links, let's just assume that's always the case, since
	  // there's no good way to read them if we don't already know.
	  if (hard) return clobber(self, lp, link)

	  fs.readlink(self._path, function (er, p) {
	    // only skip creation if it's exactly the same link
	    if (p && p === lp) return finish(self)
	    clobber(self, lp, link)
	  })
	}

	function clobber (self, lp, link) {
	  rimraf(self._path, function (er) {
	    if (er) return self.error(er)
	    create(self, lp, link)
	  })
	}

	function create (self, lp, link) {
	  fs[link](lp, self._path, function (er) {
	    // if this is a hard link, and we're in the process of writing out a
	    // directory, it's very possible that the thing we're linking to
	    // doesn't exist yet (especially if it was intended as a symlink),
	    // so swallow ENOENT errors here and just soldier in.
	    // Additionally, an EPERM or EACCES can happen on win32 if it's trying
	    // to make a link to a directory.  Again, just skip it.
	    // A better solution would be to have fs.symlink be supported on
	    // windows in some nice fashion.
	    if (er) {
	      if ((er.code === 'ENOENT' ||
	        er.code === 'EACCES' ||
	        er.code === 'EPERM') && process.platform === 'win32') {
	        self.ready = true
	        self.emit('ready')
	        self.emit('end')
	        self.emit('close')
	        self.end = self._finish = function () {}
	      } else return self.error(er)
	    }
	    finish(self)
	  })
	}

	function finish (self) {
	  self.ready = true
	  self.emit('ready')
	  if (self._ended && !self._finished) self._finish()
	}

	LinkWriter.prototype.end = function () {
	  // console.error("LW finish in end")
	  this._ended = true
	  if (this.ready) {
	    this._finished = true
	    this._finish()
	  }
	}


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = FileWriter

	var fs = __webpack_require__(7)
	var Writer = __webpack_require__(67)
	var inherits = __webpack_require__(56)
	var EOF = {}

	inherits(FileWriter, Writer)

	function FileWriter (props) {
	  var self = this
	  if (!(self instanceof FileWriter)) {
	    throw new Error('FileWriter must be called as constructor.')
	  }

	  // should already be established as a File type
	  if (props.type !== 'File' || !props.File) {
	    throw new Error('Non-file type ' + props.type)
	  }

	  self._buffer = []
	  self._bytesWritten = 0

	  Writer.call(this, props)
	}

	FileWriter.prototype._create = function () {
	  var self = this
	  if (self._stream) return

	  var so = {}
	  if (self.props.flags) so.flags = self.props.flags
	  so.mode = Writer.filemode
	  if (self._old && self._old.blksize) so.bufferSize = self._old.blksize

	  self._stream = fs.createWriteStream(self._path, so)

	  self._stream.on('open', function () {
	    // console.error("FW open", self._buffer, self._path)
	    self.ready = true
	    self._buffer.forEach(function (c) {
	      if (c === EOF) self._stream.end()
	      else self._stream.write(c)
	    })
	    self.emit('ready')
	    // give this a kick just in case it needs it.
	    self.emit('drain')
	  })

	  self._stream.on('error', function (er) { self.emit('error', er) })

	  self._stream.on('drain', function () { self.emit('drain') })

	  self._stream.on('close', function () {
	    // console.error('\n\nFW Stream Close', self._path, self.size)
	    self._finish()
	  })
	}

	FileWriter.prototype.write = function (c) {
	  var self = this

	  self._bytesWritten += c.length

	  if (!self.ready) {
	    if (!Buffer.isBuffer(c) && typeof c !== 'string') {
	      throw new Error('invalid write data')
	    }
	    self._buffer.push(c)
	    return false
	  }

	  var ret = self._stream.write(c)
	  // console.error('\t-- fw wrote, _stream says', ret, self._stream._queue.length)

	  // allow 2 buffered writes, because otherwise there's just too
	  // much stop and go bs.
	  if (ret === false && self._stream._queue) {
	    return self._stream._queue.length <= 2
	  } else {
	    return ret
	  }
	}

	FileWriter.prototype.end = function (c) {
	  var self = this

	  if (c) self.write(c)

	  if (!self.ready) {
	    self._buffer.push(EOF)
	    return false
	  }

	  return self._stream.end()
	}

	FileWriter.prototype._finish = function () {
	  var self = this
	  if (typeof self.size === 'number' && self._bytesWritten !== self.size) {
	    self.error(
	      'Did not get expected byte count.\n' +
	      'expect: ' + self.size + '\n' +
	      'actual: ' + self._bytesWritten)
	  }
	  Writer.prototype._finish.call(self)
	}


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	// A writer for when we don't know what kind of thing
	// the thing is.  That is, it's not explicitly set,
	// so we're going to make it whatever the thing already
	// is, or "File"
	//
	// Until then, collect all events.

	module.exports = ProxyWriter

	var Writer = __webpack_require__(67)
	var getType = __webpack_require__(61)
	var inherits = __webpack_require__(56)
	var collect = __webpack_require__(85)
	var fs = __webpack_require__(8)

	inherits(ProxyWriter, Writer)

	function ProxyWriter (props) {
	  var self = this
	  if (!(self instanceof ProxyWriter)) {
	    throw new Error('ProxyWriter must be called as constructor.')
	  }

	  self.props = props
	  self._needDrain = false

	  Writer.call(self, props)
	}

	ProxyWriter.prototype._stat = function () {
	  var self = this
	  var props = self.props
	  // stat the thing to see what the proxy should be.
	  var stat = props.follow ? 'stat' : 'lstat'

	  fs[stat](props.path, function (er, current) {
	    var type
	    if (er || !current) {
	      type = 'File'
	    } else {
	      type = getType(current)
	    }

	    props[type] = true
	    props.type = self.type = type

	    self._old = current
	    self._addProxy(Writer(props, current))
	  })
	}

	ProxyWriter.prototype._addProxy = function (proxy) {
	  // console.error("~~ set proxy", this.path)
	  var self = this
	  if (self._proxy) {
	    return self.error('proxy already set')
	  }

	  self._proxy = proxy
	  ;[
	    'ready',
	    'error',
	    'close',
	    'pipe',
	    'drain',
	    'warn'
	  ].forEach(function (ev) {
	    proxy.on(ev, self.emit.bind(self, ev))
	  })

	  self.emit('proxy', proxy)

	  var calls = self._buffer
	  calls.forEach(function (c) {
	    // console.error("~~ ~~ proxy buffered call", c[0], c[1])
	    proxy[c[0]].apply(proxy, c[1])
	  })
	  self._buffer.length = 0
	  if (self._needsDrain) self.emit('drain')
	}

	ProxyWriter.prototype.add = function (entry) {
	  // console.error("~~ proxy add")
	  collect(entry)

	  if (!this._proxy) {
	    this._buffer.push(['add', [entry]])
	    this._needDrain = true
	    return false
	  }
	  return this._proxy.add(entry)
	}

	ProxyWriter.prototype.write = function (c) {
	  // console.error('~~ proxy write')
	  if (!this._proxy) {
	    this._buffer.push(['write', [c]])
	    this._needDrain = true
	    return false
	  }
	  return this._proxy.write(c)
	}

	ProxyWriter.prototype.end = function (c) {
	  // console.error('~~ proxy end')
	  if (!this._proxy) {
	    this._buffer.push(['end', [c]])
	    return false
	  }
	  return this._proxy.end(c)
	}


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	// write data to it, and it'll emit data in 512 byte blocks.
	// if you .end() or .flush(), it'll emit whatever it's got,
	// padded with nulls to 512 bytes.

	module.exports = BlockStream

	var Stream = __webpack_require__(13).Stream
	  , inherits = __webpack_require__(56)
	  , assert = __webpack_require__(15).ok
	  , debug = process.env.DEBUG ? console.error : function () {}

	function BlockStream (size, opt) {
	  this.writable = this.readable = true
	  this._opt = opt || {}
	  this._chunkSize = size || 512
	  this._offset = 0
	  this._buffer = []
	  this._bufferLength = 0
	  if (this._opt.nopad) this._zeroes = false
	  else {
	    this._zeroes = new Buffer(this._chunkSize)
	    for (var i = 0; i < this._chunkSize; i ++) {
	      this._zeroes[i] = 0
	    }
	  }
	}

	inherits(BlockStream, Stream)

	BlockStream.prototype.write = function (c) {
	  // debug("   BS write", c)
	  if (this._ended) throw new Error("BlockStream: write after end")
	  if (c && !Buffer.isBuffer(c)) c = new Buffer(c + "")
	  if (c.length) {
	    this._buffer.push(c)
	    this._bufferLength += c.length
	  }
	  // debug("pushed onto buffer", this._bufferLength)
	  if (this._bufferLength >= this._chunkSize) {
	    if (this._paused) {
	      // debug("   BS paused, return false, need drain")
	      this._needDrain = true
	      return false
	    }
	    this._emitChunk()
	  }
	  return true
	}

	BlockStream.prototype.pause = function () {
	  // debug("   BS pausing")
	  this._paused = true
	}

	BlockStream.prototype.resume = function () {
	  // debug("   BS resume")
	  this._paused = false
	  return this._emitChunk()
	}

	BlockStream.prototype.end = function (chunk) {
	  // debug("end", chunk)
	  if (typeof chunk === "function") cb = chunk, chunk = null
	  if (chunk) this.write(chunk)
	  this._ended = true
	  this.flush()
	}

	BlockStream.prototype.flush = function () {
	  this._emitChunk(true)
	}

	BlockStream.prototype._emitChunk = function (flush) {
	  // debug("emitChunk flush=%j emitting=%j paused=%j", flush, this._emitting, this._paused)

	  // emit a <chunkSize> chunk
	  if (flush && this._zeroes) {
	    // debug("    BS push zeroes", this._bufferLength)
	    // push a chunk of zeroes
	    var padBytes = (this._bufferLength % this._chunkSize)
	    if (padBytes !== 0) padBytes = this._chunkSize - padBytes
	    if (padBytes > 0) {
	      // debug("padBytes", padBytes, this._zeroes.slice(0, padBytes))
	      this._buffer.push(this._zeroes.slice(0, padBytes))
	      this._bufferLength += padBytes
	      // debug(this._buffer[this._buffer.length - 1].length, this._bufferLength)
	    }
	  }

	  if (this._emitting || this._paused) return
	  this._emitting = true

	  // debug("    BS entering loops")
	  var bufferIndex = 0
	  while (this._bufferLength >= this._chunkSize &&
	         (flush || !this._paused)) {
	    // debug("     BS data emission loop", this._bufferLength)

	    var out
	      , outOffset = 0
	      , outHas = this._chunkSize

	    while (outHas > 0 && (flush || !this._paused) ) {
	      // debug("    BS data inner emit loop", this._bufferLength)
	      var cur = this._buffer[bufferIndex]
	        , curHas = cur.length - this._offset
	      // debug("cur=", cur)
	      // debug("curHas=%j", curHas)
	      // If it's not big enough to fill the whole thing, then we'll need
	      // to copy multiple buffers into one.  However, if it is big enough,
	      // then just slice out the part we want, to save unnecessary copying.
	      // Also, need to copy if we've already done some copying, since buffers
	      // can't be joined like cons strings.
	      if (out || curHas < outHas) {
	        out = out || new Buffer(this._chunkSize)
	        cur.copy(out, outOffset,
	                 this._offset, this._offset + Math.min(curHas, outHas))
	      } else if (cur.length === outHas && this._offset === 0) {
	        // shortcut -- cur is exactly long enough, and no offset.
	        out = cur
	      } else {
	        // slice out the piece of cur that we need.
	        out = cur.slice(this._offset, this._offset + outHas)
	      }

	      if (curHas > outHas) {
	        // means that the current buffer couldn't be completely output
	        // update this._offset to reflect how much WAS written
	        this._offset += outHas
	        outHas = 0
	      } else {
	        // output the entire current chunk.
	        // toss it away
	        outHas -= curHas
	        outOffset += curHas
	        bufferIndex ++
	        this._offset = 0
	      }
	    }

	    this._bufferLength -= this._chunkSize
	    assert(out.length === this._chunkSize)
	    // debug("emitting data", out)
	    // debug("   BS emitting, paused=%j", this._paused, this._bufferLength)
	    this.emit("data", out)
	    out = null
	  }
	  // debug("    BS out of loops", this._bufferLength)

	  // whatever is left, it's not enough to fill up a block, or we're paused
	  this._buffer = this._buffer.slice(bufferIndex)
	  if (this._paused) {
	    // debug("    BS paused, leaving", this._bufferLength)
	    this._needsDrain = true
	    this._emitting = false
	    return
	  }

	  // if flushing, and not using null-padding, then need to emit the last
	  // chunk(s) sitting in the queue.  We know that it's not enough to
	  // fill up a whole block, because otherwise it would have been emitted
	  // above, but there may be some offset.
	  var l = this._buffer.length
	  if (flush && !this._zeroes && l) {
	    if (l === 1) {
	      if (this._offset) {
	        this.emit("data", this._buffer[0].slice(this._offset))
	      } else {
	        this.emit("data", this._buffer[0])
	      }
	    } else {
	      var outHas = this._bufferLength
	        , out = new Buffer(outHas)
	        , outOffset = 0
	      for (var i = 0; i < l; i ++) {
	        var cur = this._buffer[i]
	          , curHas = cur.length - this._offset
	        cur.copy(out, outOffset, this._offset)
	        this._offset = 0
	        outOffset += curHas
	        this._bufferLength -= curHas
	      }
	      this.emit("data", out)
	    }
	    // truncate
	    this._buffer.length = 0
	    this._bufferLength = 0
	    this._offset = 0
	  }

	  // now either drained or ended
	  // debug("either draining, or ended", this._bufferLength, this._ended)
	  // means that we've flushed out all that we can so far.
	  if (this._needDrain) {
	    // debug("emitting drain", this._bufferLength)
	    this._needDrain = false
	    this.emit("drain")
	  }

	  if ((this._bufferLength === 0) && this._ended && !this._endEmitted) {
	    // debug("emitting end", this._bufferLength)
	    this._endEmitted = true
	    this.emit("end")
	  }

	  this._emitting = false

	  // debug("    BS no longer emitting", flush, this._paused, this._emitting, this._bufferLength, this._chunkSize)
	}


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = ExtendedHeaderWriter

	var inherits = __webpack_require__(56)
	  , EntryWriter = __webpack_require__(53)

	inherits(ExtendedHeaderWriter, EntryWriter)

	var tar = __webpack_require__(51)
	  , path = __webpack_require__(18)
	  , TarHeader = __webpack_require__(54)

	// props is the props of the thing we need to write an
	// extended header for.
	// Don't be shy with it.  Just encode everything.
	function ExtendedHeaderWriter (props) {
	  // console.error(">> ehw ctor")
	  var me = this

	  if (!(me instanceof ExtendedHeaderWriter)) {
	    return new ExtendedHeaderWriter(props)
	  }

	  me.fields = props

	  var p =
	    { path : ("PaxHeader" + path.join("/", props.path || ""))
	             .replace(/\\/g, "/").substr(0, 100)
	    , mode : props.mode || 0666
	    , uid : props.uid || 0
	    , gid : props.gid || 0
	    , size : 0 // will be set later
	    , mtime : props.mtime || Date.now() / 1000
	    , type : "x"
	    , linkpath : ""
	    , ustar : "ustar\0"
	    , ustarver : "00"
	    , uname : props.uname || ""
	    , gname : props.gname || ""
	    , devmaj : props.devmaj || 0
	    , devmin : props.devmin || 0
	    }


	  EntryWriter.call(me, p)
	  // console.error(">> ehw props", me.props)
	  me.props = p

	  me._meta = true
	}

	ExtendedHeaderWriter.prototype.end = function () {
	  // console.error(">> ehw end")
	  var me = this

	  if (me._ended) return
	  me._ended = true

	  me._encodeFields()

	  if (me.props.size === 0) {
	    // nothing to write!
	    me._ready = true
	    me._stream.end()
	    return
	  }

	  me._stream.write(TarHeader.encode(me.props))
	  me.body.forEach(function (l) {
	    me._stream.write(l)
	  })
	  me._ready = true

	  // console.error(">> ehw _process calling end()", me.props)
	  this._stream.end()
	}

	ExtendedHeaderWriter.prototype._encodeFields = function () {
	  // console.error(">> ehw _encodeFields")
	  this.body = []
	  if (this.fields.prefix) {
	    this.fields.path = this.fields.prefix + "/" + this.fields.path
	    this.fields.prefix = ""
	  }
	  encodeFields(this.fields, "", this.body, this.fields.noProprietary)
	  var me = this
	  this.body.forEach(function (l) {
	    me.props.size += l.length
	  })
	}

	function encodeFields (fields, prefix, body, nop) {
	  // console.error(">> >> ehw encodeFields")
	  // "%d %s=%s\n", <length>, <keyword>, <value>
	  // The length is a decimal number, and includes itself and the \n
	  // Numeric values are decimal strings.

	  Object.keys(fields).forEach(function (k) {
	    var val = fields[k]
	      , numeric = tar.numeric[k]

	    if (prefix) k = prefix + "." + k

	    // already including NODETAR.type, don't need File=true also
	    if (k === fields.type && val === true) return

	    switch (k) {
	      // don't include anything that's always handled just fine
	      // in the normal header, or only meaningful in the context
	      // of nodetar
	      case "mode":
	      case "cksum":
	      case "ustar":
	      case "ustarver":
	      case "prefix":
	      case "basename":
	      case "dirname":
	      case "needExtended":
	      case "block":
	      case "filter":
	        return

	      case "rdev":
	        if (val === 0) return
	        break

	      case "nlink":
	      case "dev": // Truly a hero among men, Creator of Star!
	      case "ino": // Speak his name with reverent awe!  It is:
	        k = "SCHILY." + k
	        break

	      default: break
	    }

	    if (val && typeof val === "object" &&
	        !Buffer.isBuffer(val)) encodeFields(val, k, body, nop)
	    else if (val === null || val === undefined) return
	    else body.push.apply(body, encodeField(k, val, nop))
	  })

	  return body
	}

	function encodeField (k, v, nop) {
	  // lowercase keys must be valid, otherwise prefix with
	  // "NODETAR."
	  if (k.charAt(0) === k.charAt(0).toLowerCase()) {
	    var m = k.split(".")[0]
	    if (!tar.knownExtended[m]) k = "NODETAR." + k
	  }

	  // no proprietary
	  if (nop && k.charAt(0) !== k.charAt(0).toLowerCase()) {
	    return []
	  }

	  if (typeof val === "number") val = val.toString(10)

	  var s = new Buffer(" " + k + "=" + v + "\n")
	    , digits = Math.floor(Math.log(s.length) / Math.log(10)) + 1

	  // console.error("1 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)

	  // if adding that many digits will make it go over that length,
	  // then add one to it. For example, if the string is:
	  // " foo=bar\n"
	  // then that's 9 characters.  With the "9", that bumps the length
	  // up to 10.  However, this is invalid:
	  // "10 foo=bar\n"
	  // but, since that's actually 11 characters, since 10 adds another
	  // character to the length, and the length includes the number
	  // itself.  In that case, just bump it up again.
	  if (s.length + digits >= Math.pow(10, digits)) digits += 1
	  // console.error("2 s=%j digits=%j s.length=%d", s.toString(), digits, s.length)

	  var len = digits + s.length
	  // console.error("3 s=%j digits=%j s.length=%d len=%d", s.toString(), digits, s.length, len)
	  var lenBuf = new Buffer("" + len)
	  if (lenBuf.length + s.length !== len) {
	    throw new Error("Bad length calculation\n"+
	                    "len="+len+"\n"+
	                    "lenBuf="+JSON.stringify(lenBuf.toString())+"\n"+
	                    "lenBuf.length="+lenBuf.length+"\n"+
	                    "digits="+digits+"\n"+
	                    "s="+JSON.stringify(s.toString())+"\n"+
	                    "s.length="+s.length)
	  }

	  return [lenBuf, s]
	}


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = GlobalHeaderWriter

	var ExtendedHeaderWriter = __webpack_require__(90)
	  , inherits = __webpack_require__(56)

	inherits(GlobalHeaderWriter, ExtendedHeaderWriter)

	function GlobalHeaderWriter (props) {
	  if (!(this instanceof GlobalHeaderWriter)) {
	    return new GlobalHeaderWriter(props)
	  }
	  ExtendedHeaderWriter.call(this, props)
	  this.props.type = "g"
	}


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	
	// A writable stream.
	// It emits "entry" events, which provide a readable stream that has
	// header info attached.

	module.exports = Parse.create = Parse

	var stream = __webpack_require__(13)
	  , Stream = stream.Stream
	  , BlockStream = __webpack_require__(89)
	  , tar = __webpack_require__(51)
	  , TarHeader = __webpack_require__(54)
	  , Entry = __webpack_require__(55)
	  , BufferEntry = __webpack_require__(93)
	  , ExtendedHeader = __webpack_require__(94)
	  , assert = __webpack_require__(15).ok
	  , inherits = __webpack_require__(56)
	  , fstream = __webpack_require__(58)

	// reading a tar is a lot like reading a directory
	// However, we're actually not going to run the ctor,
	// since it does a stat and various other stuff.
	// This inheritance gives us the pause/resume/pipe
	// behavior that is desired.
	inherits(Parse, fstream.Reader)

	function Parse () {
	  var me = this
	  if (!(me instanceof Parse)) return new Parse()

	  // doesn't apply fstream.Reader ctor?
	  // no, becasue we don't want to stat/etc, we just
	  // want to get the entry/add logic from .pipe()
	  Stream.apply(me)

	  me.writable = true
	  me.readable = true
	  me._stream = new BlockStream(512)
	  me.position = 0
	  me._ended = false

	  me._stream.on("error", function (e) {
	    me.emit("error", e)
	  })

	  me._stream.on("data", function (c) {
	    me._process(c)
	  })

	  me._stream.on("end", function () {
	    me._streamEnd()
	  })

	  me._stream.on("drain", function () {
	    me.emit("drain")
	  })
	}

	// overridden in Extract class, since it needs to
	// wait for its DirWriter part to finish before
	// emitting "end"
	Parse.prototype._streamEnd = function () {
	  var me = this
	  if (!me._ended || me._entry) me.error("unexpected eof")
	  me.emit("end")
	}

	// a tar reader is actually a filter, not just a readable stream.
	// So, you should pipe a tarball stream into it, and it needs these
	// write/end methods to do that.
	Parse.prototype.write = function (c) {
	  if (this._ended) {
	    // gnutar puts a LOT of nulls at the end.
	    // you can keep writing these things forever.
	    // Just ignore them.
	    for (var i = 0, l = c.length; i > l; i ++) {
	      if (c[i] !== 0) return this.error("write() after end()")
	    }
	    return
	  }
	  return this._stream.write(c)
	}

	Parse.prototype.end = function (c) {
	  this._ended = true
	  return this._stream.end(c)
	}

	// don't need to do anything, since we're just
	// proxying the data up from the _stream.
	// Just need to override the parent's "Not Implemented"
	// error-thrower.
	Parse.prototype._read = function () {}

	Parse.prototype._process = function (c) {
	  assert(c && c.length === 512, "block size should be 512")

	  // one of three cases.
	  // 1. A new header
	  // 2. A part of a file/extended header
	  // 3. One of two or more EOF null blocks

	  if (this._entry) {
	    var entry = this._entry
	    if(!entry._abort) entry.write(c)
	    else {
	      entry._remaining -= c.length
	      if(entry._remaining < 0) entry._remaining = 0
	    }
	    if (entry._remaining === 0) {
	      entry.end()
	      this._entry = null
	    }
	  } else {
	    // either zeroes or a header
	    var zero = true
	    for (var i = 0; i < 512 && zero; i ++) {
	      zero = c[i] === 0
	    }

	    // eof is *at least* 2 blocks of nulls, and then the end of the
	    // file.  you can put blocks of nulls between entries anywhere,
	    // so appending one tarball to another is technically valid.
	    // ending without the eof null blocks is not allowed, however.
	    if (zero) {
	      if (this._eofStarted)
	        this._ended = true
	      this._eofStarted = true
	    } else {
	      this._eofStarted = false
	      this._startEntry(c)
	    }
	  }

	  this.position += 512
	}

	// take a header chunk, start the right kind of entry.
	Parse.prototype._startEntry = function (c) {
	  var header = new TarHeader(c)
	    , self = this
	    , entry
	    , ev
	    , EntryType
	    , onend
	    , meta = false

	  if (null === header.size || !header.cksumValid) {
	    var e = new Error("invalid tar file")
	    e.header = header
	    e.tar_file_offset = this.position
	    e.tar_block = this.position / 512
	    return this.emit("error", e)
	  }

	  switch (tar.types[header.type]) {
	    case "File":
	    case "OldFile":
	    case "Link":
	    case "SymbolicLink":
	    case "CharacterDevice":
	    case "BlockDevice":
	    case "Directory":
	    case "FIFO":
	    case "ContiguousFile":
	    case "GNUDumpDir":
	      // start a file.
	      // pass in any extended headers
	      // These ones consumers are typically most interested in.
	      EntryType = Entry
	      ev = "entry"
	      break

	    case "GlobalExtendedHeader":
	      // extended headers that apply to the rest of the tarball
	      EntryType = ExtendedHeader
	      onend = function () {
	        self._global = self._global || {}
	        Object.keys(entry.fields).forEach(function (k) {
	          self._global[k] = entry.fields[k]
	        })
	      }
	      ev = "globalExtendedHeader"
	      meta = true
	      break

	    case "ExtendedHeader":
	    case "OldExtendedHeader":
	      // extended headers that apply to the next entry
	      EntryType = ExtendedHeader
	      onend = function () {
	        self._extended = entry.fields
	      }
	      ev = "extendedHeader"
	      meta = true
	      break

	    case "NextFileHasLongLinkpath":
	      // set linkpath=<contents> in extended header
	      EntryType = BufferEntry
	      onend = function () {
	        self._extended = self._extended || {}
	        self._extended.linkpath = entry.body
	      }
	      ev = "longLinkpath"
	      meta = true
	      break

	    case "NextFileHasLongPath":
	    case "OldGnuLongPath":
	      // set path=<contents> in file-extended header
	      EntryType = BufferEntry
	      onend = function () {
	        self._extended = self._extended || {}
	        self._extended.path = entry.body
	      }
	      ev = "longPath"
	      meta = true
	      break

	    default:
	      // all the rest we skip, but still set the _entry
	      // member, so that we can skip over their data appropriately.
	      // emit an event to say that this is an ignored entry type?
	      EntryType = Entry
	      ev = "ignoredEntry"
	      break
	  }

	  var global, extended
	  if (meta) {
	    global = extended = null
	  } else {
	    var global = this._global
	    var extended = this._extended

	    // extendedHeader only applies to one entry, so once we start
	    // an entry, it's over.
	    this._extended = null
	  }
	  entry = new EntryType(header, extended, global)
	  entry.meta = meta

	  // only proxy data events of normal files.
	  if (!meta) {
	    entry.on("data", function (c) {
	      me.emit("data", c)
	    })
	  }

	  if (onend) entry.on("end", onend)

	  this._entry = entry
	  var me = this

	  entry.on("pause", function () {
	    me.pause()
	  })

	  entry.on("resume", function () {
	    me.resume()
	  })

	  if (this.listeners("*").length) {
	    this.emit("*", ev, entry)
	  }

	  this.emit(ev, entry)

	  // Zero-byte entry.  End immediately.
	  if (entry.props.size === 0) {
	    entry.end()
	    this._entry = null
	  }
	}


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// just like the Entry class, but it buffers the contents
	//
	// XXX It would be good to set a maximum BufferEntry filesize,
	// since it eats up memory.  In normal operation,
	// these are only for long filenames or link names, which are
	// rarely very big.

	module.exports = BufferEntry

	var inherits = __webpack_require__(56)
	  , Entry = __webpack_require__(55)

	function BufferEntry () {
	  Entry.apply(this, arguments)
	  this._buffer = new Buffer(this.props.size)
	  this._offset = 0
	  this.body = ""
	  this.on("end", function () {
	    this.body = this._buffer.toString().slice(0, -1)
	  })
	}

	inherits(BufferEntry, Entry)

	// collect the bytes as they come in.
	BufferEntry.prototype.write = function (c) {
	  c.copy(this._buffer, this._offset)
	  this._offset += c.length
	  Entry.prototype.write.call(this, c)
	}


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// An Entry consisting of:
	//
	// "%d %s=%s\n", <length>, <keyword>, <value>
	//
	// The length is a decimal number, and includes itself and the \n
	// \0 does not terminate anything.  Only the length terminates the string.
	// Numeric values are decimal strings.

	module.exports = ExtendedHeader

	var Entry = __webpack_require__(55)
	  , inherits = __webpack_require__(56)
	  , tar = __webpack_require__(51)
	  , numeric = tar.numeric
	  , keyTrans = { "SCHILY.dev": "dev"
	               , "SCHILY.ino": "ino"
	               , "SCHILY.nlink": "nlink" }

	function ExtendedHeader () {
	  Entry.apply(this, arguments)
	  this.on("data", this._parse)
	  this.fields = {}
	  this._position = 0
	  this._fieldPos = 0
	  this._state = SIZE
	  this._sizeBuf = []
	  this._keyBuf = []
	  this._valBuf = []
	  this._size = -1
	  this._key = ""
	}

	inherits(ExtendedHeader, Entry)
	ExtendedHeader.prototype._parse = parse

	var s = 0
	  , states = ExtendedHeader.states = {}
	  , SIZE = states.SIZE = s++
	  , KEY  = states.KEY  = s++
	  , VAL  = states.VAL  = s++
	  , ERR  = states.ERR  = s++

	Object.keys(states).forEach(function (s) {
	  states[states[s]] = states[s]
	})

	states[s] = null

	// char code values for comparison
	var _0 = "0".charCodeAt(0)
	  , _9 = "9".charCodeAt(0)
	  , point = ".".charCodeAt(0)
	  , a = "a".charCodeAt(0)
	  , Z = "Z".charCodeAt(0)
	  , a = "a".charCodeAt(0)
	  , z = "z".charCodeAt(0)
	  , space = " ".charCodeAt(0)
	  , eq = "=".charCodeAt(0)
	  , cr = "\n".charCodeAt(0)

	function parse (c) {
	  if (this._state === ERR) return

	  for ( var i = 0, l = c.length
	      ; i < l
	      ; this._position++, this._fieldPos++, i++) {
	    // console.error("top of loop, size="+this._size)

	    var b = c[i]

	    if (this._size >= 0 && this._fieldPos > this._size) {
	      error(this, "field exceeds length="+this._size)
	      return
	    }

	    switch (this._state) {
	      case ERR: return

	      case SIZE:
	        // console.error("parsing size, b=%d, rest=%j", b, c.slice(i).toString())
	        if (b === space) {
	          this._state = KEY
	          // this._fieldPos = this._sizeBuf.length
	          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10)
	          this._sizeBuf.length = 0
	          continue
	        }
	        if (b < _0 || b > _9) {
	          error(this, "expected [" + _0 + ".." + _9 + "], got " + b)
	          return
	        }
	        this._sizeBuf.push(b)
	        continue

	      case KEY:
	        // can be any char except =, not > size.
	        if (b === eq) {
	          this._state = VAL
	          this._key = new Buffer(this._keyBuf).toString()
	          if (keyTrans[this._key]) this._key = keyTrans[this._key]
	          this._keyBuf.length = 0
	          continue
	        }
	        this._keyBuf.push(b)
	        continue

	      case VAL:
	        // field must end with cr
	        if (this._fieldPos === this._size - 1) {
	          // console.error("finished with "+this._key)
	          if (b !== cr) {
	            error(this, "expected \\n at end of field")
	            return
	          }
	          var val = new Buffer(this._valBuf).toString()
	          if (numeric[this._key]) {
	            val = parseFloat(val)
	          }
	          this.fields[this._key] = val

	          this._valBuf.length = 0
	          this._state = SIZE
	          this._size = -1
	          this._fieldPos = -1
	          continue
	        }
	        this._valBuf.push(b)
	        continue
	    }
	  }
	}

	function error (me, msg) {
	  msg = "invalid header: " + msg
	      + "\nposition=" + me._position
	      + "\nfield position=" + me._fieldPos

	  me.error(msg)
	  me.state = ERR
	}


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// give it a tarball and a path, and it'll dump the contents

	module.exports = Extract

	var tar = __webpack_require__(51)
	  , fstream = __webpack_require__(58)
	  , inherits = __webpack_require__(56)
	  , path = __webpack_require__(18)

	function Extract (opts) {
	  if (!(this instanceof Extract)) return new Extract(opts)
	  tar.Parse.apply(this)

	  if (typeof opts !== "object") {
	    opts = { path: opts }
	  }

	  // better to drop in cwd? seems more standard.
	  opts.path = opts.path || path.resolve("node-tar-extract")
	  opts.type = "Directory"
	  opts.Directory = true

	  // similar to --strip or --strip-components
	  opts.strip = +opts.strip
	  if (!opts.strip || opts.strip <= 0) opts.strip = 0

	  this._fst = fstream.Writer(opts)

	  this.pause()
	  var me = this

	  // Hardlinks in tarballs are relative to the root
	  // of the tarball.  So, they need to be resolved against
	  // the target directory in order to be created properly.
	  me.on("entry", function (entry) {
	    // if there's a "strip" argument, then strip off that many
	    // path components.
	    if (opts.strip) {
	      var p = entry.path.split("/").slice(opts.strip).join("/")
	      entry.path = entry.props.path = p
	      if (entry.linkpath) {
	        var lp = entry.linkpath.split("/").slice(opts.strip).join("/")
	        entry.linkpath = entry.props.linkpath = lp
	      }
	    }
	    if (entry.type === "Link") {
	      entry.linkpath = entry.props.linkpath =
	        path.join(opts.path, path.join("/", entry.props.linkpath))
	    }

	    if (entry.type === "SymbolicLink") {
	      var dn = path.dirname(entry.path) || ""
	      var linkpath = entry.props.linkpath
	      var target = path.resolve(opts.path, dn, linkpath)
	      if (target.indexOf(opts.path) !== 0) {
	        linkpath = path.join(opts.path, path.join("/", linkpath))
	      }
	      entry.linkpath = entry.props.linkpath = linkpath
	    }
	  })

	  this._fst.on("ready", function () {
	    me.pipe(me._fst, { end: false })
	    me.resume()
	  })

	  this._fst.on('error', function(err) {
	    me.emit('error', err)
	  })

	  this._fst.on('drain', function() {
	    me.emit('drain')
	  })

	  // this._fst.on("end", function () {
	  //   console.error("\nEEEE Extract End", me._fst.path)
	  // })

	  this._fst.on("close", function () {
	    // console.error("\nEEEE Extract End", me._fst.path)
	    me.emit("finish")
	    me.emit("end")
	    me.emit("close")
	  })
	}

	inherits(Extract, tar.Parse)

	Extract.prototype._streamEnd = function () {
	  var me = this
	  if (!me._ended || me._entry) me.error("unexpected eof")
	  me._fst.end()
	  // my .end() is coming later.
	}


/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = require("zlib");

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	exports.download = __webpack_require__(98).download;
	exports.request = __webpack_require__(98).request;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var http = __webpack_require__(99);
	var https = __webpack_require__(100);
	var tunnel = __webpack_require__(101);
	var url = __webpack_require__(105);
	var util = __webpack_require__(14);
	var fs = __webpack_require__(8);
	var EventEmitter = __webpack_require__(76).EventEmitter;

	function download(src, output, options) {
	    var downloader = new EventEmitter(),
	        srcUrl,
	        tunnelAgent,
	        req;

	    if (options) { 
	        options = parseOptions('download', options);
	    }
	    srcUrl = url.parse(src);
	    srcUrl.protocol = cleanProtocol(srcUrl.protocol);

	    req = request({
	        protocol: srcUrl.protocol,
	        host: srcUrl.hostname,
	        port: srcUrl.port,
	        path: srcUrl.pathname,
	        proxy: options?options.proxy:undefined,
	        method: 'GET'
	    }, function(res) {
	        var fileSize, writeStream, downloadedSize;
	        if (res.statusCode === 200) {
	            downloadedSize = 0;
	            fileSize = res.headers['content-length'];
	            writeStream = fs.createWriteStream(output, {
	                flags: 'a',
	                encoding: 'binary'
	            });

	            res.on('error', function(err) {
	                writeStream.end();
	                downloader.emit('error', err);
	            });
	            res.on('data', function(chunk) {
	                downloadedSize += chunk.length;
	                downloader.emit('progress', downloadedSize/fileSize);
	                writeStream.write(chunk);
	            });
	            res.on('end', function() {
	                writeStream.end();
	                downloader.emit('end', output);
	            });
	        } else {
	            downloader.emit('error', 'Server respond ' + res.statusCode);
	        }
	    });

	    req.end();
	    req.on('error', function(err) {
	        downloader.emit('error', err);
	    });

	    return downloader;
	}

	function request(options, callback) {
	    var newOptions = {}, newProxy = {}, key;
	    options = parseOptions('request', options);
	    if (options.protocol === 'http') {
	        if (options.proxy) {
	            for (key in options.proxy) {
	                if (key !== 'protocol') {
	                    newProxy[key] = options.proxy[key];
	                }
	            }
	            if (options.proxy.protocol === 'http') {
	                options.agent = tunnel.httpOverHttp({proxy: newProxy});
	            } else if (options.proxy.protocol === 'https') {
	                options.agent = tunnel.httpOverHttps({proxy: newProxy});
	            } else {
	                throw options.proxy.protocol + ' proxy is not supported!';
	            }
	        }
	        for (key in options) {
	            if (key !== 'protocol' && key !== 'proxy') {
	                newOptions[key] = options[key];
	            }
	        }
	        return http.request(newOptions, callback);
	    }
	    if (options.protocol === 'https') {
	        if (options.proxy) {
	            for (key in options.proxy) {
	                if (key !== 'protocol') {
	                    newProxy[key] = options.proxy[key];
	                }
	            }
	            if (options.proxy.protocol === 'http') {
	                options.agent = tunnel.httpsOverHttp({proxy: newProxy});
	            } else if (options.proxy.protocol === 'https') {
	                options.agent = tunnel.httpsOverHttps({proxy: newProxy});
	            } else {
	                throw options.proxy.protocol + ' proxy is not supported!';
	            }
	        }
	        for (key in options) {
	            if (key !== 'protocol' && key !== 'proxy') {
	                newOptions[key] = options[key];
	            }
	        }
	        return https.request(newOptions, callback);
	    }
	    throw 'only allow http or https request!';
	}

	function parseOptions(type, options) {
	    var proxy;
	    if (type === 'download') {
	        if (options.proxy) {
	            if (typeof options.proxy === 'string') {
	                proxy = url.parse(options.proxy);
	                options.proxy = {};
	                options.proxy.protocol = cleanProtocol(proxy.protocol);
	                options.proxy.host = proxy.hostname;
	                options.proxy.port = proxy.port;
	                options.proxy.proxyAuth = proxy.auth;
	                options.proxy.headers = {'User-Agent': 'Node'};
	            }
	        }
	        return options;
	    }
	    if (type === 'request') {
	        if (!options.protocol) {
	            options.protocol = 'http';
	        }
	        options.protocol = cleanProtocol(options.protocol);

	        if (options.proxy) {
	            if (typeof options.proxy === 'string') {
	                proxy = url.parse(options.proxy);
	                options.proxy = {};
	                options.proxy.protocol = cleanProtocol(proxy.protocol);
	                options.proxy.host = proxy.hostname;
	                options.proxy.port = proxy.port;
	                options.proxy.proxyAuth = proxy.auth;
	                options.proxy.headers = {'User-Agent': 'Node'};
	            }
	        }
	        return options;
	    }
	}

	function cleanProtocol(str) {
	    return str.trim().toLowerCase().replace(/:$/, '');
	}

	exports.download = download;
	exports.request = request;

/***/ },
/* 99 */
/***/ function(module, exports) {

	module.exports = require("http");

/***/ },
/* 100 */
/***/ function(module, exports) {

	module.exports = require("https");

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(102);


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var net = __webpack_require__(103);
	var tls = __webpack_require__(104);
	var http = __webpack_require__(99);
	var https = __webpack_require__(100);
	var events = __webpack_require__(76);
	var assert = __webpack_require__(15);
	var util = __webpack_require__(14);


	exports.httpOverHttp = httpOverHttp;
	exports.httpsOverHttp = httpsOverHttp;
	exports.httpOverHttps = httpOverHttps;
	exports.httpsOverHttps = httpsOverHttps;


	function httpOverHttp(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = http.request;
	  return agent;
	}

	function httpsOverHttp(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = http.request;
	  agent.createSocket = createSecureSocket;
	  return agent;
	}

	function httpOverHttps(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = https.request;
	  return agent;
	}

	function httpsOverHttps(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = https.request;
	  agent.createSocket = createSecureSocket;
	  return agent;
	}


	function TunnelingAgent(options) {
	  var self = this;
	  self.options = options || {};
	  self.proxyOptions = self.options.proxy || {};
	  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
	  self.requests = [];
	  self.sockets = [];

	  self.on('free', function onFree(socket, host, port) {
	    for (var i = 0, len = self.requests.length; i < len; ++i) {
	      var pending = self.requests[i];
	      if (pending.host === host && pending.port === port) {
	        // Detect the request to connect same origin server,
	        // reuse the connection.
	        self.requests.splice(i, 1);
	        pending.request.onSocket(socket);
	        return;
	      }
	    }
	    socket.destroy();
	    self.removeSocket(socket);
	  });
	}
	util.inherits(TunnelingAgent, events.EventEmitter);

	TunnelingAgent.prototype.addRequest = function addRequest(req, host, port) {
	  var self = this;

	  if (self.sockets.length >= this.maxSockets) {
	    // We are over limit so we'll add it to the queue.
	    self.requests.push({host: host, port: port, request: req});
	    return;
	  }

	  // If we are under maxSockets create a new one.
	  self.createSocket({host: host, port: port, request: req}, function(socket) {
	    socket.on('free', onFree);
	    socket.on('close', onCloseOrRemove);
	    socket.on('agentRemove', onCloseOrRemove);
	    req.onSocket(socket);

	    function onFree() {
	      self.emit('free', socket, host, port);
	    }

	    function onCloseOrRemove(err) {
	      self.removeSocket(socket);
	      socket.removeListener('free', onFree);
	      socket.removeListener('close', onCloseOrRemove);
	      socket.removeListener('agentRemove', onCloseOrRemove);
	    }
	  });
	};

	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
	  var self = this;
	  var placeholder = {};
	  self.sockets.push(placeholder);

	  var connectOptions = mergeOptions({}, self.proxyOptions, {
	    method: 'CONNECT',
	    path: options.host + ':' + options.port,
	    agent: false
	  });
	  if (connectOptions.proxyAuth) {
	    connectOptions.headers = connectOptions.headers || {};
	    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
	        new Buffer(connectOptions.proxyAuth).toString('base64');
	  }

	  debug('making CONNECT request');
	  var connectReq = self.request(connectOptions);
	  connectReq.useChunkedEncodingByDefault = false; // for v0.6
	  connectReq.once('response', onResponse); // for v0.6
	  connectReq.once('upgrade', onUpgrade);   // for v0.6
	  connectReq.once('connect', onConnect);   // for v0.7 or later
	  connectReq.once('error', onError);
	  connectReq.end();

	  function onResponse(res) {
	    // Very hacky. This is necessary to avoid http-parser leaks.
	    res.upgrade = true;
	  }

	  function onUpgrade(res, socket, head) {
	    // Hacky.
	    process.nextTick(function() {
	      onConnect(res, socket, head);
	    });
	  }

	  function onConnect(res, socket, head) {
	    connectReq.removeAllListeners();
	    socket.removeAllListeners();

	    if (res.statusCode === 200) {
	      assert.equal(head.length, 0);
	      debug('tunneling connection has established');
	      self.sockets[self.sockets.indexOf(placeholder)] = socket;
	      cb(socket);
	    } else {
	      debug('tunneling socket could not be established, statusCode=%d',
	            res.statusCode);
	      var error = new Error('tunneling socket could not be established, ' +
	                            'sutatusCode=' + res.statusCode);
	      error.code = 'ECONNRESET';
	      options.request.emit('error', error);
	      self.removeSocket(placeholder);
	    }
	  }

	  function onError(cause) {
	    connectReq.removeAllListeners();

	    debug('tunneling socket could not be established, cause=%s\n',
	          cause.message, cause.stack);
	    var error = new Error('tunneling socket could not be established, ' +
	                          'cause=' + cause.message);
	    error.code = 'ECONNRESET';
	    options.request.emit('error', error);
	    self.removeSocket(placeholder);
	  }
	};

	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
	  var pos = this.sockets.indexOf(socket)
	  if (pos === -1) {
	    return;
	  }
	  this.sockets.splice(pos, 1);

	  var pending = this.requests.shift();
	  if (pending) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createSocket(pending, function(socket) {
	      pending.request.onSocket(socket);
	    });
	  }
	};

	function createSecureSocket(options, cb) {
	  var self = this;
	  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
	    var hostHeader = options.request.getHeader('host');
	    var tlsOptions = mergeOptions({}, self.options, {
	      socket: socket,
	      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
	    });

	    // 0 is dummy port for v0.6
	    var secureSocket = tls.connect(0, tlsOptions);
	    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
	    cb(secureSocket);
	  });
	}


	function mergeOptions(target) {
	  for (var i = 1, len = arguments.length; i < len; ++i) {
	    var overrides = arguments[i];
	    if (typeof overrides === 'object') {
	      var keys = Object.keys(overrides);
	      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
	        var k = keys[j];
	        if (overrides[k] !== undefined) {
	          target[k] = overrides[k];
	        }
	      }
	    }
	  }
	  return target;
	}


	var debug;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
	  debug = function() {
	    var args = Array.prototype.slice.call(arguments);
	    if (typeof args[0] === 'string') {
	      args[0] = 'TUNNEL: ' + args[0];
	    } else {
	      args.unshift('TUNNEL:');
	    }
	    console.error.apply(console, args);
	  }
	} else {
	  debug = function() {};
	}
	exports.debug = debug; // for test


/***/ },
/* 103 */
/***/ function(module, exports) {

	module.exports = require("net");

/***/ },
/* 104 */
/***/ function(module, exports) {

	module.exports = require("tls");

/***/ },
/* 105 */
/***/ function(module, exports) {

	module.exports = require("url");

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var debug = __webpack_require__(107)('git-download-archive');
	var gitSpawnedStream = __webpack_require__(109);
	var extend = __webpack_require__(130);

	function archive(repoPath, opts) {
	  var opts = opts || {};

	  var defaults = {
	    rev    : 'HEAD',
	    format : 'tar', // zip
	    prefix : 'repo/'
	  };

	  opts = extend(defaults, opts);

	  var args = ['archive', '--format=' + opts.format, '--prefix=' + opts.prefix, opts.rev];

	  // TODO: implement limit?
	  return gitSpawnedStream(repoPath, args);
	}

	module.exports = archive;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var tty = __webpack_require__(108);

	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Enabled debuggers.
	 */

	var names = []
	  , skips = [];

	/**
	 * Colors.
	 */

	var colors = [6, 2, 3, 4, 5, 1];

	/**
	 * Previous debug() call.
	 */

	var prev = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Is stdout a TTY? Colored output is disabled when `true`.
	 */

	var isatty = tty.isatty(1);

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function color() {
	  return colors[prevColor++ % colors.length];
	}

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	function humanize(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	}

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  function disabled(){}
	  disabled.enabled = false;

	  var match = skips.some(function(re){
	    return re.test(name);
	  });

	  if (match) return disabled;

	  match = names.some(function(re){
	    return re.test(name);
	  });

	  if (!match) return disabled;
	  var c = color();

	  function colored(fmt) {
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (prev[name] || curr);
	    prev[name] = curr;

	    fmt = '  \u001b[9' + c + 'm' + name + ' '
	      + '\u001b[3' + c + 'm\u001b[90m'
	      + fmt + '\u001b[3' + c + 'm'
	      + ' +' + humanize(ms) + '\u001b[0m';

	    console.log.apply(this, arguments);
	  }

	  function plain(fmt) {
	    fmt = coerce(fmt);

	    fmt = new Date().toUTCString()
	      + ' ' + name + ' ' + fmt;
	    console.log.apply(this, arguments);
	  }

	  colored.enabled = plain.enabled = true;

	  return isatty || process.env.DEBUG_COLORS
	    ? colored
	    : plain;
	}

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	/**
	 * Enable specified `namespaces` for debugging.
	 */

	debug.enable = function(namespaces) {
	  namespaces.split(/[\s,]+/)
	  .forEach(function(name){
	    name = name.replace('*', '.*?');
	    if (name[0] == '-') {
	      skips.push(new RegExp('^' + name.substr(1) + '$'));
	    } else {
	      names.push(new RegExp('^' + name + '$'));
	    }
	  });
	};

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	debug.enable(process.env.DEBUG || '');


/***/ },
/* 108 */
/***/ function(module, exports) {

	module.exports = require("tty");

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var run = __webpack_require__(110);
	var spawn = __webpack_require__(128).spawn;
	var debug = __webpack_require__(129)('git-spawned-stream');

	module.exports = function(repoPath, args, limit) {
	  var _args = ['--git-dir=' + repoPath];

	  args.forEach(function(item) {
	    _args.push(item);
	  });

	  debug('args', _args);
	  debug('limit', limit);

	  return run(spawn('git', _args), limit);
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var through = __webpack_require__(111);
	var limit = __webpack_require__(127);

	function readStreamIfy(ps, maxBytes) {
	  var err = '';
	  var limitExceeded = false;
	  var stream = through();

	  if (maxBytes) {
	    limit(ps, maxBytes);
	  }

	  ps.on('error', function(err) {
	    stream.emit('error', err);
	  });

	  ps.on('max-limit-exceeded', function() {
	    limitExceeded = true;
	  });

	  ps.stdout.on('data', function(data) {
	    stream.emit('data', data);
	  });

	  ps.stderr.on('data', function(buf) {
	    err += buf;
	  });

	  ps.on('close', function(code) {
	    // code === null when child_process is killed
	    if (code !== 0 && code !== null) {
	      stream.emit('error', new Error('non-zero exit code ' + code + '\n\n' + err));
	    } else {
	      stream.emit('end', limitExceeded);
	    }
	  });

	  // this was needed after switching to through2
	  stream.pause();
	  setImmediate(function() { stream.resume(); });

	  return stream;
	}

	module.exports = readStreamIfy;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(112)
	  , inherits  = __webpack_require__(14).inherits
	  , xtend     = __webpack_require__(121)


	// a noop _transform function
	function noop (chunk, enc, callback) {
	  callback(null, chunk)
	}


	// create a new export function, used by both the main export and
	// the .ctor export, contains common logic for dealing with arguments
	function through2 (construct) {
	  return function (options, transform, flush) {
	    if (typeof options == 'function') {
	      flush     = transform
	      transform = options
	      options   = {}
	    }

	    if (typeof transform != 'function')
	      transform = noop

	    if (typeof flush != 'function')
	      flush = null

	    return construct(options, transform, flush)
	  }
	}


	// main export, just make me a transform stream!
	module.exports = through2(function (options, transform, flush) {
	  var t2 = new Transform(options)

	  t2._transform = transform

	  if (flush)
	    t2._flush = flush

	  return t2
	})


	// make me a reusable prototype that I can `new`, or implicitly `new`
	// with a constructor call
	module.exports.ctor = through2(function (options, transform, flush) {
	  function Through2 (override) {
	    if (!(this instanceof Through2))
	      return new Through2(override)

	    this.options = xtend(options, override)

	    Transform.call(this, this.options)
	  }

	  inherits(Through2, Transform)

	  Through2.prototype._transform = transform

	  if (flush)
	    Through2.prototype._flush = flush

	  return Through2
	})


	module.exports.obj = through2(function (options, transform, flush) {
	  var t2 = new Transform(xtend({ objectMode: true }, options))

	  t2._transform = transform

	  if (flush)
	    t2._flush = flush

	  return t2
	})


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(113)


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(114);

	/*<replacement>*/
	var util = __webpack_require__(115);
	util.inherits = __webpack_require__(56);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined)
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  var ts = this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('finish', function() {
	    if ('function' === typeof this._flush)
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var rs = stream._readableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(115);
	util.inherits = __webpack_require__(56);
	/*</replacement>*/

	var Readable = __webpack_require__(116);
	var Writable = __webpack_require__(120);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}


/***/ },
/* 115 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(117);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(118).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(76).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(13);

	/*<replacement>*/
	var util = __webpack_require__(115);
	util.inherits = __webpack_require__(56);
	/*</replacement>*/

	var StringDecoder;

	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = false;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // In streams that never have any data, and do push(null) right away,
	  // the consumer can miss the 'end' event if they do some I/O before
	  // consuming the stream.  So, we don't emit('end') until some reading
	  // happens.
	  this.calledRead = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(119).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (typeof chunk === 'string' && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null || chunk === undefined) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      // update the buffer info.
	      state.length += state.objectMode ? 1 : chunk.length;
	      if (addToFront) {
	        state.buffer.unshift(chunk);
	      } else {
	        state.reading = false;
	        state.buffer.push(chunk);
	      }

	      if (state.needReadable)
	        emitReadable(stream);

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(119).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  var state = this._readableState;
	  state.calledRead = true;
	  var nOrig = n;
	  var ret;

	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    ret = null;

	    // In cases where the decoder did not receive enough data
	    // to produce a full chunk, then immediately received an
	    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
	    // howMuchToRead will see this and coerce the amount to
	    // read to zero (because it's looking at the length of the
	    // first <Buffer > in state.buffer), and we'll end up here.
	    //
	    // This can only happen via state.decoder -- no other venue
	    // exists for pushing a zero-length chunk into state.buffer
	    // and triggering this behavior. In this case, we return our
	    // remaining data and end the stream, if appropriate.
	    if (state.length > 0 && state.decoder) {
	      ret = fromList(n, state);
	      state.length -= ret.length;
	    }

	    if (state.length === 0)
	      endReadable(this);

	    return ret;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length - n <= state.highWaterMark)
	    doRead = true;

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading)
	    doRead = false;

	  if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read called its callback synchronously, then `reading`
	  // will be false, and we need to re-evaluate how much data we
	  // can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we happened to read() exactly the remaining amount in the
	  // buffer, and the EOF has been seen at this point, then make sure
	  // that we emit 'end' on the very next tick.
	  if (state.ended && !state.endEmitted && state.length === 0)
	    endReadable(this);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // if we've ended and we have some data left, then emit
	  // 'readable' now to make sure it gets picked up.
	  if (state.length > 0)
	    emitReadable(stream);
	  else
	    endReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (state.emittedReadable)
	    return;

	  state.emittedReadable = true;
	  if (state.sync)
	    process.nextTick(function() {
	      emitReadable_(stream);
	    });
	  else
	    emitReadable_(stream);
	}

	function emitReadable_(stream) {
	  stream.emit('readable');
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable !== src) return;
	    cleanup();
	  }

	  function onend() {
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (!dest._writableState || dest._writableState.needDrain)
	      ondrain();
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    // the handler that waits for readable events after all
	    // the data gets sucked out in flow.
	    // This would be easier to follow with a .once() handler
	    // in flow(), but that is too slow.
	    this.on('readable', pipeOnReadable);

	    state.flowing = true;
	    process.nextTick(function() {
	      flow(src);
	    });
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var dest = this;
	    var state = src._readableState;
	    state.awaitDrain--;
	    if (state.awaitDrain === 0)
	      flow(src);
	  };
	}

	function flow(src) {
	  var state = src._readableState;
	  var chunk;
	  state.awaitDrain = 0;

	  function write(dest, i, list) {
	    var written = dest.write(chunk);
	    if (false === written) {
	      state.awaitDrain++;
	    }
	  }

	  while (state.pipesCount && null !== (chunk = src.read())) {

	    if (state.pipesCount === 1)
	      write(state.pipes, 0, null);
	    else
	      forEach(state.pipes, write);

	    src.emit('data', chunk);

	    // if anyone needs a drain, then we have to wait for that.
	    if (state.awaitDrain > 0)
	      return;
	  }

	  // if every destination was unpiped, either before entering this
	  // function, or in the while loop, then stop flowing.
	  //
	  // NB: This is a pretty rare edge case.
	  if (state.pipesCount === 0) {
	    state.flowing = false;

	    // if there were data event listeners added, then switch to old mode.
	    if (EE.listenerCount(src, 'data') > 0)
	      emitDataEvents(src);
	    return;
	  }

	  // at this point, no one needed a drain, so we just ran out of data
	  // on the next readable event, start it over again.
	  state.ranOut = true;
	}

	function pipeOnReadable() {
	  if (this._readableState.ranOut) {
	    this._readableState.ranOut = false;
	    flow(this);
	  }
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data' && !this._readableState.flowing)
	    emitDataEvents(this);

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        this.read(0);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  emitDataEvents(this);
	  this.read(0);
	  this.emit('resume');
	};

	Readable.prototype.pause = function() {
	  emitDataEvents(this, true);
	  this.emit('pause');
	};

	function emitDataEvents(stream, startPaused) {
	  var state = stream._readableState;

	  if (state.flowing) {
	    // https://github.com/isaacs/readable-stream/issues/16
	    throw new Error('Cannot switch to old mode now.');
	  }

	  var paused = startPaused || false;
	  var readable = false;

	  // convert to an old-style stream.
	  stream.readable = true;
	  stream.pipe = Stream.prototype.pipe;
	  stream.on = stream.addListener = Stream.prototype.on;

	  stream.on('readable', function() {
	    readable = true;

	    var c;
	    while (!paused && (null !== (c = stream.read())))
	      stream.emit('data', c);

	    if (c === null) {
	      readable = false;
	      stream._readableState.needReadable = true;
	    }
	  });

	  stream.pause = function() {
	    paused = true;
	    this.emit('pause');
	  };

	  stream.resume = function() {
	    paused = false;
	    if (readable)
	      process.nextTick(function() {
	        stream.emit('readable');
	      });
	    else
	      this.read(0);
	    this.emit('resume');
	  };

	  // now make it start, just in case it hadn't already.
	  stream.emit('readable');
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    //if (state.objectMode && util.isNullOrUndefined(chunk))
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (typeof stream[i] === 'function' &&
	        typeof this[i] === 'undefined') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted && state.calledRead) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}


/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 118 */
/***/ function(module, exports) {

	module.exports = require("buffer");

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(118).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(118).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(115);
	util.inherits = __webpack_require__(56);
	/*</replacement>*/

	var Stream = __webpack_require__(13);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, becuase any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(114);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (typeof cb !== 'function')
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb))
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);

	  return ret;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      cb(er);
	    });
	  else
	    cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished && !state.bufferProcessing && state.buffer.length)
	      clearBuffer(stream, state);

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  cb();
	  if (finished)
	    finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  for (var c = 0; c < state.buffer.length; c++) {
	    var entry = state.buffer[c];
	    var chunk = entry.chunk;
	    var encoding = entry.encoding;
	    var cb = entry.callback;
	    var len = state.objectMode ? 1 : chunk.length;

	    doWrite(stream, state, len, chunk, encoding, cb);

	    // if we didn't call the onwrite immediately, then
	    // it means that we need to wait until it does.
	    // also, that means that the chunk and cb are currently
	    // being processed, so move the buffer counter past them.
	    if (state.writing) {
	      c++;
	      break;
	    }
	  }

	  state.bufferProcessing = false;
	  if (c < state.buffer.length)
	    state.buffer = state.buffer.slice(c);
	  else
	    state.buffer.length = 0;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (typeof chunk !== 'undefined' && chunk !== null)
	    this.write(chunk, encoding);

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    state.finished = true;
	    stream.emit('finish');
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var Keys = __webpack_require__(122)
	var hasKeys = __webpack_require__(126)

	module.exports = extend

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        if (!hasKeys(source)) {
	            continue
	        }

	        var keys = Keys(source)

	        for (var j = 0; j < keys.length; j++) {
	            var name = keys[j]
	            target[name] = source[name]
	        }
	    }

	    return target
	}


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Object.keys || __webpack_require__(123);



/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
		"use strict";

		// modified from https://github.com/kriskowal/es5-shim
		var has = Object.prototype.hasOwnProperty,
			toString = Object.prototype.toString,
			forEach = __webpack_require__(124),
			isArgs = __webpack_require__(125),
			hasDontEnumBug = !({'toString': null}).propertyIsEnumerable('toString'),
			hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),
			dontEnums = [
				"toString",
				"toLocaleString",
				"valueOf",
				"hasOwnProperty",
				"isPrototypeOf",
				"propertyIsEnumerable",
				"constructor"
			],
			keysShim;

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object',
				isFunction = toString.call(object) === '[object Function]',
				isArguments = isArgs(object),
				theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError("Object.keys called on a non-object");
			}

			if (isArguments) {
				forEach(object, function (value) {
					theKeys.push(value);
				});
			} else {
				var name,
					skipProto = hasProtoEnumBug && isFunction;

				for (name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(name);
					}
				}
			}

			if (hasDontEnumBug) {
				var ctor = object.constructor,
					skipConstructor = ctor && ctor.prototype === object;

				forEach(dontEnums, function (dontEnum) {
					if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
						theKeys.push(dontEnum);
					}
				});
			}
			return theKeys;
		};

		module.exports = keysShim;
	}());



/***/ },
/* 124 */
/***/ function(module, exports) {

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	var isFunction = function (fn) {
		var isFunc = (typeof fn === 'function' && !(fn instanceof RegExp)) || toString.call(fn) === '[object Function]';
		if (!isFunc && typeof window !== 'undefined') {
			isFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;
		}
		return isFunc;
	};

	module.exports = function forEach(obj, fn) {
		if (!isFunction(fn)) {
			throw new TypeError('iterator must be a function');
		}
		var i, k,
			isString = typeof obj === 'string',
			l = obj.length,
			context = arguments.length > 2 ? arguments[2] : null;
		if (l === +l) {
			for (i = 0; i < l; i++) {
				if (context === null) {
					fn(isString ? obj.charAt(i) : obj[i], i, obj);
				} else {
					fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
				}
			}
		} else {
			for (k in obj) {
				if (hasOwn.call(obj, k)) {
					if (context === null) {
						fn(obj[k], k, obj);
					} else {
						fn.call(context, obj[k], k, obj);
					}
				}
			}
		}
	};



/***/ },
/* 125 */
/***/ function(module, exports) {

	var toString = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toString.call(value);
		var isArguments = str === '[object Arguments]';
		if (!isArguments) {
			isArguments = str !== '[object Array]'
				&& value !== null
				&& typeof value === 'object'
				&& typeof value.length === 'number'
				&& value.length >= 0
				&& toString.call(value.callee) === '[object Function]';
		}
		return isArguments;
	};



/***/ },
/* 126 */
/***/ function(module, exports) {

	module.exports = hasKeys

	function hasKeys(source) {
	    return source !== null &&
	        (typeof source === "object" ||
	        typeof source === "function")
	}


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Limit the output of `child_process.spawn` to a number of bytes
	 * and kill the child process if it exceeds that size.
	 *
	 * @param {Object} ps - ChildProcess object
	 * @param {Number} max
	 * @return {Object} ps - ChildProcess object
	 */

	var os = __webpack_require__(21);
	var SIGNAL = (os.platform().indexOf('win') !== -1) ? 'SIGKILL': 'SIGHUP';

	function limit(ps, max) {
	  if (!limit) { return ps; }

	  var size = 0;

	  ps.stdout.on('data', function(data) {
	    size += data.length;

	    if (size > max) {
	      // data could still be emitted before the process closes
	      ps.stdout.removeAllListeners('data');
	      ps.emit('max-limit-exceeded', size);
	      ps.kill(SIGNAL);
	    }
	  });

	  return ps;
	}

	module.exports = limit;


/***/ },
/* 128 */
/***/ function(module, exports) {

	module.exports = require("child_process");

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var tty = __webpack_require__(108);

	/**
	 * Expose `debug()` as the module.
	 */

	module.exports = debug;

	/**
	 * Enabled debuggers.
	 */

	var names = []
	  , skips = [];

	/**
	 * Colors.
	 */

	var colors = [6, 2, 3, 4, 5, 1];

	/**
	 * Previous debug() call.
	 */

	var prev = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Is stdout a TTY? Colored output is disabled when `true`.
	 */

	var isatty = tty.isatty(1);

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function color() {
	  return colors[prevColor++ % colors.length];
	}

	/**
	 * Humanize the given `ms`.
	 *
	 * @param {Number} m
	 * @return {String}
	 * @api private
	 */

	function humanize(ms) {
	  var sec = 1000
	    , min = 60 * 1000
	    , hour = 60 * min;

	  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
	  if (ms >= min) return (ms / min).toFixed(1) + 'm';
	  if (ms >= sec) return (ms / sec | 0) + 's';
	  return ms + 'ms';
	}

	/**
	 * Create a debugger with the given `name`.
	 *
	 * @param {String} name
	 * @return {Type}
	 * @api public
	 */

	function debug(name) {
	  function disabled(){}
	  disabled.enabled = false;

	  var match = skips.some(function(re){
	    return re.test(name);
	  });

	  if (match) return disabled;

	  match = names.some(function(re){
	    return re.test(name);
	  });

	  if (!match) return disabled;
	  var c = color();

	  function colored(fmt) {
	    fmt = coerce(fmt);

	    var curr = new Date;
	    var ms = curr - (prev[name] || curr);
	    prev[name] = curr;

	    fmt = '  \u001b[9' + c + 'm' + name + ' '
	      + '\u001b[3' + c + 'm\u001b[90m'
	      + fmt + '\u001b[3' + c + 'm'
	      + ' +' + humanize(ms) + '\u001b[0m';

	    console.log.apply(this, arguments);
	  }

	  function plain(fmt) {
	    fmt = coerce(fmt);

	    fmt = new Date().toUTCString()
	      + ' ' + name + ' ' + fmt;
	    console.log.apply(this, arguments);
	  }

	  colored.enabled = plain.enabled = true;

	  return isatty || process.env.DEBUG_COLORS
	    ? colored
	    : plain;
	}

	/**
	 * Coerce `val`.
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	/**
	 * Enable specified `namespaces` for debugging.
	 */

	debug.enable = function(namespaces) {
	  namespaces.split(/[\s,]+/)
	  .forEach(function(name){
	    name = name.replace('*', '.*?');
	    if (name[0] == '-') {
	      skips.push(new RegExp('^' + name.substr(1) + '$'));
	    } else {
	      names.push(new RegExp('^' + name + '$'));
	    }
	  });
	};

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	debug.enable(process.env.DEBUG || '');


/***/ },
/* 130 */
/***/ function(module, exports) {

	module.exports = extend

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ERR = __webpack_require__(2);
	var word_wrap = __webpack_require__(3);
	module.exports = {};
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 132 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var EventEmitter = __webpack_require__(76).EventEmitter;
	var spawn = __webpack_require__(128).spawn;
	var path = __webpack_require__(18);
	var dirname = path.dirname;
	var basename = path.basename;

	/**
	 * Expose the root command.
	 */

	exports = module.exports = new Command();

	/**
	 * Expose `Command`.
	 */

	exports.Command = Command;

	/**
	 * Expose `Option`.
	 */

	exports.Option = Option;

	/**
	 * Initialize a new `Option` with the given `flags` and `description`.
	 *
	 * @param {String} flags
	 * @param {String} description
	 * @api public
	 */

	function Option(flags, description) {
	  this.flags = flags;
	  this.required = ~flags.indexOf('<');
	  this.optional = ~flags.indexOf('[');
	  this.bool = !~flags.indexOf('-no-');
	  flags = flags.split(/[ ,|]+/);
	  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();
	  this.long = flags.shift();
	  this.description = description || '';
	}

	/**
	 * Return option name.
	 *
	 * @return {String}
	 * @api private
	 */

	Option.prototype.name = function() {
	  return this.long
	    .replace('--', '')
	    .replace('no-', '');
	};

	/**
	 * Check if `arg` matches the short or long flag.
	 *
	 * @param {String} arg
	 * @return {Boolean}
	 * @api private
	 */

	Option.prototype.is = function(arg) {
	  return arg == this.short || arg == this.long;
	};

	/**
	 * Initialize a new `Command`.
	 *
	 * @param {String} name
	 * @api public
	 */

	function Command(name) {
	  this.commands = [];
	  this.options = [];
	  this._execs = [];
	  this._allowUnknownOption = false;
	  this._args = [];
	  this._name = name;
	}

	/**
	 * Inherit from `EventEmitter.prototype`.
	 */

	Command.prototype.__proto__ = EventEmitter.prototype;

	/**
	 * Add command `name`.
	 *
	 * The `.action()` callback is invoked when the
	 * command `name` is specified via __ARGV__,
	 * and the remaining arguments are applied to the
	 * function for access.
	 *
	 * When the `name` is "*" an un-matched command
	 * will be passed as the first arg, followed by
	 * the rest of __ARGV__ remaining.
	 *
	 * Examples:
	 *
	 *      program
	 *        .version('0.0.1')
	 *        .option('-C, --chdir <path>', 'change the working directory')
	 *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
	 *        .option('-T, --no-tests', 'ignore test hook')
	 *
	 *      program
	 *        .command('setup')
	 *        .description('run remote setup commands')
	 *        .action(function() {
	 *          console.log('setup');
	 *        });
	 *
	 *      program
	 *        .command('exec <cmd>')
	 *        .description('run the given remote command')
	 *        .action(function(cmd) {
	 *          console.log('exec "%s"', cmd);
	 *        });
	 *
	 *      program
	 *        .command('teardown <dir> [otherDirs...]')
	 *        .description('run teardown commands')
	 *        .action(function(dir, otherDirs) {
	 *          console.log('dir "%s"', dir);
	 *          if (otherDirs) {
	 *            otherDirs.forEach(function (oDir) {
	 *              console.log('dir "%s"', oDir);
	 *            });
	 *          }
	 *        });
	 *
	 *      program
	 *        .command('*')
	 *        .description('deploy the given env')
	 *        .action(function(env) {
	 *          console.log('deploying "%s"', env);
	 *        });
	 *
	 *      program.parse(process.argv);
	  *
	 * @param {String} name
	 * @param {String} [desc] for git-style sub-commands
	 * @return {Command} the new command
	 * @api public
	 */

	Command.prototype.command = function(name, desc) {
	  var args = name.split(/ +/);
	  var cmd = new Command(args.shift());

	  if (desc) {
	    cmd.description(desc);
	    this.executables = true;
	    this._execs[cmd._name] = true;
	  }

	  this.commands.push(cmd);
	  cmd.parseExpectedArgs(args);
	  cmd.parent = this;

	  if (desc) return this;
	  return cmd;
	};

	/**
	 * Add an implicit `help [cmd]` subcommand
	 * which invokes `--help` for the given command.
	 *
	 * @api private
	 */

	Command.prototype.addImplicitHelpCommand = function() {
	  this.command('help [cmd]', 'display help for [cmd]');
	};

	/**
	 * Parse expected `args`.
	 *
	 * For example `["[type]"]` becomes `[{ required: false, name: 'type' }]`.
	 *
	 * @param {Array} args
	 * @return {Command} for chaining
	 * @api public
	 */

	Command.prototype.parseExpectedArgs = function(args) {
	  if (!args.length) return;
	  var self = this;
	  args.forEach(function(arg) {
	    var argDetails = {
	      required: false,
	      name: '',
	      variadic: false
	    };

	    switch (arg[0]) {
	      case '<':
	        argDetails.required = true;
	        argDetails.name = arg.slice(1, -1);
	        break;
	      case '[':
	        argDetails.name = arg.slice(1, -1);
	        break;
	    }

	    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {
	      argDetails.variadic = true;
	      argDetails.name = argDetails.name.slice(0, -3);
	    }
	    if (argDetails.name) {
	      self._args.push(argDetails);
	    }
	  });
	  return this;
	};

	/**
	 * Register callback `fn` for the command.
	 *
	 * Examples:
	 *
	 *      program
	 *        .command('help')
	 *        .description('display verbose help')
	 *        .action(function() {
	 *           // output help here
	 *        });
	 *
	 * @param {Function} fn
	 * @return {Command} for chaining
	 * @api public
	 */

	Command.prototype.action = function(fn) {
	  var self = this;
	  var listener = function(args, unknown) {
	    // Parse any so-far unknown options
	    args = args || [];
	    unknown = unknown || [];

	    var parsed = self.parseOptions(unknown);

	    // Output help if necessary
	    outputHelpIfNecessary(self, parsed.unknown);

	    // If there are still any unknown options, then we simply
	    // die, unless someone asked for help, in which case we give it
	    // to them, and then we die.
	    if (parsed.unknown.length > 0) {
	      self.unknownOption(parsed.unknown[0]);
	    }

	    // Leftover arguments need to be pushed back. Fixes issue #56
	    if (parsed.args.length) args = parsed.args.concat(args);

	    self._args.forEach(function(arg, i) {
	      if (arg.required && null == args[i]) {
	        self.missingArgument(arg.name);
	      } else if (arg.variadic) {
	        if (i !== self._args.length - 1) {
	          self.variadicArgNotLast(arg.name);
	        }

	        args[i] = args.splice(i);
	      }
	    });

	    // Always append ourselves to the end of the arguments,
	    // to make sure we match the number of arguments the user
	    // expects
	    if (self._args.length) {
	      args[self._args.length] = self;
	    } else {
	      args.push(self);
	    }

	    fn.apply(self, args);
	  };
	  this.parent.on(this._name, listener);
	  if (this._alias) this.parent.on(this._alias, listener);
	  return this;
	};

	/**
	 * Define option with `flags`, `description` and optional
	 * coercion `fn`.
	 *
	 * The `flags` string should contain both the short and long flags,
	 * separated by comma, a pipe or space. The following are all valid
	 * all will output this way when `--help` is used.
	 *
	 *    "-p, --pepper"
	 *    "-p|--pepper"
	 *    "-p --pepper"
	 *
	 * Examples:
	 *
	 *     // simple boolean defaulting to false
	 *     program.option('-p, --pepper', 'add pepper');
	 *
	 *     --pepper
	 *     program.pepper
	 *     // => Boolean
	 *
	 *     // simple boolean defaulting to true
	 *     program.option('-C, --no-cheese', 'remove cheese');
	 *
	 *     program.cheese
	 *     // => true
	 *
	 *     --no-cheese
	 *     program.cheese
	 *     // => false
	 *
	 *     // required argument
	 *     program.option('-C, --chdir <path>', 'change the working directory');
	 *
	 *     --chdir /tmp
	 *     program.chdir
	 *     // => "/tmp"
	 *
	 *     // optional argument
	 *     program.option('-c, --cheese [type]', 'add cheese [marble]');
	 *
	 * @param {String} flags
	 * @param {String} description
	 * @param {Function|Mixed} fn or default
	 * @param {Mixed} defaultValue
	 * @return {Command} for chaining
	 * @api public
	 */

	Command.prototype.option = function(flags, description, fn, defaultValue) {
	  var self = this
	    , option = new Option(flags, description)
	    , oname = option.name()
	    , name = camelcase(oname);

	  // default as 3rd arg
	  if (typeof fn != 'function') {
	    defaultValue = fn;
	    fn = null;
	  }

	  // preassign default value only for --no-*, [optional], or <required>
	  if (false == option.bool || option.optional || option.required) {
	    // when --no-* we make sure default is true
	    if (false == option.bool) defaultValue = true;
	    // preassign only if we have a default
	    if (undefined !== defaultValue) self[name] = defaultValue;
	  }

	  // register the option
	  this.options.push(option);

	  // when it's passed assign the value
	  // and conditionally invoke the callback
	  this.on(oname, function(val) {
	    // coercion
	    if (null !== val && fn) val = fn(val, undefined === self[name]
	      ? defaultValue
	      : self[name]);

	    // unassigned or bool
	    if ('boolean' == typeof self[name] || 'undefined' == typeof self[name]) {
	      // if no value, bool true, and we have a default, then use it!
	      if (null == val) {
	        self[name] = option.bool
	          ? defaultValue || true
	          : false;
	      } else {
	        self[name] = val;
	      }
	    } else if (null !== val) {
	      // reassign
	      self[name] = val;
	    }
	  });

	  return this;
	};

	/**
	 * Allow unknown options on the command line.
	 *
	 * @param {Boolean} arg if `true` or omitted, no error will be thrown
	 * for unknown options.
	 * @api public
	 */
	Command.prototype.allowUnknownOption = function(arg) {
	    this._allowUnknownOption = arguments.length === 0 || arg;
	    return this;
	};

	/**
	 * Parse `argv`, settings options and invoking commands when defined.
	 *
	 * @param {Array} argv
	 * @return {Command} for chaining
	 * @api public
	 */

	Command.prototype.parse = function(argv) {
	  // implicit help
	  if (this.executables) this.addImplicitHelpCommand();

	  // store raw args
	  this.rawArgs = argv;

	  // guess name
	  this._name = this._name || basename(argv[1], '.js');

	  // process argv
	  var parsed = this.parseOptions(this.normalize(argv.slice(2)));
	  var args = this.args = parsed.args;

	  var result = this.parseArgs(this.args, parsed.unknown);

	  // executable sub-commands
	  var name = result.args[0];
	  if (this._execs[name] && typeof this._execs[name] != "function") {
	    return this.executeSubCommand(argv, args, parsed.unknown);
	  }

	  return result;
	};

	/**
	 * Execute a sub-command executable.
	 *
	 * @param {Array} argv
	 * @param {Array} args
	 * @param {Array} unknown
	 * @api private
	 */

	Command.prototype.executeSubCommand = function(argv, args, unknown) {
	  args = args.concat(unknown);

	  if (!args.length) this.help();
	  if ('help' == args[0] && 1 == args.length) this.help();

	  // <cmd> --help
	  if ('help' == args[0]) {
	    args[0] = args[1];
	    args[1] = '--help';
	  }

	  // executable
	  var dir = dirname(argv[1]);
	  var bin = basename(argv[1], '.js') + '-' + args[0];

	  // check for ./<bin> first
	  var local = path.join(dir, bin);

	  // run it
	  args = args.slice(1);
	  args.unshift(local);
	  var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
	  proc.on('error', function(err) {
	    if (err.code == "ENOENT") {
	      console.error('\n  %s(1) does not exist, try --help\n', bin);
	    } else if (err.code == "EACCES") {
	      console.error('\n  %s(1) not executable. try chmod or run with root\n', bin);
	    }
	  });

	  this.runningCommand = proc;
	};

	/**
	 * Normalize `args`, splitting joined short flags. For example
	 * the arg "-abc" is equivalent to "-a -b -c".
	 * This also normalizes equal sign and splits "--abc=def" into "--abc def".
	 *
	 * @param {Array} args
	 * @return {Array}
	 * @api private
	 */

	Command.prototype.normalize = function(args) {
	  var ret = []
	    , arg
	    , lastOpt
	    , index;

	  for (var i = 0, len = args.length; i < len; ++i) {
	    arg = args[i];
	    if (i > 0) {
	      lastOpt = this.optionFor(args[i-1]);
	    }

	    if (arg === '--') {
	      // Honor option terminator
	      ret = ret.concat(args.slice(i));
	      break;
	    } else if (lastOpt && lastOpt.required) {
	      ret.push(arg);
	    } else if (arg.length > 1 && '-' == arg[0] && '-' != arg[1]) {
	      arg.slice(1).split('').forEach(function(c) {
	        ret.push('-' + c);
	      });
	    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {
	      ret.push(arg.slice(0, index), arg.slice(index + 1));
	    } else {
	      ret.push(arg);
	    }
	  }

	  return ret;
	};

	/**
	 * Parse command `args`.
	 *
	 * When listener(s) are available those
	 * callbacks are invoked, otherwise the "*"
	 * event is emitted and those actions are invoked.
	 *
	 * @param {Array} args
	 * @return {Command} for chaining
	 * @api private
	 */

	Command.prototype.parseArgs = function(args, unknown) {
	  var name;

	  if (args.length) {
	    name = args[0];
	    if (this.listeners(name).length) {
	      this.emit(args.shift(), args, unknown);
	    } else {
	      this.emit('*', args);
	    }
	  } else {
	    outputHelpIfNecessary(this, unknown);

	    // If there were no args and we have unknown options,
	    // then they are extraneous and we need to error.
	    if (unknown.length > 0) {
	      this.unknownOption(unknown[0]);
	    }
	  }

	  return this;
	};

	/**
	 * Return an option matching `arg` if any.
	 *
	 * @param {String} arg
	 * @return {Option}
	 * @api private
	 */

	Command.prototype.optionFor = function(arg) {
	  for (var i = 0, len = this.options.length; i < len; ++i) {
	    if (this.options[i].is(arg)) {
	      return this.options[i];
	    }
	  }
	};

	/**
	 * Parse options from `argv` returning `argv`
	 * void of these options.
	 *
	 * @param {Array} argv
	 * @return {Array}
	 * @api public
	 */

	Command.prototype.parseOptions = function(argv) {
	  var args = []
	    , len = argv.length
	    , literal
	    , option
	    , arg;

	  var unknownOptions = [];

	  // parse options
	  for (var i = 0; i < len; ++i) {
	    arg = argv[i];

	    // literal args after --
	    if ('--' == arg) {
	      literal = true;
	      continue;
	    }

	    if (literal) {
	      args.push(arg);
	      continue;
	    }

	    // find matching Option
	    option = this.optionFor(arg);

	    // option is defined
	    if (option) {
	      // requires arg
	      if (option.required) {
	        arg = argv[++i];
	        if (null == arg) return this.optionMissingArgument(option);
	        this.emit(option.name(), arg);
	      // optional arg
	      } else if (option.optional) {
	        arg = argv[i+1];
	        if (null == arg || ('-' == arg[0] && '-' != arg)) {
	          arg = null;
	        } else {
	          ++i;
	        }
	        this.emit(option.name(), arg);
	      // bool
	      } else {
	        this.emit(option.name());
	      }
	      continue;
	    }

	    // looks like an option
	    if (arg.length > 1 && '-' == arg[0]) {
	      unknownOptions.push(arg);

	      // If the next argument looks like it might be
	      // an argument for this option, we pass it on.
	      // If it isn't, then it'll simply be ignored
	      if (argv[i+1] && '-' != argv[i+1][0]) {
	        unknownOptions.push(argv[++i]);
	      }
	      continue;
	    }

	    // arg
	    args.push(arg);
	  }

	  return { args: args, unknown: unknownOptions };
	};

	/**
	 * Return an object containing options as key-value pairs
	 *
	 * @return {Object}
	 * @api public
	 */
	Command.prototype.opts = function() {
	  var result = {}
	    , len = this.options.length;

	  for (var i = 0 ; i < len; i++) {
	    var key = this.options[i].name();
	    result[key] = key === 'version' ? this._version : this[key];
	  }
	  return result;
	};

	/**
	 * Argument `name` is missing.
	 *
	 * @param {String} name
	 * @api private
	 */

	Command.prototype.missingArgument = function(name) {
	  console.error();
	  console.error("  error: missing required argument `%s'", name);
	  console.error();
	  process.exit(1);
	};

	/**
	 * `Option` is missing an argument, but received `flag` or nothing.
	 *
	 * @param {String} option
	 * @param {String} flag
	 * @api private
	 */

	Command.prototype.optionMissingArgument = function(option, flag) {
	  console.error();
	  if (flag) {
	    console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
	  } else {
	    console.error("  error: option `%s' argument missing", option.flags);
	  }
	  console.error();
	  process.exit(1);
	};

	/**
	 * Unknown option `flag`.
	 *
	 * @param {String} flag
	 * @api private
	 */

	Command.prototype.unknownOption = function(flag) {
	  if(this._allowUnknownOption) return;
	  console.error();
	  console.error("  error: unknown option `%s'", flag);
	  console.error();
	  process.exit(1);
	};

	/**
	 * Variadic argument with `name` is not the last argument as required.
	 *
	 * @param {String} name
	 * @api private
	 */

	Command.prototype.variadicArgNotLast = function(name) {
	  console.error();
	  console.error("  error: variadic arguments must be last `%s'", name);
	  console.error();
	  process.exit(1);
	};

	/**
	 * Set the program version to `str`.
	 *
	 * This method auto-registers the "-V, --version" flag
	 * which will print the version number when passed.
	 *
	 * @param {String} str
	 * @param {String} flags
	 * @return {Command} for chaining
	 * @api public
	 */

	Command.prototype.version = function(str, flags) {
	  if (0 == arguments.length) return this._version;
	  this._version = str;
	  flags = flags || '-V, --version';
	  this.option(flags, 'output the version number');
	  this.on('version', function() {
	    process.stdout.write(str + '\n');
	    process.exit(0);
	  });
	  return this;
	};

	/**
	 * Set the description to `str`.
	 *
	 * @param {String} str
	 * @return {String|Command}
	 * @api public
	 */

	Command.prototype.description = function(str) {
	  if (0 == arguments.length) return this._description;
	  this._description = str;
	  return this;
	};

	/**
	 * Set an alias for the command
	 *
	 * @param {String} alias
	 * @return {String|Command}
	 * @api public
	 */

	Command.prototype.alias = function(alias) {
	  if (0 == arguments.length) return this._alias;
	  this._alias = alias;
	  return this;
	};

	/**
	 * Set / get the command usage `str`.
	 *
	 * @param {String} str
	 * @return {String|Command}
	 * @api public
	 */

	Command.prototype.usage = function(str) {
	  var args = this._args.map(function(arg) {
	    return humanReadableArgName(arg);
	  });

	  var usage = '[options]'
	    + (this.commands.length ? ' [command]' : '')
	    + (this._args.length ? ' ' + args.join(' ') : '');

	  if (0 == arguments.length) return this._usage || usage;
	  this._usage = str;

	  return this;
	};

	/**
	 * Get the name of the command
	 *
	 * @param {String} name
	 * @return {String|Command}
	 * @api public
	 */

	Command.prototype.name = function(name) {
	  return this._name;
	};

	/**
	 * Return the largest option length.
	 *
	 * @return {Number}
	 * @api private
	 */

	Command.prototype.largestOptionLength = function() {
	  return this.options.reduce(function(max, option) {
	    return Math.max(max, option.flags.length);
	  }, 0);
	};

	/**
	 * Return help for options.
	 *
	 * @return {String}
	 * @api private
	 */

	Command.prototype.optionHelp = function() {
	  var width = this.largestOptionLength();

	  // Prepend the help information
	  return [pad('-h, --help', width) + '  ' + 'output usage information']
	    .concat(this.options.map(function(option) {
	      return pad(option.flags, width) + '  ' + option.description;
	      }))
	    .join('\n');
	};

	/**
	 * Return command help documentation.
	 *
	 * @return {String}
	 * @api private
	 */

	Command.prototype.commandHelp = function() {
	  if (!this.commands.length) return '';

	  var commands = this.commands.map(function(cmd) {
	    var args = cmd._args.map(function(arg) {
	      return humanReadableArgName(arg);
	    }).join(' ');

	    return [
	      cmd._name
	        + (cmd._alias
	          ? '|' + cmd._alias
	          : '')
	        + (cmd.options.length
	          ? ' [options]'
	          : '')
	        + ' ' + args
	    , cmd.description()
	    ];
	  });

	  var width = commands.reduce(function(max, command) {
	    return Math.max(max, command[0].length);
	  }, 0);

	  return [
	      ''
	    , '  Commands:'
	    , ''
	    , commands.map(function(cmd) {
	      return pad(cmd[0], width) + '  ' + cmd[1];
	    }).join('\n').replace(/^/gm, '    ')
	    , ''
	  ].join('\n');
	};

	/**
	 * Return program help documentation.
	 *
	 * @return {String}
	 * @api private
	 */

	Command.prototype.helpInformation = function() {
	  var desc = [];
	  if (this._description) {
	    desc = [
	      '  ' + this._description
	      , ''
	    ];
	  }

	  var cmdName = this._name;
	  if(this._alias) {
	    cmdName = cmdName + '|' + this._alias;
	  }
	  var usage = [
	    ''
	    ,'  Usage: ' + cmdName + ' ' + this.usage()
	    , ''
	  ];

	  var cmds = [];
	  var commandHelp = this.commandHelp();
	  if (commandHelp) cmds = [commandHelp];

	  var options = [
	    '  Options:'
	    , ''
	    , '' + this.optionHelp().replace(/^/gm, '    ')
	    , ''
	    , ''
	  ];

	  return usage
	    .concat(cmds)
	    .concat(desc)
	    .concat(options)
	    .join('\n');
	};

	/**
	 * Output help information for this command
	 *
	 * @api public
	 */

	Command.prototype.outputHelp = function() {
	  process.stdout.write(this.helpInformation());
	  this.emit('--help');
	};

	/**
	 * Output help information and exit.
	 *
	 * @api public
	 */

	Command.prototype.help = function() {
	  this.outputHelp();
	  process.exit();
	};

	/**
	 * Camel-case the given `flag`
	 *
	 * @param {String} flag
	 * @return {String}
	 * @api private
	 */

	function camelcase(flag) {
	  return flag.split('-').reduce(function(str, word) {
	    return str + word[0].toUpperCase() + word.slice(1);
	  });
	}

	/**
	 * Pad `str` to `width`.
	 *
	 * @param {String} str
	 * @param {Number} width
	 * @return {String}
	 * @api private
	 */

	function pad(str, width) {
	  var len = Math.max(0, width - str.length);
	  return str + Array(len + 1).join(' ');
	}

	/**
	 * Output help information if necessary
	 *
	 * @param {Command} command to output help for
	 * @param {Array} array of options to search for -h or --help
	 * @api private
	 */

	function outputHelpIfNecessary(cmd, options) {
	  options = options || [];
	  for (var i = 0; i < options.length; i++) {
	    if (options[i] == '--help' || options[i] == '-h') {
	      cmd.outputHelp();
	      process.exit(0);
	    }
	  }
	}

	/**
	 * Takes an argument an returns its human readable equivalent for help usage.
	 *
	 * @param {Object} arg
	 * @return {String}
	 * @api private
	 */

	function humanReadableArgName(arg) {
	  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');

	  return arg.required
	    ? '<' + nameOutput + '>'
	    : '[' + nameOutput + ']'
	}


/***/ }
/******/ ]);
