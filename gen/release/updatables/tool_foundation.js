/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var ERR = __webpack_require__(1);
	var word_wrap = __webpack_require__(2);
	var _ = function _() {};

	module.exports = _;
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 1 */
/***/ function(module, exports) {

	/*
	 * 2011 Peter 'Pita' Martischka
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS-IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var header = "Async Stacktrace:";

	module.exports = function (err, callback)
	{
	  //there is a error
	  if(err != null)
	  {
	    //if there is already a stacktrace avaiable
	    if(err.stack != null)
	    {
	      //split stack by line
	      var stackParts = err.stack.split("\n");
	      
	      //check if there is already a header set, if not add one and a empty line
	      if(stackParts[0] != header)
	      {
	        stackParts.unshift(header,""); 
	      }
	      
	      //add a new stacktrace line
	      var asyncStackLine = new Error().stack.split("\n")[2];
	      stackParts.splice(1,0,asyncStackLine);
	      
	      //join the stacktrace
	      err.stack = stackParts.join("\n");
	    }
	    //no stacktrace, so lets create an error out of this object
	    else
	    {
	      err = new Error(err);
	    }
	  
	    //there is a callback, lets call it
	    if(callback != null)
	    {
	      callback(err);
	    }
	    //no callback, throw the error
	    else
	    {
	      throw err;
	    }
	  }
	  
	  //return true if an error happend
	  return err != null;
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	/*!
	 * word-wrap <https://github.com/jonschlinkert/word-wrap>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 *
	 * @attribution
	 * Adapted from http://james.padolsey.com/javascript/wordwrap-for-javascript/
	 */

	module.exports = function(str, options) {
	  options = options || {};
	  if (str == null) {
	    return str;
	  }

	  var width = options.width || 50;
	  var indent = (typeof options.indent === 'string')
	    ? options.indent
	    : '  ';

	  var newline = options.newline || '\n' + indent;
	  var escape = typeof options.escape === 'function'
	    ? options.escape
	    : identity;

	  var regexString = '.{1,' + width + '}';
	  if (options.cut !== true) {
	    regexString += '([\\s\u200B]+|$)|[^\\s\u200B]+?([\\s\u200B]+|$)';
	  }

	  var re = new RegExp(regexString, 'g');
	  var lines = str.match(re) || [];
	  var result = indent + lines.map(function(line) {
	    if (line.slice(-1) === '\n') {
	      line = line.slice(0, line.length - 1);
	    }
	    return escape(line);
	  }).join(newline);

	  if (options.trim === true) {
	    result = result.replace(/[ \t]*$/gm, '');
	  }
	  return result;
	};

	function identity(str) {
	  return str;
	}


/***/ }
/******/ ]);