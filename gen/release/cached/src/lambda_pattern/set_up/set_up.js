var ERR, word_wrap, fs, npm, download_updatables, copy_if_exists, make_package_json, set_up;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
npm = require('npm');
download_updatables = require('../shared/download_updatables');
copy_if_exists = require('../shared/copy_if_exists');
make_package_json = require('../shared/make_package_json');
set_up = function set_up(src_path, root, metadata, cb) {
  var project_name, gen_path, err, deps, dev_deps;
  project_name = metadata['project_name'];
  gen_path = root + '/generated_local/project';
  fs.remove(gen_path, function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    fs.mkdirp(gen_path, function (arguments, _$param1) {
      err = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      copy_if_exists(root + '/submodules', gen_path, function (arguments, _$param2) {
        err = _$param2;
        if (ERR(err, cb)) {
          return;
        }
        fs.copy(root + '/.es6', gen_path + '/.es6', function (arguments, _$param3) {
          err = _$param3;
          if (ERR(err, cb)) {
            return;
          }
          fs.copy(root + '/_test.es6', gen_path + '/_test.es6', function (arguments, _$param4) {
            err = _$param4;
            if (ERR(err, cb)) {
              return;
            }
            download_updatables(src_path, root, 'HEAD', function (arguments, _$param5) {
              err = _$param5;
              if (ERR(err, cb)) {
                return;
              }
              deps = {
                'a': '^1.0.0',
                'b': '^1.0.0'
              };
              dev_deps = {
                'c': '^1.0.0',
                'd': '^1.0.0'
              };
              make_package_json(src_path, metadata, gen_path, deps, dev_deps, function (arguments, _$param6) {
                err = _$param6;
                if (ERR(err, cb)) {
                  return;
                }
                cb();
              }.bind(this, arguments));
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
module.exports = set_up;
/* Generated by Continuation.js v0.1.7 */