var ERR, word_wrap, test, path, serialfs, set_lambda_state_version;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
test = require('tape');
path = require('path');
serialfs = require('serialfs');
set_lambda_state_version = require('./set_lambda_state_version');
test('set lambda state version', function (t) {
  var cb, err, generated, expected;
  cb = function cb(err, generated, expected) {
    if (err) {
      console.log(word_wrap(err.stack.replace(/\\/g, '\\ '), {
        trim: true,
        width: 80
      }).split('\n').forEach(function (stack_line) {
        console.log(stack_line.replace(/\\ /g, '\\').replace(/ at/g, '\nat').replace(/Error:/g, '\nError:'));
      }));
      t.fail();
      return t.end();
    }
    t.deepEqual(expected, generated);
    t.end();
  };
  set_lambda_state_version(path.resolve(__dirname, 'before'), 12345, function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    serialfs.obj(__dirname + '/before', {}, function (arguments, _$param1, _$param2) {
      err = _$param1;
      generated = _$param2;
      if (ERR(err, cb)) {
        return;
      }
      serialfs.obj(__dirname + '/expected', {}, function (arguments, _$param3, _$param4) {
        err = _$param3;
        expected = _$param4;
        if (ERR(err, cb)) {
          return;
        }
        cb(null, generated, expected);
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
});
/* Generated by Continuation.js v0.1.7 */