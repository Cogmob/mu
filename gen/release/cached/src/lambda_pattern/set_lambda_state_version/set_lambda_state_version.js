var ERR, word_wrap, fs, lambda_state_history, path, yaml, set_lambda_state_version;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
lambda_state_history = require('../shared/lambda_state_history');
path = require('path');
yaml = require('js-yaml');
set_lambda_state_version = function set_lambda_state_version(root, version_number, cb) {
  var err, history, is_test, version;
  fs.readFile(path.resolve(root, 'gen/stored/lambda_state_history.yaml'), 'utf8', function (arguments, _$param0, _$param1) {
    err = _$param0;
    history = _$param1;
    if (ERR(err, cb)) {
      return;
    }
    history = yaml.safeLoad(history);
    fs.exists(path.resolve(root, 'gen/dev/lambda_updatables/test'), function (arguments, _$param2) {
      is_test = _$param2;
      if (!is_test) {
        return cb('have not yet written code to update updatables');
      }
      fs.writeFile(path.resolve(root, 'gen/dev/lambda_updatables/version'), history['states'][version_number]['state_version'] + '\n', 'utf8', function (arguments, _$param3, _$param4) {
        err = _$param3;
        version = _$param4;
        if (ERR(err, cb)) {
          return;
        }
        fs.move(root + '/gen/tools.js', root + '/gen/stored/tools' + '/' + history['current_state_version'] + '.js', function (arguments, _$param5) {
          err = _$param5;
          if (ERR(err, cb)) {
            return;
          }
          fs.move(root + '/gen/stored/tools' + '/' + version_number + '.js', root + '/gen/tools.js', function (arguments, _$param6) {
            err = _$param6;
            if (ERR(err, cb)) {
              return;
            }
            history['current_state_version'] = version_number;
            fs.writeFile(path.resolve(root, 'gen/stored/lambda_state_history.yaml'), yaml.safeDump(history), 'utf8', function (arguments, _$param7) {
              err = _$param7;
              if (ERR(err, cb)) {
                return;
              }
              cb();
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
module.exports = set_lambda_state_version;
/* Generated by Continuation.js v0.1.7 */