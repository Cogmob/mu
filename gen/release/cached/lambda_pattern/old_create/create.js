var ERR, word_wrap, fs, date, ls, path, git, replace_in_file, move_file, create, rename_to_project_name, git_init;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
date = require('date-and-time');
ls = require('ls');
path = require('path');
git = require('simple-git');
replace_in_file = require('../file_io_utils/replace_in_file');
move_file = require('../file_io_utils/move_file');
create = function create(root_path, project_name, cb) {
  var year, err;
  project_path = path.resolve(root_path, project_name);
  year = date.format(new Date(), 'YYYY');
  fs.remove(path.resolve(root_path, project_name), function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    git(root_path).clone('git@bitbucket.org:Cogbot/node_base.git', project_name, function (arguments) {
      fs.remove(path.resolve(project_path, '.git'), function (arguments, _$param1) {
        err = _$param1;
        if (ERR(err, cb)) {
          return;
        }
        replace_in_file([
          project_path,
          'LICENCE.md'
        ], 'yyyy', year, function (arguments, _$param2) {
          err = _$param2;
          if (ERR(err, cb)) {
            return;
          }
          rename_to_project_name(project_path, project_name, function (arguments, _$param3) {
            err = _$param3;
            if (ERR(err, cb)) {
              return;
            }
            git_init(project_path, function (arguments, _$param4) {
              err = _$param4;
              if (ERR(err, cb)) {
                return;
              }
              fs.writeFile(path.resolve(project_path, '.git', 'info', 'exclude'), '.lvimrc', function (arguments, _$param5) {
                err = _$param5;
                if (ERR(err, cb)) {
                  return;
                }
                cb('');
              }.bind(this, arguments));
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
rename_to_project_name = function rename_to_project_name(project_path, project_name, cb) {
  var err;
  move_file([
    project_path,
    'src',
    'module'
  ], [
    project_path,
    'src',
    project_name
  ], function (arguments, _$param6) {
    err = _$param6;
    if (ERR(err, cb)) {
      return;
    }
    move_file([
      project_path,
      'src',
      project_name,
      'func.es6'
    ], [
      project_path,
      'src',
      project_name,
      project_name + '.es6'
    ], function (arguments, _$param7) {
      err = _$param7;
      if (ERR(err, cb)) {
        return;
      }
      move_file([
        project_path,
        'src',
        project_name,
        'func_test.es6'
      ], [
        project_path,
        'src',
        project_name,
        project_name + '_test.es6'
      ], function (arguments, _$param8) {
        err = _$param8;
        if (ERR(err, cb)) {
          return;
        }
        cb();
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
git_init = function git_init(path, cb) {
  var err;
  git(path).init(function (arguments, _$param9) {
    err = _$param9;
    if (ERR(err, cb)) {
      return;
    }
    git(path).add(['*'], function (arguments, _$param10) {
      err = _$param10;
      if (ERR(err, cb)) {
        return;
      }
      git(path).commit('set up project structure', function (arguments, _$param11) {
        err = _$param11;
        if (ERR(err, cb)) {
          return;
        }
        cb();
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
module.exports = create;
/* Generated by Continuation.js v0.1.7 */