var ERR, word_wrap, test, rsv, serialfs, overwrite_tools, set_up, create, build_dev;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
test = require('tape');
rsv = require('path').resolve;
serialfs = require('serialfs');
overwrite_tools = require('./overwrite_tools');
set_up = require('../set_up/set_up');
create = require('../create/create');
build_dev = require('../build_dev/build_dev');
test('overwrite tools', function (t) {
  var cb, err, metadata, recurse, generated, expected;
  cb = function cb(err, generated, expected) {
    if (err) {
      console.log(word_wrap(err.stack.replace(/\\/g, '\\ '), {
        trim: true,
        width: 80
      }).split('\n').forEach(function (stack_line) {
        console.log(stack_line.replace(/\\ /g, '\\').replace(/ at/g, '\nat').replace(/Error:/g, '\nError:'));
      }));
      t.fail();
      return t.end();
    }
    t.deepEqual(expected, generated);
    t.end();
  };
  create(__dirname + '/../..', __dirname, 'test_project', 2000, function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    metadata = { project_name: 'test_project' };
    set_up(__dirname + '/..', __dirname + '/test_project', metadata, function (arguments, _$param1) {
      err = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      build_dev(__dirname + '/test_project', 'test_project', function (arguments, _$param2) {
        err = _$param2;
        if (ERR(err, cb)) {
          return;
        }
        overwrite_tools(rsv(__dirname, 'test_project'), function (arguments, _$param3) {
          err = _$param3;
          if (ERR(err, cb)) {
            return;
          }
          recurse = { gen: { dev: { lambda_updatables: false } } };
          serialfs.obj(rsv(__dirname, 'test_project'), false, recurse, function (arguments, _$param4, _$param5) {
            err = _$param4;
            generated = _$param5;
            if (ERR(err, cb)) {
              return;
            }
            serialfs.obj(rsv(__dirname, 'expected'), false, recurse, function (arguments, _$param6, _$param7) {
              err = _$param6;
              expected = _$param7;
              if (ERR(err, cb)) {
                return;
              }
              cb(null, generated, expected);
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
});
/* Generated by Continuation.js v0.1.7 */