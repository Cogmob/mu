var ERR, word_wrap, fs, create;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
create = function create(src_path, root, project_name, year, cb) {
  var skel_path, gen_path, err, readme, index, test_file, meta;
  skel_path = src_path + '/lambda_pattern/skeleton_data';
  gen_path = root + '/' + project_name;
  fs.copy(skel_path, gen_path, function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    fs.readFile(gen_path + '/readme.md', 'utf8', function (arguments, _$param1, _$param2) {
      err = _$param1;
      readme = _$param2;
      if (ERR(err, cb)) {
        return;
      }
      readme = readme.replace(/\[\[project_name\]\]/g, project_name);
      fs.writeFile(gen_path + '/readme.md', readme, function (arguments, _$param3) {
        err = _$param3;
        if (ERR(err, cb)) {
          return;
        }
        fs.readFile(gen_path + '/.es6', 'utf8', function (arguments, _$param4, _$param5) {
          err = _$param4;
          index = _$param5;
          if (ERR(err, cb)) {
            return;
          }
          index = index.replace(/\[\[project_name\]\]/g, project_name);
          fs.writeFile(gen_path + '/.es6', index, function (arguments, _$param6) {
            err = _$param6;
            if (ERR(err, cb)) {
              return;
            }
            fs.readFile(gen_path + '/_test.es6', 'utf8', function (arguments, _$param7, _$param8) {
              err = _$param7;
              test_file = _$param8;
              if (ERR(err, cb)) {
                return;
              }
              test_file = test_file.replace(/\[\[project_name\]\]/g, project_name);
              fs.writeFile(gen_path + '/_test.es6', test_file, function (arguments, _$param9) {
                err = _$param9;
                if (ERR(err, cb)) {
                  return;
                }
                fs.readFile(gen_path + '/meta/data.yaml', 'utf8', function (arguments, _$param10, _$param11) {
                  err = _$param10;
                  meta = _$param11;
                  if (ERR(err, cb)) {
                    return;
                  }
                  meta = meta.replace(/\[\[project_name\]\]/g, project_name);
                  fs.writeFile(gen_path + '/meta/data.yaml', meta, function (arguments, _$param12) {
                    err = _$param12;
                    if (ERR(err, cb)) {
                      return;
                    }
                    fs.ensureDir(gen_path + '/gen/dev', function (arguments, _$param13) {
                      err = _$param13;
                      if (ERR(err, cb)) {
                        return;
                      }
                      cb(null);
                    }.bind(this, arguments));
                  }.bind(this, arguments));
                }.bind(this, arguments));
              }.bind(this, arguments));
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
module.exports = create;
/* Generated by Continuation.js v0.1.7 */