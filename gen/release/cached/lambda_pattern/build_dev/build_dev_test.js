var ERR, word_wrap, fs, serialfs, test, resolve, create, set_up, build_dev, set_updatables_version;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
serialfs = require('serialfs');
test = require('tape');
resolve = require('path').resolve;
create = require('../create/create');
set_up = require('../set_up/set_up');
build_dev = require('./build_dev');
set_updatables_version = require('../set_updatables_version/set_updatables_version');
test.only('build dev', function (t) {
  var cb, err, metadata, contents, recurse, generated, expected;
  cb = function cb(err, generated, expected) {
    if (err) {
      console.log(word_wrap(err.stack.replace(/\\/g, '\\ '), {
        trim: true,
        width: 80
      }).split('\n').forEach(function (stack_line) {
        console.log(stack_line.replace(/\\ /g, '\\').replace(/ at/g, '\nat').replace(/Error:/g, '\nError:'));
      }));
      t.fail();
      return t.end();
    }
    t.deepEqual(generated, expected);
    t.end();
  };
  create(__dirname + '/../..', __dirname, 'test_project', 2000, function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    fs.mkdirp(__dirname + '/test_project/submodules');
    fs.copy(__dirname + '/test_module_data', __dirname + '/test_project/submodules/test_module', function (arguments, _$param1) {
      err = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      metadata = { project_name: 'test_project' };
      set_up(__dirname + '/..', __dirname + '/test_project', metadata, function (arguments, _$param2) {
        err = _$param2;
        if (ERR(err, cb)) {
          return;
        }
        build_dev(__dirname + '/test_project', 'test_project', function (arguments, _$param3) {
          err = _$param3;
          if (ERR(err, cb)) {
            return;
          }
          contents = {
            gen: {
              '.gitignore': true,
              dev: {
                lambda_updatables: {
                  example_version: true,
                  'LICENCE.md': true
                },
                src: {
                  test_project: {
                    'test_project_test.es6': false,
                    'test_project_test.js': false,
                    'test_project.es6': false,
                    'test_project.js': false,
                    'metadata.yaml': false
                  }
                }
              },
              stored: { 'lambda_state_history.yaml': true }
            }
          };
          recurse = { gen: { dev: { lambda_updatables: false } } };
          generated = serialfs.obj(__dirname + '/test_project', contents, recurse, function (arguments, _$param4, _$param5) {
            err = _$param4;
            generated = _$param5;
            if (ERR(err, cb)) {
              return;
            }
            expected = serialfs.obj(__dirname + '/expected_data', contents, recurse, function (arguments, _$param6, _$param7) {
              err = _$param6;
              expected = _$param7;
              if (ERR(err, cb)) {
                return;
              }
              cb(null, generated, expected);
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
});
/* Generated by Continuation.js v0.1.7 */