var ERR, word_wrap, fs, move_if_exists, modify_es6, convert_es6, modify_main_file, build_tools, build_dev;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
move_if_exists = require('../shared/move_if_exists');
modify_es6 = require('./modify_es6');
convert_es6 = require('./convert_es6');
modify_main_file = require('./modify_main_file');
build_tools = require('./build_tools');
build_dev = function build_dev(root_path, project_name, cb) {
  var gen_path, proj_path, err;
  gen_path = root_path + '/generated_local';
  proj_path = gen_path + '/project';
  move_if_exists(proj_path + '/node_modules', gen_path + '/project_node_modules', function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    fs.remove(proj_path, function (arguments, _$param1) {
      err = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      fs.mkdirp(proj_path, function (arguments, _$param2) {
        err = _$param2;
        if (ERR(err, cb)) {
          return;
        }
        fs.copy(root_path + '/.es6', proj_path + '/.es6', function (arguments, _$param3) {
          err = _$param3;
          if (ERR(err, cb)) {
            return;
          }
          fs.copy(root_path + '/_test.es6', proj_path + '/_test.es6', function (arguments, _$param4) {
            err = _$param4;
            if (ERR(err, cb)) {
              return;
            }
            fs.copy(root_path + '/submodules', proj_path + '/submodules', function (arguments, _$param5) {
              err = _$param5;
              if (ERR(err, cb)) {
                return;
              }
              move_if_exists(root_path + '/project_node_modules', proj_path + '/node_modules', function (arguments, _$param6) {
                err = _$param6;
                if (ERR(err, cb)) {
                  return;
                }
                modify_es6(proj_path, project_name, function (arguments, _$param7) {
                  err = _$param7;
                  if (ERR(err, cb)) {
                    return;
                  }
                  modify_main_file(proj_path, function (arguments, _$param8) {
                    err = _$param8;
                    if (ERR(err, cb)) {
                      return;
                    }
                    convert_es6(proj_path, project_name, function (arguments, _$param9) {
                      err = _$param9;
                      if (ERR(err, cb)) {
                        return;
                      }
                      cb(null);
                    }.bind(this, arguments));
                  }.bind(this, arguments));
                }.bind(this, arguments));
              }.bind(this, arguments));
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
module.exports = build_dev;
/* Generated by Continuation.js v0.1.7 */