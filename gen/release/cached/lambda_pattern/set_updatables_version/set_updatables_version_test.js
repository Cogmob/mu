var ERR, word_wrap, fs, serialfs, test, create, set_updatables_version;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
serialfs = require('serialfs');
test = require('tape');
create = require('../create/create');
set_updatables_version = require('../set_updatables_version/set_updatables_version');
test('create and set updatables version', { timeout: 3000 }, function (t) {
  var cb, src_path, err, commit, contents, generated, expected;
  cb = function cb(err, generated, expected) {
    if (err) {
      console.log(word_wrap(err.stack.replace(/\\/g, '\\ '), {
        trim: true,
        width: 80
      }).split('\n').forEach(function (stack_line) {
        console.log(stack_line.replace(/\\ /g, '\\').replace(/ at/g, '\nat').replace(/Error:/g, '\nError:'));
      }));
      t.fail();
      return t.end();
    }
    t.deepEqual(generated, expected);
    t.end();
  };
  src_path = __dirname + '/../..';
  create(src_path, __dirname, 'test_project', 2000, function (arguments, _$param0) {
    err = _$param0;
    if (ERR(err, cb)) {
      return;
    }
    commit = 'df3c86442b5e9a05e471e0e90f9188bd372f7e48';
    set_updatables_version(src_path, __dirname + '/test_project', commit, function (arguments, _$param1) {
      err = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      contents = {
        gen: {
          '.gitignore': true,
          dev: {
            lambda_updatables: {
              example_version: true,
              'LICENCE.md': true
            }
          },
          stored: { 'lambda_state_history.yaml': true }
        }
      };
      generated = serialfs.obj(__dirname + '/test_project', contents, function (arguments, _$param2, _$param3) {
        err = _$param2;
        generated = _$param3;
        if (ERR(err, cb)) {
          return;
        }
        expected = serialfs.obj(__dirname + '/expected', contents, function (arguments, _$param4, _$param5) {
          err = _$param4;
          expected = _$param5;
          if (ERR(err, cb)) {
            return;
          }
          cb(null, generated, expected);
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
});
/* Generated by Continuation.js v0.1.7 */