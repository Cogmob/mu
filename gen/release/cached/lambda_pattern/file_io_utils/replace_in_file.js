function _toConsumableArray(arr) {
  var i, arr2;
  if (Array.isArray(arr)) {
    i = 0;
    arr2 = Array(arr.length);
    while (i < arr.length) {
      arr2[i] = arr[i];
      i++;
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
var ERR, word_wrap, fs, path, replace_in_file;
'use strict';
ERR = require('async-stacktrace');
word_wrap = require('word-wrap');
fs = require('fs-extra');
path = require('path');
replace_in_file = function replace_in_file(file_path, search, replace, cb) {
  var err, data;
  full_path = path.resolve.apply(path, _toConsumableArray(file_path));
  fs.readFile(full_path, 'utf8', function (arguments, _$param0, _$param1) {
    err = _$param0;
    data = _$param1;
    if (err) {
      return cb(err);
      if (ERR(err, cb)) {
        return;
      }
    }
    fs.writeFile(full_path, data.replace(search, replace), function (arguments, _$param2) {
      err = _$param2;
      if (err) {
        return cb(err);
        if (ERR(err, cb)) {
          return;
        }
      }
      cb();
    }.bind(this, arguments));
  }.bind(this, arguments));
};
module.exports = replace_in_file;
/* Generated by Continuation.js v0.1.7 */