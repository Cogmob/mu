var fs, path, es6, gulp, project_tools, build_code;
'use strict';
fs = require('fs-extra');
path = require('path');
es6 = require('./es6');
gulp = require('gulp');
project_tools = require('../lambda/tools.es6');
build_code = function build_code(project_path, cb) {
  var err;
  fs.copy(path.resolve(project_path, '../../src'), path.resolve(project_path, 'src'), function (arguments, _$param0) {
    err = _$param0;
    if (err) {
      return cb(err);
    }
    project_tools.before_processing(project_path, function (arguments, _$param1) {
      err = _$param1;
      if (err) {
        return cb(err);
      }
      gulp.src('src/**/*.es6').pipe(replace(/\[project\_name\]/g, 'lambda_pattern')).pipe(replace(/cont\(.*err.*\).*;/g, '$& if (err) {return cb(err);};')).pipe(gulp.dest('src')).pipe(babel({ presets: ['es2015'] })).pipe(continuation()).pipe(gulp.dest('src')).on('end', function (arguments, _$param2) {
        err = _$param2;
        if (err) {
          return cb(err);
        }
        gulp.src('src/lambda_pattern/lambda_pattern.js').pipe(header('#!/usr/bin/env node\n\n')).pipe(footer('\nif (!module.parent) {\n    lambda_pattern(function (er) {\n        if (er) {\n           console.log(er.toString());\n        }\n    });\n}')).pipe(gulp.dest('src/lambda_pattern')).on('end', function (arguments, _$param3) {
          err = _$param3;
          if (err) {
            return cb(err);
          }
          project_tools.after_processing(project_path, cb);
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  }.bind(this, arguments));
};
/* Generated by Continuation.js v0.1.7 */