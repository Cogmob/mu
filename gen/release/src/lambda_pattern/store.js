var path, vargs, inquirer, open, git, store;
'use strict';
path = require('path');
vargs = require('vargs-callback');
inquirer = require('inquirer');
open = require('open');
git = require('simple-git');
store = vargs(function (full_path, host, should_prompt, prompt_res, cb) {
  var project_name, remote_path, url, prompt_res, err, er;
  project_name = path.basename(full_path);
  remote_path = 'git@bitbucket.org:Cogbot/' + project_name + '.git';
  url = 'https://bitbucket.org/repo/create';
  if (host === 'github') {
    remote_path = 'git@github.com:Cogmob/' + project_name + '.git';
    url = 'https://github.com/new';
  }
  if (host !== 'bitbucket' && host !== 'github') {
    return cb('please select either bitbucket or github as the host');
  }
  (function (_$cont) {
    if (should_prompt) {
      open(url);
      inquirer.prompt([{
          type: 'list',
          name: 'is_ready',
          message: 'is the remote ready?',
          choices: [
            'yes',
            'no'
          ]
        }]).then(function (arguments, _$param0) {
        prompt_res = _$param0;
        _$cont();
      }.bind(this, arguments));
    } else {
      _$cont();
    }
  }.bind(this)(function (_$err) {
    if (_$err !== undefined)
      return _$cont(_$err);
    (function (_$cont) {
      if (prompt_res.is_ready === 'yes') {
        git(full_path).removeRemote('origin', function (arguments, _$param1) {
          err = _$param1;
          if (err) {
            return cb(err);
          }
          git(full_path).addRemote('origin', remote_path, function (arguments, _$param2) {
            er = _$param2;
            if (er && er !== 'fatal: remote origin already exists.\n') {
              return cb(er);
            }
            git(full_path).push('origin', 'master', ['-u'], function (arguments, _$param3) {
              err = _$param3;
              if (err) {
                return cb(err);
              }
              console.log(remote_path);
              _$cont();
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      } else {
        _$cont();
      }
    }.bind(this)(function (_$err) {
      if (_$err !== undefined)
        return _$cont(_$err);
      cb('');
    }.bind(this)));
  }.bind(this)));
});
module.exports = store;
/* Generated by Continuation.js v0.1.7 */