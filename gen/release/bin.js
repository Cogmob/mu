#!/usr/bin/env node

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = {
	    word_wrap: jspm.import('word-wrap'),
	    // load jspm
	    module_commander: jspm.import('commander'),
	    local_include_create__commander: __webpack_require__(1),
	    ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	    var local_include_create__commander = jspm_res.local_include_create__commander;
	    local_include_create__commander(module_commander, __dirname);
	    module_commander.parse(process.argv);
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  local_include__: __webpack_require__(2),
	  local_include_sharedget_metadata: __webpack_require__(3),
	  local_include_set_up_: __webpack_require__(4),
	  local_include_build_tools_: __webpack_require__(11),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var local_include__, local_include_sharedget_metadata, local_include_set_up_, local_include_build_tools_, _;
	  local_include__ = jspm_res.local_include__;
	  local_include_sharedget_metadata = jspm_res.local_include_sharedget_metadata;
	  local_include_set_up_ = jspm_res.local_include_set_up_;
	  local_include_build_tools_ = jspm_res.local_include_build_tools_;
	  _ = function _(commander, mu_src_path) {
	    var success_message, cb;
	    success_message = 'created a lambda pattern project in your current directory';
	    cb = function cb(e) {
	      if (e) {
	        return console.log(e);
	      }
	      console.log(success_message);
	    };
	    console.log(commander);
	    commander.command('create project_name').description('make a new lambda patern project').action(function (project_name) {
	      var err, gen_path, info;
	      console.log('+ 1');
	      local_include__(mu_src_path, process.cwd(), project_name, 2000, function (arguments, _$param0) {
	        err = _$param0;
	        if (ERR(err, cb)) {
	          return;
	        }
	        console.log('+ 2');
	        gen_path = __dirname + '/' + project_name;
	        console.log('+ 3');
	        local_include_sharedget_metadata(gen_path, function (arguments, _$param1, _$param2) {
	          err = _$param1;
	          info = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          console.log('+ 4');
	          local_include_set_up_(mu_src_path, gen_path, info, function (arguments, _$param3) {
	            err = _$param3;
	            if (ERR(err, cb)) {
	              return;
	            }
	            console.log('+ 5');
	            local_include_build_tools_(gen_path, function (arguments, _$param4) {
	              err = _$param4;
	              if (ERR(err, cb)) {
	                return;
	              }
	              console.log('+ 6');
	              overwrite_tools(gen_path, function (arguments, _$param5) {
	                err = _$param5;
	                if (ERR(err, cb)) {
	                  return;
	                }
	                console.log('+ 7');
	                cb();
	              }.bind(this, arguments));
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    });
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 2 */
/***/ function(module, exports) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var import_copy_pathcopy, import_read_filereadFile, import_write_filewriteFile, _;
	  import_copy_pathcopy = jspm_res.module_fsextra100.copy;
	  import_read_filereadFile = jspm_res.module_fsextra100.readFile;
	  import_write_filewriteFile = jspm_res.module_fsextra100.writeFile;
	  _ = function _(mu_src_path, root_path, project_name, year, cb) {
	    var skel_path, gen_path, err, readme, index, test_file, meta;
	    skel_path = mu_src_path + '/skeleton_data';
	    gen_path = root_path + '/' + project_name;
	    import_copy_path(skel_path, gen_path, function (arguments, _$param0) {
	      err = _$param0;
	      if (ERR(err, cb)) {
	        return;
	      }
	      import_read_file(gen_path + '/readme.md', 'utf8', function (arguments, _$param1, _$param2) {
	        err = _$param1;
	        readme = _$param2;
	        if (ERR(err, cb)) {
	          return;
	        }
	        readme = readme.replace(/\[\[project_name\]\]/g, project_name);
	        import_write_file(gen_path + '/readme.md', readme, function (arguments, _$param3) {
	          err = _$param3;
	          if (ERR(err, cb)) {
	            return;
	          }
	          import_read_file(gen_path + '/_.es6', 'utf8', function (arguments, _$param4, _$param5) {
	            err = _$param4;
	            index = _$param5;
	            if (ERR(err, cb)) {
	              return;
	            }
	            index = index.replace(/\[\[project_name\]\]/g, project_name);
	            import_write_file(gen_path + '/_.es6', index, function (arguments, _$param6) {
	              err = _$param6;
	              if (ERR(err, cb)) {
	                return;
	              }
	              import_read_file(gen_path + '/__test.es6', 'utf8', function (arguments, _$param7, _$param8) {
	                err = _$param7;
	                test_file = _$param8;
	                if (ERR(err, cb)) {
	                  return;
	                }
	                test_file = test_file.replace(/\[\[project_name\]\]/g, project_name);
	                import_write_file(gen_path + '/__test.es6', test_file, function (arguments, _$param9) {
	                  err = _$param9;
	                  if (ERR(err, cb)) {
	                    return;
	                  }
	                  import_read_file(gen_path + '/meta/data.yaml', 'utf8', function (arguments, _$param10, _$param11) {
	                    err = _$param10;
	                    meta = _$param11;
	                    if (ERR(err, cb)) {
	                      return;
	                    }
	                    meta = meta.replace(/\[\[project_name\]\]/g, project_name);
	                    import_write_file(gen_path + '/meta/data.yaml', meta, function (arguments, _$param12) {
	                      err = _$param12;
	                      if (ERR(err, cb)) {
	                        return;
	                      }
	                      cb(null);
	                    }.bind(this, arguments));
	                  }.bind(this, arguments));
	                }.bind(this, arguments));
	              }.bind(this, arguments));
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 3 */
/***/ function(module, exports) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	  module_jsyaml370: jspm.import('js-yaml@^3.7.0'),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var import_read_filereadFile, _;
	  import_read_filereadFile = jspm_res.module_fsextra100.readFile;
	  _ = function _(root_path, cb) {
	    var err, metadata;
	    import_read_file(root_path + '/meta/data.yaml', 'utf8', function (arguments, _$param0, _$param1) {
	      err = _$param0;
	      metadata = _$param1;
	      if (ERR(err, cb)) {
	        return;
	      }
	      cb(null, module_jsyaml370.safeLoad(metadata), root_path);
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	  local_include_set_updatables_version_: __webpack_require__(5),
	  local_include_project: __webpack_require__(7),
	  local_include_tools: __webpack_require__(10),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var import_make_dirmkdirp, local_include_set_updatables_version_, local_include_project, local_include_tools, _;
	  import_make_dirmkdirp = jspm_res.module_fsextra100.mkdirp;
	  local_include_set_updatables_version_ = jspm_res.local_include_set_updatables_version_;
	  local_include_project = jspm_res.local_include_project;
	  local_include_tools = jspm_res.local_include_tools;
	  _ = function _(mu_src_path, root_path, metadata, cb) {
	    var err;
	    import_make_dir(root_path + '/generated_local', function (arguments, _$param0) {
	      err = _$param0;
	      if (ERR(err, cb)) {
	        return;
	      }
	      local_include_set_updatables_version_(mu_src_path, root_path, 'HEAD', function (arguments, _$param1) {
	        err = _$param1;
	        if (ERR(err, cb)) {
	          return;
	        }
	        local_include_project(mu_src_path, root_path, metadata, function (arguments, _$param2) {
	          err = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          local_include_tools(mu_src_path, root_path, metadata, cb);
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	  module_gitarchive014: jspm.import('git-archive@^0.1.4'),
	  module_tarfs1150: jspm.import('tar-fs@^1.15.0'),
	  local_include_sharedfind_project_root: __webpack_require__(6),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var local_include_sharedfind_project_root, move, find_project_root, _;
	  local_include_sharedfind_project_root = jspm_res.local_include_sharedfind_project_root;
	  move = module_fsextra100.move;
	  find_project_root = local_include_sharedfind_project_root;
	  _ = function _(mu_src_path, root_path, version, cb) {
	    var move_updatables, cleanup;
	    (function () {
	      var err, tool_root;
	      make_dir(root_path + '/generated_local', function (arguments, _$param0) {
	        err = _$param0;
	        if (ERR(err, cb)) {
	          return;
	        }
	        find_project_root(mu_src_path + '/mu_sub_repo', function (arguments, _$param1, _$param2) {
	          err = _$param1;
	          tool_root = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          module_gitarchive014({
	            repoPath: tool_root + '/.git',
	            commit: version,
	            outputPath: root_path + '/generated_local/updatables.tar'
	          }, function (arguments, _$param3) {
	            err = _$param3;
	            if (ERR(err, cb)) {
	              return;
	            }
	            move_updatables();
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }());
	    move_updatables = function move_updatables() {
	      var err;
	      make_dir(root_path + '/generated_local/updatables', function (arguments, _$param4) {
	        err = _$param4;
	        if (ERR(err, cb)) {
	          return;
	        }
	        module_fsextra100.create_read_stream(root_path + '/generated_local/updatables.tar').pipe(module_tarfs1150.extract(root_path + '/generated_local/updatables')).on('finish', cleanup).on('error', function (er) {
	          return ERR(er, cb);
	        });
	      }.bind(this, arguments));
	    };
	    cleanup = function cleanup() {
	      var err;
	      remove_path(root_path + '/generated_local/lambda_updatables', function (arguments, _$param5) {
	        err = _$param5;
	        if (ERR(err, cb)) {
	          return;
	        }
	        move(root_path + '/generated_local/updatables/gen/release/updatables', root_path + '/generated_local/lambda_updatables', function (arguments, _$param6) {
	          err = _$param6;
	          if (ERR(err, cb)) {
	            return;
	          }
	          remove_path(root_path + '/generated_local/updatables.tar', function (arguments, _$param7) {
	            err = _$param7;
	            if (ERR(err, cb)) {
	              return;
	            }
	            remove_path(root_path + '/generated_local/updatables', function (arguments, _$param8) {
	              err = _$param8;
	              if (ERR(err, cb)) {
	                return;
	              }
	              cb();
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    };
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 6 */
/***/ function(module, exports) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var import_file_existsstat, _;
	  import_file_existsstat = jspm_res.module_fsextra100.stat;
	  _ = function _(curr_path, cb) {
	    var err, exists;
	    import_file_exists(curr_path + '/.git', function (arguments, _$param0, _$param1) {
	      err = _$param0;
	      exists = _$param1;
	      if (exists) {
	        return cb(null, curr_path);
	      }
	      _(curr_path + '/..', cb);
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_jsyaml370: jspm.import('js-yaml@^3.7.0'),
	  local_include_sharedcopy_if_exists: __webpack_require__(8),
	  local_include_set_updatables_version_: __webpack_require__(5),
	  local_include_sharedmake_package_json: __webpack_require__(9),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var local_include_sharedcopy_if_exists, local_include_set_updatables_version_, local_include_sharedmake_package_json, copy_if_exists, _;
	  local_include_sharedcopy_if_exists = jspm_res.local_include_sharedcopy_if_exists;
	  local_include_set_updatables_version_ = jspm_res.local_include_set_updatables_version_;
	  local_include_sharedmake_package_json = jspm_res.local_include_sharedmake_package_json;
	  copy_if_exists = local_include_sharedcopy_if_exists;
	  _ = function _(mu_src_path, root_path, metadata, cb) {
	    var gen_path, err;
	    gen_path = root_path + '/generated_local/project';
	    remove_path(gen_path, function (arguments, _$param0) {
	      err = _$param0;
	      if (ERR(err, cb)) {
	        return;
	      }
	      make_dir(gen_path, function (arguments, _$param1) {
	        err = _$param1;
	        if (ERR(err, cb)) {
	          return;
	        }
	        copy_if_exists(root_path + '/submodules', gen_path, function (arguments, _$param2) {
	          err = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          copy_path(root_path + '/_.es6', gen_path + '/_.es6', function (arguments, _$param3) {
	            err = _$param3;
	            if (ERR(err, cb)) {
	              return;
	            }
	            copy_path(root_path + '/__test.es6', gen_path + '/__test.es6', function (arguments, _$param4) {
	              err = _$param4;
	              if (ERR(err, cb)) {
	                return;
	              }
	              local_include_set_updatables_version_(mu_src_path, root_path, 'HEAD', function (arguments, _$param5) {
	                err = _$param5;
	                if (ERR(err, cb)) {
	                  return;
	                }
	                cb();
	              }.bind(this, arguments));
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = {
	    word_wrap: jspm.import('word-wrap'),
	    // load jspm
	    module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	    ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	    var _ = function _(from, to, cb) {
	        var handle_response = function handle_response() {
	            cb();
	        };

	        module_fsextra100.copy(from, to, handle_response);
	    };

	    return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 9 */
/***/ function(module, exports) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  module_ramda: jspm.import('ramda'),
	  module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	  module_jsyaml370: jspm.import('js-yaml@^3.7.0'),
	  module_objectmergeoverride010: jspm.import('object-merge-override@^0.1.0'),
	  module_stringtemplate100: jspm.import('string-template@^1.0.0'),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var import_read_filereadFile, import_write_filewriteFile, _;
	  import_read_filereadFile = jspm_res.module_fsextra100.readFile;
	  import_write_filewriteFile = jspm_res.module_fsextra100.writeFile;
	  _ = function _(mu_src_path, metadata, gen_path, deps, dev_deps, cb) {
	    var map_to_str, err, def_vals_yaml, def_vals, template, replace, s;
	    map_to_str = function map_to_str(i) {
	      var ret;
	      ret = module_ramda.map(function (pair) {
	        return '"' + pair[0] + '": "' + pair[1] + '"';
	      }, module_ramda.toPairs(i));
	      return ret.join(',\n    ');
	    };
	    import_read_file(mu_src_path + '/lambda_pattern/shared/default_package_values.yaml', 'utf8', function (arguments, _$param0, _$param1) {
	      err = _$param0;
	      def_vals_yaml = _$param1;
	      if (ERR(err, cb)) {
	        return;
	      }
	      def_vals = module_jsyaml370.safeLoad(def_vals_yaml);
	      import_read_file(mu_src_path + '/lambda_pattern/shared/package_template.json', 'utf8', function (arguments, _$param2, _$param3) {
	        err = _$param2;
	        template = _$param3;
	        if (ERR(err, cb)) {
	          return;
	        }
	        replace = module_objectmergeoverride010([
	          metadata,
	          def_vals
	        ]);
	        replace.dependencies = map_to_str(deps);
	        replace.dev_dependencies = map_to_str(dev_deps);
	        s = module_stringtemplate100(template, replace);
	        import_write_file(gen_path + '/package.json', s, cb);
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  local_include_sharedcopy_if_exists: __webpack_require__(8),
	  local_include_sharedmake_package_json: __webpack_require__(9),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var local_include_sharedcopy_if_exists, local_include_sharedmake_package_json, copy_if_exists, make_package_json, _;
	  local_include_sharedcopy_if_exists = jspm_res.local_include_sharedcopy_if_exists;
	  local_include_sharedmake_package_json = jspm_res.local_include_sharedmake_package_json;
	  copy_if_exists = local_include_sharedcopy_if_exists;
	  make_package_json = local_include_sharedmake_package_json;
	  _ = function _(mu_src_path, root, metadata, cb) {
	    var gen_path, err;
	    gen_path = root + '/generated_local/tools';
	    remove_path(gen_path, function (arguments, _$param0) {
	      err = _$param0;
	      if (ERR(err, cb)) {
	        return;
	      }
	      make_dir(gen_path, function (arguments, _$param1) {
	        err = _$param1;
	        if (ERR(err, cb)) {
	          return;
	        }
	        copy_if_exists(root + '/tools', gen_path, function (arguments, _$param2) {
	          err = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          make_dir(root + '/generated/tools', function (arguments, _$param3) {
	            err = _$param3;
	            if (ERR(err, cb)) {
	              return;
	            }
	            cb();
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var jspm, q, promises;
	'use strict';
	jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	promises = {
	  word_wrap: jspm.import('word-wrap'),
	  local_include_sharedcopy_if_exists: __webpack_require__(8),
	  local_include_sharedmove_if_exists: __webpack_require__(12),
	  local_include_sharedconvert_es6: __webpack_require__(13),
	  local_include_modify_es6: __webpack_require__(14),
	  local_include_webpack: __webpack_require__(15),
	  ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	  var local_include_sharedcopy_if_exists, local_include_sharedmove_if_exists, local_include_sharedconvert_es6, local_include_modify_es6, local_include_webpack, copy_if_exists, move_if_exists, convert_es6, _;
	  local_include_sharedcopy_if_exists = jspm_res.local_include_sharedcopy_if_exists;
	  local_include_sharedmove_if_exists = jspm_res.local_include_sharedmove_if_exists;
	  local_include_sharedconvert_es6 = jspm_res.local_include_sharedconvert_es6;
	  local_include_modify_es6 = jspm_res.local_include_modify_es6;
	  local_include_webpack = jspm_res.local_include_webpack;
	  copy_if_exists = local_include_sharedcopy_if_exists;
	  move_if_exists = local_include_sharedmove_if_exists;
	  convert_es6 = local_include_sharedconvert_es6;
	  _ = function _(root, cb) {
	    var err;
	    move_if_exists(root + '/generated_local/tools/node_modules', root + '/generated_local/tools_node_modules', function (arguments, _$param0) {
	      err = _$param0;
	      if (ERR(err, cb)) {
	        return;
	      }
	      remove_file(root + '/generated_local/tools', function (arguments, _$param1) {
	        err = _$param1;
	        if (ERR(err, cb)) {
	          return;
	        }
	        copy_if_exists(root + '/tools', root + '/generated_local/tools', function (arguments, _$param2) {
	          err = _$param2;
	          if (ERR(err, cb)) {
	            return;
	          }
	          move_if_exists(root + '/generated_local/tools_node_modules', root + '/generated_local/tools/node_modules', function (arguments, _$param3) {
	            err = _$param3;
	            if (ERR(err, cb)) {
	              return;
	            }
	            local_include_modify_es6(root + '/generated_local/tools', function (arguments, _$param4) {
	              err = _$param4;
	              if (ERR(err, cb)) {
	                return;
	              }
	              convert_es6(root + '/generated_local/tools', function (arguments, _$param5) {
	                err = _$param5;
	                if (ERR(err, cb)) {
	                  return;
	                }
	                console.log('webpack for tools start');
	                local_include_webpack(root + '/generated_local/tools', function (arguments, _$param6) {
	                  err = _$param6;
	                  if (ERR(err, cb)) {
	                    return;
	                  }
	                  console.log('webpack for tools finished');
	                  cb(null);
	                }.bind(this, arguments));
	              }.bind(this, arguments));
	            }.bind(this, arguments));
	          }.bind(this, arguments));
	        }.bind(this, arguments));
	      }.bind(this, arguments));
	    }.bind(this, arguments));
	  };
	  return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = {
	    word_wrap: jspm.import('word-wrap'),
	    // load jspm
	    module_fsextra100: jspm.import('fs-extra@^1.0.0'),
	    ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	    var import_move_pathmove = jspm_res.module_fsextra100.move;
	    var _ = function _(from, to, cb) {
	        var handle_response = function handle_response() {
	            cb();
	        };

	        import_move_path(from, to, handle_response);
	    };

	    return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = {
	    word_wrap: jspm.import('word-wrap'),
	    // load jspm
	    module_gulp391: jspm.import('gulp@^3.9.1'),
	    module_gulpbabel612: jspm.import('gulp-babel@^6.1.2'),
	    module_continuation017: jspm.import('continuation@^0.1.7'),
	    ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	    var _ = function _(root_path, cb) {
	        module_gulp391.task('_', function () {
	            return module_gulp391.src([root_path + '/**/*.es6', '!**/expected/**', '!**/node_modules/**', '!**/*_data/**/*']).pipe(module_gulpbabel612({ presets: ['es2015'] })).pipe(module_continuation017()).pipe(module_gulp391.dest(root_path)).on('end', cb).on('error', cb);
	        });

	        module_gulp391.start('_');
	    };

	    return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 14 */
/***/ function(module, exports) {

	'use strict';

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = {
	    word_wrap: jspm.import('word-wrap'),
	    // load jspm
	    module_gulp391: jspm.import('gulp@^3.9.1'),
	    module_gulpinsert050: jspm.import('gulp-insert@^0.5.0'),
	    ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	    var _ = function _(root_path, cb) {
	        module_gulp391.task('a', function () {
	            return module_gulp391.src([root_path + '/**' + '/*.es6', '!*' + '*/expected/**', '!**' + '/node_modules/**', '!**' + '/*_data/**' + '/*']).pipe(module_gulpinsert050.prepend('const word_wrap = require(\'word-wrap\');\n')).pipe(gulp_insert.prepend('const ERR = require(\'async-stacktrace\');\n')).pipe(gulp_replace(/\[project\_name\]/g, 'lambda_pattern')).pipe(gulp_replace(/cont\(.*err.*\).*;/g, '$&\n                if (ERR(err, cb)) {\n                    return;}\n                    ')).pipe(gulp_replace(/const cb = \(err.*\) \=> \{/g, '$&\n            if (err) {\n                console.log(word_wrap(err.stack.replace(/\\\\/g, \'\\\\ \'), {\n                    trim: true,\n                    width: 80})\n                .split(\'\\n\').forEach((stack_line) => {\n                    console.log(stack_line\n                        .replace(/\\\\ /g, \'\\\\\')\n                        .replace(/ at/g, \'\\nat\')\n                        .replace(/Error:/g, \'\\nError:\'));}));\n                t.fail();\n                return t.end();}\n            ')).pipe(gulp.dest(root_path)).on('end', cb).on('error', cb);
	        });

	        gulp.start('a');
	    };

	    return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ },
/* 15 */
/***/ function(module, exports) {

	'use strict';

	var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
	var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
	jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
	var promises = {
	    word_wrap: jspm.import('word-wrap'),
	    // load jspm
	    module_gulp391: jspm.import('gulp@^3.9.1'),
	    module_webpackstream320: jspm.import('webpack-stream@^3.2.0'),
	    module_webpacknodeexternals154: jspm.import('webpack-node-externals@^1.5.4'),
	    module_gulpinsert050: jspm.import('gulp-insert@^0.5.0'),
	    ERR: jspm.import('async-stacktrace')
	};
	module.exports = q.all(promises).then(function (jspm_res) {
	    var _ = function _(root_path, cb) {
	        module_gulp391.task('_', function () {
	            process.chdir(root_path);
	            return module_gulp391.src(root_path + '/_.js').pipe(module_webpackstream320({
	                context: root_path,
	                externals: [module_webpacknodeexternals154()],
	                module: {
	                    loaders: [{
	                        test: /\.jsx?$/,
	                        exclude: /node_modules/,
	                        loader: 'shebang' }] },
	                node: {
	                    __filename: false,
	                    __dirname: false },
	                output: { filename: '__built.js' },
	                target: 'node' })).pipe(module_gulpinsert050.prepend('#!/usr/bin/env node\n\n')).pipe(module_gulp391.dest(root_path)).on('end', cb).on('error', cb);
	        });

	        module_gulp391.start('_');
	    };

	    return _;
	});
	/* Generated by Continuation.js v0.1.7 */

/***/ }
/******/ ]);