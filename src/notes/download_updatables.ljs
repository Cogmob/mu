mu_src_path, root_path, version, cb 

make_archive!
    mkdir    root_path + '/generated_local', cont.
    find_project_root    mu_src_path, cont    tool_root
    archive.:
        repoPath = tool_root + '/.git'
        commit = version
        outputPath = root_path + '/generated_local/updatables.tar'
    .then    next.
    .fail    er => raise    er

extract_archive!
    mkdir    root_path + '/generated_local/updatables, cont.
    create_read_stream    root_path + '/generated_local/updatables.tar'
    .pipe    tar.extract.
        root_path + '/generated_local/updatables'
    .on    'finish', next
    .on    'error', throw

isolate_updatables!
    remove  root_path + '/generated_local/lambda_updatables', cont.
    move.
        root_path + '/generated_local/updatables/gen/release/updatables'
        root_path + '/generated_local/lambda_updatables'
        cont.
    remove    root_path + '/generated_local/updatables.tar', cont.
    remove    root_path + '/generated_local/updatables', cont.
    next.

# compiles to:

# const make_archive_wrapper = (report_error, run_next) => {
#   mkdir(root_path + '/generated_local', cont(err));
#   find_project_root_path(mu_src_path, cont(err, tool_root));
#   archive(repoPath: tool_root + '/.git, connit: version, outputPath: ...)
#   .then(run_next(cb))
#   .fail(er => ERR(er, report_error));};
...

# isolate_updatables(cb);
# extract_archive(cb, isolate_updatables)
# make_archive_wrapper(cb, make_archive_wrapper);

