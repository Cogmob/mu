'use strict';

// file: create/_

var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
var promises = [
// load jspm
jspm.import('fs-extra@^1.0.0'),
// load local
require('./../shared/jp'),
// other
jspm.import('async-stacktrace'), jspm.import('wordwrap')];
module.exports = q.all(promises).spread(function (module_fsextra100, local_include_sharedjp, ERR, wordwrap) {
    var import_copy_pathcopy = module_fsextra100.copy;
    var import_read_filereadFile = module_fsextra100.readFile;
    var import_write_filewriteFile = module_fsextra100.writeFile;
    var _ = function _(mu_src_path, root_path, project_name, year, cb) {
        var gen_path = root_path + '/' + project_name;
        return local_include_sharedjp(import_copy_pathcopy(mu_src_path + '/skeleton_data', gen_path), import_read_filereadFile(gen_path + '/readme.md', 'utf8'), function (readme) {
            return import_write_filewriteFile(gen_path + '/readme.md', readme.replace(/\[\[project_name\]\]/g, project_name));
        }, import_read_filereadFile(gen_path + '/_.es6', 'utf8'), function (index) {
            return import_write_filewriteFile(gen_path + '/_.es6', index.replace(/\[\[project_name\]\]/g, project_name));
        }, import_read_filereadFile(gen_path + '/__test.es6', 'utf8'), function (test_file) {
            return import_write_filewriteFile(gen_path + '/__test.es6', test_file.replace(/\[\[project_name\]\]/g, project_name));
        }, import_read_filereadFile(gen_path + '/meta/data.yaml', 'utf8'), function (meta) {
            return import_write_filewriteFile(gen_path + '/meta/data.yaml', meta.replace(/\[\[project_name\]\]/g, project_name));
        });
    };

    return _;
}).catch(function (err) {
    console.log(err);
});
/* Generated by Continuation.js v0.1.7 */