var jspm, q, promises;
'use strict';
jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
promises = [
  jspm.import('fs-extra@^1.0.0'),
  jspm.import('js-yaml@^3.7.0'),
  require('./../set_updatables_version/_'),
  jspm.import('async-stacktrace'),
  jspm.import('wordwrap')
];
module.exports = q.all(promises).spread(function (module_fsextra100, module_jsyaml370, local_include_set_updatables_version_, ERR, wordwrap) {
  var import_read_filereadFile, import_write_filewriteFile, import_move_pathmove, _;
  import_read_filereadFile = module_fsextra100.readFile;
  import_write_filewriteFile = module_fsextra100.writeFile;
  import_move_pathmove = module_fsextra100.move;
  _ = function _(mu_src_path, root_path, version_number, cb) {
    var err, history, updatables_num, version;
    import_read_filereadFile(root_path + '/generated/lambda_state_history.yaml', 'utf8', function (arguments, _$param0, _$param1) {
      err = _$param0;
      history = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      history = module_jsyaml370.safeLoad(history);
      updatables_num = history['states'][version_number]['state_version'];
      local_include_set_updatables_version_(mu_src_path, root_path, updatables_num, function (arguments, _$param2) {
        err = _$param2;
        if (ERR(err, cb)) {
          return;
        }
        import_write_filewriteFile(root_path + '/generated_local/lambda_updatables/version', history['states'][version_number]['state_version'] + '\n', 'utf8', function (arguments, _$param3, _$param4) {
          err = _$param3;
          version = _$param4;
          if (ERR(err, cb)) {
            return;
          }
          import_move_pathmove(root_path + '/generated/tools.js', root_path + '/generated/tools/' + history['current_state_version'] + '.js', function (arguments, _$param5) {
            err = _$param5;
            if (ERR(err, cb)) {
              return;
            }
            import_move_pathmove(root_path + '/generated/tools/' + version_number + '.js', root_path + '/generated/tools.js', function (arguments, _$param6) {
              err = _$param6;
              if (ERR(err, cb)) {
                return;
              }
              history['current_state_version'] = version_number;
              import_write_filewriteFile(root_path + '/generated/lambda_state_history.yaml', yaml.safeDump(history), 'utf8', function (arguments, _$param7) {
                err = _$param7;
                if (ERR(err, cb)) {
                  return;
                }
                cb();
              }.bind(this, arguments));
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  };
  return _;
}).catch(function (err) {
  console.log(err);
});
/* Generated by Continuation.js v0.1.7 */