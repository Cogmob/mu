var jspm, q, promises;
'use strict';
jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
promises = [
  jspm.import('string-template@^1.0.0'),
  require('./_'),
  require('./../shared/get_metadata'),
  require('./../set_up/_'),
  require('./../build/_'),
  jspm.import('async-stacktrace'),
  jspm.import('wordwrap')
];
module.exports = q.all(promises).spread(function (module_stringtemplate100, local_include__, local_include_sharedget_metadata, local_include_set_up_, local_include_build_, ERR, wordwrap) {
  var _;
  _ = function _(commander, mu_src_path) {
    var success_message, cb;
    success_message = 'created project \'{name}\' in your current directory';
    cb = function cb(e, project_name) {
      if (e) {
        return console.log(e);
      }
      console.log(module_stringtemplate100(success_message, { name: project_name }));
    };
    commander.command('create project_name').description('make a new lambda patern project').action(function (project_name) {
      var err, gen_path, info;
      local_include__(mu_src_path, process.cwd(), project_name, 2000, function (arguments, _$param0) {
        err = _$param0;
        if (ERR(err, cb)) {
          return;
        }
        gen_path = __dirname + '/' + project_name;
        local_include_sharedget_metadata(gen_path, function (arguments, _$param1, _$param2) {
          err = _$param1;
          info = _$param2;
          if (ERR(err, cb)) {
            return;
          }
          local_include_set_up_(mu_src_path, gen_path, info, function (arguments, _$param3) {
            err = _$param3;
            if (ERR(err, cb)) {
              return;
            }
            local_include_build_(gen_path, function (arguments, _$param4) {
              err = _$param4;
              if (ERR(err, cb)) {
                return;
              }
              cb(null, project_name);
            }.bind(this, arguments));
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    });
  };
  return _;
}).catch(function (err) {
  console.log(err);
});
/* Generated by Continuation.js v0.1.7 */