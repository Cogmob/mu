var jspm, q, promises;
'use strict';
jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
promises = [
  jspm.import('fs-extra@^1.0.0'),
  jspm.import('js-yaml@^3.7.0'),
  jspm.import('async-stacktrace'),
  jspm.import('wordwrap')
];
module.exports = q.all(promises).spread(function (module_fsextra100, module_jsyaml370, ERR, wordwrap) {
  var import_read_filereadFile, _;
  import_read_filereadFile = module_fsextra100.readFile;
  _ = function _(root_path, cb) {
    var err, updatables_version, history;
    import_read_filereadFile(root_path + '/generated_local/lambda_updatables/version', 'utf8', function (arguments, _$param0, _$param1) {
      err = _$param0;
      updatables_version = _$param1;
      if (ERR(err, cb)) {
        return;
      }
      import_read_filereadFile(root_path + '/generated/lambda_state_history.yaml', 'utf8', function (arguments, _$param2, _$param3) {
        err = _$param2;
        history = _$param3;
        if (ERR(err, cb)) {
          return;
        }
        history = module_jsyaml370.safeLoad(history);
        cb(null, updatables_version, history);
      }.bind(this, arguments));
    }.bind(this, arguments));
  };
  return _;
}).catch(function (err) {
  console.log(err);
});
/* Generated by Continuation.js v0.1.7 */