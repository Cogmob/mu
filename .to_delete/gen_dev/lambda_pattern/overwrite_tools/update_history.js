var jspm, q, promises;
'use strict';
jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
promises = [
  jspm.import('fs-extra@^1.0.0'),
  jspm.import('async-stacktrace'),
  jspm.import('wordwrap')
];
module.exports = q.all(promises).spread(function (module_fsextra100, ERR, wordwrap) {
  var import_write_filewriteFile, _;
  import_write_filewriteFile = module_fsextra100.writeFile;
  _ = function _(root_path, history, updatables_version, cb) {
    var state_version, err;
    state_version = history['newest_state_version'] + 1;
    history['current_state_version'] = state_version;
    history['newest_state_version'] = state_version;
    history['state_version_order'].push(state_version);
    history['states'][state_version] = {
      name: 'state',
      state_version: updatables_version.replace(/\n/g, ''),
      dev_built: false,
      dev_tests_passed: false,
      release_built: false,
      release_tests_passed: false
    };
    import_write_filewriteFile(root_path + '/generated/lambda_state_history.yaml', js - yaml.safeDump(history), 'utf8', function (arguments, _$param0) {
      err = _$param0;
      if (ERR(err, cb)) {
        return;
      }
      cb(null, history);
    }.bind(this, arguments));
  };
  return _;
}).catch(function (err) {
  console.log(err);
});
/* Generated by Continuation.js v0.1.7 */