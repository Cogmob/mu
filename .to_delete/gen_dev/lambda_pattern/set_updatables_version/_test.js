var jspm, q, promises;
'use strict';
jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
promises = [
  jspm.import('serialfs'),
  require('./../create/_'),
  require('./_'),
  jspm.import('async-stacktrace'),
  jspm.import('wordwrap')
];
module.exports = q.all(promises).spread(function (module_serialfs, local_include_create_, local_include__, ERR, wordwrap) {
  var _;
  _ = function _() {
    var cb, mu_src_path, err, commit, contents, generated, expected;
    cb = function cb(err, generated, expected) {
      if (err) {
        console.log(wordwrap(20, 81)(err.stack.replace(/\\/g, '\\ ').replace(/^/gm, '.')).split('\n').forEach(function (stack_line) {
          console.log(stack_line.replace(/\\ /g, '\\').replace(/ at/g, '\nat').replace(/Error:/g, '\nError:'));
        }));
      }
      t.deepEqual(generated, expected);
      t.end();
    };
    mu_src_path = __dirname + '/../..';
    local_include_create_(mu_src_path, __dirname, 'test_project', 2000, function (arguments, _$param0) {
      err = _$param0;
      if (ERR(err, cb)) {
        return;
      }
      commit = 'df3c86442b5e9a05e471e0e90f9188bd372f7e48';
      local_include__(mu_src_path, __dirname + '/test_project', commit, function (arguments, _$param1) {
        err = _$param1;
        if (ERR(err, cb)) {
          return;
        }
        contents = {
          gen: {
            '.gitignore': true,
            dev: {
              lambda_updatables: {
                example_version: true,
                'LICENCE.md': true
              }
            },
            stored: { 'lambda_state_history.yaml': true }
          }
        };
        generated = module_serialfs.obj(__dirname + '/test_project', contents, function (arguments, _$param2, _$param3) {
          err = _$param2;
          generated = _$param3;
          if (ERR(err, cb)) {
            return;
          }
          expected = module_serialfs.obj(__dirname + '/expected_data', contents, function (arguments, _$param4, _$param5) {
            err = _$param4;
            expected = _$param5;
            if (ERR(err, cb)) {
              return;
            }
            cb(null, generated, expected);
          }.bind(this, arguments));
        }.bind(this, arguments));
      }.bind(this, arguments));
    }.bind(this, arguments));
  };
  return _;
}).catch(function (err) {
  console.log(err);
});
/* Generated by Continuation.js v0.1.7 */