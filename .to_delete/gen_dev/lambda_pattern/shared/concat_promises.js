'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// file: shared/concat_promises

var jspm = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/jspm/api.js');
var q = eval('require')(process.env['HOME'] + '/.jspm_global_packages/node_modules/q/q.js');
jspm.setPackagePath(process.env['HOME'] + '/.jspm_global_packages');
var promises = [
// load jspm
jspm.import('bluebird'), jspm.import('lodash/fp'), jspm.import('bash-color'),
// other
jspm.import('async-stacktrace'), jspm.import('wordwrap')];
module.exports = q.all(promises).spread(function (module_bluebird, module_lodashfp, module_bashcolor, ERR, wordwrap) {
    var _ = function _(title, promises) {
        return module_bluebird.all(module_lodashfp.map(promises, function (promise) {
            return promise.then(function (i) {
                return module_bluebird.resolve([false, i]);
            }, function (i) {
                return module_bluebird.resolve([true, i]);
            });
        }));
        B.then(function (results) {
            console.log(1234);

            var _module_lodashfp$redu = module_lodashfp.reduce(function (acc, result) {
                return [acc[0] || result[0], acc[1].concat(result[1])];
            }, results, [false, [module_bashcolor.blue('\n' + title + '\n')]]),
                _module_lodashfp$redu2 = _slicedToArray(_module_lodashfp$redu, 2),
                reject = _module_lodashfp$redu2[0],
                strings = _module_lodashfp$redu2[1];

            console.log('5678');
            if (reject) return module_bluebird.reject(strings.join('\n'));
            return module_bluebird.resolve(strings.join('\n'));
        });
    };

    return _;
}).catch(function (err) {
    console.log(err);
});
/* Generated by Continuation.js v0.1.7 */